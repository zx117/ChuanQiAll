//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:26.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/signal_events.h"
#include <coretypes/objectptr.h>
#include <cqdaq/connection_ptr.h>
#include <cqdaq/signal_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class SignalEventsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ISignalEvents>
{
    using SmartPtr = daq::SignalEventsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signals
 * @addtogroup cqdaq_signal Signal
 * @{

 */


/*!
 * @brief Internal functions of a signal containing event methods that are called on certain
 * events. Eg. when a signal is connected to an input port, or when a signal is used as a domain
 * signal of another.

 */

class SignalEventsPtr : public daq::ObjectPtr<ISignalEvents>
{
public:
    using daq::ObjectPtr<ISignalEvents>::ObjectPtr;
    //using daq::ObjectPtr<ISignalEvents>::operator=;



    SignalEventsPtr()
        : daq::ObjectPtr<ISignalEvents>()

    {
    }

    SignalEventsPtr(daq::ObjectPtr<ISignalEvents>&& ptr)
        : daq::ObjectPtr<ISignalEvents>(std::move(ptr))

    {
    }

    SignalEventsPtr(const daq::ObjectPtr<ISignalEvents>& ptr)
        : daq::ObjectPtr<ISignalEvents>(ptr)

    {
    }

    SignalEventsPtr(const SignalEventsPtr& other)
        : daq::ObjectPtr<ISignalEvents>(other)

    {
    }

    SignalEventsPtr(SignalEventsPtr&& other) noexcept
        : daq::ObjectPtr<ISignalEvents>(std::move(other))

    {
    }
    
    SignalEventsPtr& operator=(const SignalEventsPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ISignalEvents>::operator =(other);


        return *this;
    }

    SignalEventsPtr& operator=(SignalEventsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ISignalEvents>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Notifies the signal that it has been connected to an input port forming a new connection.

     * @param connection The formed connection.
     */
    void listenerConnected(const daq::ConnectionPtr& connection) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->listenerConnected(connection);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Notifies the signal that it has been disconnected from an input port with the given connection.

     * @param connection The connection that was broken.
     */
    void listenerDisconnected(const daq::ConnectionPtr& connection) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->listenerDisconnected(connection);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Notifies the signal that it is being used as a domain signal by the signal passed as the function
     * argument.

     * @param signal The callee signal on which the domain signal reference has been set.
     */
    void domainSignalReferenceSet(const daq::SignalPtr& signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->domainSignalReferenceSet(signal);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Notifies the signal that it is no longer being used as a domain signal by the signal passed as
     * the function argument.

     * @param signal The callee signal on which the domain signal reference has been removed.
     */
    void domainSignalReferenceRemoved(const daq::SignalPtr& signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->domainSignalReferenceRemoved(signal);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/signal_events_ptr.custom.h>)
    #include <cqdaq/signal_events_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
