//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:07.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/packet_reader.h"
#include "reader_ptr.h"
#include <cqdaq/reader_ptr.h>
#include <cqdaq/packet_ptr.h>
#include <coretypes/list_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PacketReaderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPacketReader>
{
    using SmartPtr = daq::PacketReaderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_packet_reader Packet reader
 * @{

 */


/*!
 * @brief A signal reader reads packets from a signal data stream.

 */

class PacketReaderPtr : public GenericReaderPtr<IPacketReader>
{
public:
    using GenericReaderPtr<IPacketReader>::GenericReaderPtr;
    //using GenericReaderPtr<IPacketReader>::operator=;



    PacketReaderPtr()
        : GenericReaderPtr<IPacketReader>()

    {
    }

    PacketReaderPtr(daq::ObjectPtr<IPacketReader>&& ptr)
        : GenericReaderPtr<IPacketReader>(std::move(ptr))

    {
    }

    PacketReaderPtr(const daq::ObjectPtr<IPacketReader>& ptr)
        : GenericReaderPtr<IPacketReader>(ptr)

    {
    }

    PacketReaderPtr(const PacketReaderPtr& other)
        : GenericReaderPtr<IPacketReader>(other)

    {
    }

    PacketReaderPtr(PacketReaderPtr&& other) noexcept
        : GenericReaderPtr<IPacketReader>(std::move(other))

    {
    }
    
    PacketReaderPtr& operator=(const PacketReaderPtr& other)
    {
        if (this == &other)
            return *this;

        GenericReaderPtr<IPacketReader>::operator =(other);


        return *this;
    }

    PacketReaderPtr& operator=(PacketReaderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericReaderPtr<IPacketReader>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Retrieves the next available packet in the data-stream.

     * @returns The next available packet or @c nullptr if not are available.
     */
    daq::PacketPtr read() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PacketPtr packet;
        auto errCode = this->object->read(&packet);
        daq::checkErrorInfo(errCode);

        return packet;
    }


    /*!
     * @brief Retrieves all the currently available packets in the data-stream.

     * @returns The currently available packets or an empty list.
     */
    daq::ListPtr<daq::IPacket> readAll() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IPacket> packets;
        auto errCode = this->object->readAll(&packets);
        daq::checkErrorInfo(errCode);

        return packets;
    }

#if __has_include(<cqdaq/packet_reader_ptr.custom.h>)
    #include <cqdaq/packet_reader_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
