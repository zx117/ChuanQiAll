//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:57.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/module_manager_utils.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/device_info_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/device_type_ptr.h>
#include <cqdaq/device_ptr.h>
#include <cqdaq/component_ptr.h>
#include <coreobjects/property_object_ptr.h>
#include <cqdaq/function_block_type_ptr.h>
#include <cqdaq/function_block_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ModuleManagerUtilsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IModuleManagerUtils>
{
    using SmartPtr = daq::ModuleManagerUtilsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_modules
 * @addtogroup cqdaq_module_manager Module manager utils
 * @{

 */

class ModuleManagerUtilsPtr : public daq::ObjectPtr<IModuleManagerUtils>
{
public:
    using daq::ObjectPtr<IModuleManagerUtils>::ObjectPtr;
    //using daq::ObjectPtr<IModuleManagerUtils>::operator=;



    ModuleManagerUtilsPtr()
        : daq::ObjectPtr<IModuleManagerUtils>()

    {
    }

    ModuleManagerUtilsPtr(daq::ObjectPtr<IModuleManagerUtils>&& ptr)
        : daq::ObjectPtr<IModuleManagerUtils>(std::move(ptr))

    {
    }

    ModuleManagerUtilsPtr(const daq::ObjectPtr<IModuleManagerUtils>& ptr)
        : daq::ObjectPtr<IModuleManagerUtils>(ptr)

    {
    }

    ModuleManagerUtilsPtr(const ModuleManagerUtilsPtr& other)
        : daq::ObjectPtr<IModuleManagerUtils>(other)

    {
    }

    ModuleManagerUtilsPtr(ModuleManagerUtilsPtr&& other) noexcept
        : daq::ObjectPtr<IModuleManagerUtils>(std::move(other))

    {
    }
    
    ModuleManagerUtilsPtr& operator=(const ModuleManagerUtilsPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IModuleManagerUtils>::operator =(other);


        return *this;
    }

    ModuleManagerUtilsPtr& operator=(ModuleManagerUtilsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IModuleManagerUtils>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Returns a list of known devices info.
     * The implementation can start discovery in background and only return the results in this function.

     * @returns The list of known devices information.
     * Contains information on devices available in all loaded modules.
     */
    daq::ListPtr<daq::IDeviceInfo> getAvailableDevices() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IDeviceInfo> availableDevices;
        auto errCode = this->object->getAvailableDevices(&availableDevices);
        daq::checkErrorInfo(errCode);

        return availableDevices;
    }


    /*!
     * @brief Returns a dictionary of known and available device types this module can create.

     * @returns The dictionary of known device types.
     * Contains information on devices available in all loaded modules.
     */
    daq::DictPtr<daq::IString, daq::IDeviceType> getAvailableDeviceTypes() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IDeviceType> deviceTypes;
        auto errCode = this->object->getAvailableDeviceTypes(&deviceTypes);
        daq::checkErrorInfo(errCode);

        return deviceTypes;
    }


    /*!
     * @brief Creates a device object that can communicate with the device described in the specified connection string.
     * The device object is not automatically added as a sub-device of the caller, but only returned by reference.

     * @returns The device object created to communicate with and control the device.
     * @param connectionString Describes the connection info of the device to connect to.
     * @param parent The parent component/device to which the device attaches.
     * @param config A configuration object that contains parameters used to configure a device in the form of key-value pairs.
     * Iterates through all loaded modules and creates a device with the first module that accepts the provided connection string.
     */
    daq::DevicePtr createDevice(const daq::StringPtr& connectionString, const daq::ComponentPtr& parent, const daq::PropertyObjectPtr& config = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DevicePtr device;
        auto errCode = this->object->createDevice(&device, connectionString, parent, config);
        daq::checkErrorInfo(errCode);

        return device;
    }


    /*!
     * @brief Returns a dictionary of known and available function block types this module can create.

     * @returns The dictionary of known function block types.
     * Contains information on function blocks available in all loaded modules.
     */
    daq::DictPtr<daq::IString, daq::IFunctionBlockType> getAvailableFunctionBlockTypes() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IFunctionBlockType> functionBlockTypes;
        auto errCode = this->object->getAvailableFunctionBlockTypes(&functionBlockTypes);
        daq::checkErrorInfo(errCode);

        return functionBlockTypes;
    }


    /*!
     * @brief Creates and returns a function block with the specified id.
     * The function block is not automatically added to the FB list of the caller.

     * @param id The id of the function block to create. Ids can be retrieved by calling `getAvailableFunctionBlockTypes()`.
     * @param parent The parent component/device to which the device attaches.
     * @param config Function block configuration. In case of a null value, implementation should use default configuration.
     * @param localId Custom local ID for the function block. Overrides the "LocalId" property of the "config" object, if present.
     * @returns The created function block.
     * Iterates through all loaded modules and creates a function block with the first module that accepts the provided connection string.
     * The local ID is equal to the name of the function block type with a "_n" suffix, where "n" is an integer, equal to that of the greatest
     * integer suffix amongst the function blocks of the same function block type already added to a given parent. The initial value of "n" is 0.
     * A custom local ID can be provided by adding a "LocalId" string property to the `config` property object input parameter, or by providing the
     * localId string argument.
     */
    daq::FunctionBlockPtr createFunctionBlock(const daq::StringPtr& id, const daq::ComponentPtr& parent, const daq::PropertyObjectPtr& config = nullptr, const daq::StringPtr& localId = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::FunctionBlockPtr functionBlock;
        auto errCode = this->object->createFunctionBlock(&functionBlock, id, parent, config, localId);
        daq::checkErrorInfo(errCode);

        return functionBlock;
    }

#if __has_include(<cqdaq/module_manager_utils_ptr.custom.h>)
    #include <cqdaq/module_manager_utils_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
