//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:21.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/component_private.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/core_event_args_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ComponentPrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IComponentPrivate>
{
    using SmartPtr = daq::ComponentPrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @brief Provides access to private methods of the component.

 * Said methods allow for triggering a Core event of the component, and locking/unlocking attributes of
 * the component.
 */

class ComponentPrivatePtr : public daq::ObjectPtr<IComponentPrivate>
{
public:
    using daq::ObjectPtr<IComponentPrivate>::ObjectPtr;
    //using daq::ObjectPtr<IComponentPrivate>::operator=;



    ComponentPrivatePtr()
        : daq::ObjectPtr<IComponentPrivate>()

    {
    }

    ComponentPrivatePtr(daq::ObjectPtr<IComponentPrivate>&& ptr)
        : daq::ObjectPtr<IComponentPrivate>(std::move(ptr))

    {
    }

    ComponentPrivatePtr(const daq::ObjectPtr<IComponentPrivate>& ptr)
        : daq::ObjectPtr<IComponentPrivate>(ptr)

    {
    }

    ComponentPrivatePtr(const ComponentPrivatePtr& other)
        : daq::ObjectPtr<IComponentPrivate>(other)

    {
    }

    ComponentPrivatePtr(ComponentPrivatePtr&& other) noexcept
        : daq::ObjectPtr<IComponentPrivate>(std::move(other))

    {
    }
    
    ComponentPrivatePtr& operator=(const ComponentPrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IComponentPrivate>::operator =(other);


        return *this;
    }

    ComponentPrivatePtr& operator=(ComponentPrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IComponentPrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Locks the attributes contained in the provided list.

     * @param attributes The list of attributes that should be locked. Is not case sensitive.
     */
    void lockAttributes(const daq::ListPtr<daq::IString>& attributes) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->lockAttributes(attributes);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Locks all attributes of the component.

     */
    void lockAllAttributes() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->lockAllAttributes();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Unlocks the attributes contained in the provided list.

     * @param attributes The list of attributes that should be unlocked. Is not case sensitive.
     */
    void unlockAttributes(const daq::ListPtr<daq::IString>& attributes) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->unlockAttributes(attributes);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Unlocks all attributes of the component.

     */
    void unlockAllAttributes() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->unlockAllAttributes();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Triggers the component-specific core event with the provided arguments.

     * @param args The arguments of the core event.
     */
    void triggerComponentCoreEvent(const daq::CoreEventArgsPtr& args) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->triggerComponentCoreEvent(args);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/component_private_ptr.custom.h>)
    #include <cqdaq/component_private_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
