//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:04.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/reader_status.h"
#include <coretypes/objectptr.h>
#include <cqdaq/event_packet_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IReaderStatus>
class GenericReaderStatusPtr;

using ReaderStatusPtr = daq::GenericReaderStatusPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IReaderStatus>
{
    using SmartPtr = daq::GenericReaderStatusPtr<daq::IReaderStatus>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_reader Reader status
 * @{

 */


/*!
 * @brief Represents the status of the reading process returned by the reader::read function.

 * The `IReaderStatus` class provides information about the outcome of the reading operation,
 * including the validity of the reader and the potential encounter of event packets during processing.
 * Objects of this class are typically returned as a result of the `read` function of the Readers,
 * allowing the client code to assess and respond to the status of the reading process.
 */
template <typename InterfaceType>
class GenericReaderStatusPtr : public daq::ObjectPtr<InterfaceType>
{
public:
    using daq::ObjectPtr<InterfaceType>::ObjectPtr;
    //using daq::ObjectPtr<InterfaceType>::operator=;



    GenericReaderStatusPtr()
        : daq::ObjectPtr<InterfaceType>()

    {
    }

    GenericReaderStatusPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : daq::ObjectPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericReaderStatusPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : daq::ObjectPtr<InterfaceType>(ptr)

    {
    }

    GenericReaderStatusPtr(const ReaderStatusPtr& other)
        : daq::ObjectPtr<InterfaceType>(other)

    {
    }

    GenericReaderStatusPtr(ReaderStatusPtr&& other) noexcept
        : daq::ObjectPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericReaderStatusPtr& operator=(const ReaderStatusPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericReaderStatusPtr& operator=(ReaderStatusPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Retrieves the current reading status, indicating whether the reading process is in an "Ok" state,
     * has encountered an Event, has failed, or is in an Unknown state.

     * @returns a ReadStatus enum variable where the current reading status will be stored.
     */
    daq::ReadStatus getReadStatus() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReadStatus status;
        auto errCode = this->object->getReadStatus(&status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief Retrieves the event packet from the reading process.

     * @returns The event packet from the reading process.
     */
    daq::EventPacketPtr getEventPacket() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::EventPacketPtr packet;
        auto errCode = this->object->getEventPacket(&packet);
        daq::checkErrorInfo(errCode);

        return packet;
    }


    /*!
     * @brief Checks the validity of the reader.

     * @param[out] status Boolean value indicating the validity of the reader
     */
    daq::Bool getValid() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool valid;
        auto errCode = this->object->getValid(&valid);
        daq::checkErrorInfo(errCode);

        return valid;
    }

#if __has_include(<cqdaq/reader_status_ptr.custom.h>)
    #include <cqdaq/reader_status_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
