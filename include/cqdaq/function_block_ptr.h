//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:35.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/function_block.h"
#include <cqdaq/folder_ptr.h>
#include <cqdaq/function_block_type_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/input_port_ptr.h>
#include <cqdaq/search_filter_ptr.h>
#include <cqdaq/signal_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IFunctionBlock>
class GenericFunctionBlockPtr;

using FunctionBlockPtr = daq::GenericFunctionBlockPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IFunctionBlock>
{
    using SmartPtr = daq::GenericFunctionBlockPtr<daq::IFunctionBlock>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_function_blocks
 * @addtogroup cqdaq_function_block Function block
 * @{

 */


/*!
 * @brief Function blocks perform calculations on inputs/generate data, outputting new data in its
 * output signals as packets.

 * Each function block describes its behaviour and identifiers in its FunctionBlockType structure. It
 * provides a list of input ports that can be connected to signals that the input port accepts, as well as a
 * list of output signals that carry the function block's output data.
 * Additionally, as each function block is a property object, it can define its own set of properties, providing
 * user-configurable settings. In example, a FFT function block would expose a `blockSize` property, defining the
 * amount of samples to be used for calculation in each block.
 * Function blocks also provide a status signal, through which a status packet is sent whenever a connection to a
 * new input port is formed, or when the status changes.
 */
template <typename InterfaceType>
class GenericFunctionBlockPtr : public GenericFolderPtr<InterfaceType>
{
public:
    using GenericFolderPtr<InterfaceType>::GenericFolderPtr;
    //using GenericFolderPtr<InterfaceType>::operator=;



    GenericFunctionBlockPtr()
        : GenericFolderPtr<InterfaceType>()

    {
    }

    GenericFunctionBlockPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericFolderPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericFunctionBlockPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericFolderPtr<InterfaceType>(ptr)

    {
    }

    GenericFunctionBlockPtr(const FunctionBlockPtr& other)
        : GenericFolderPtr<InterfaceType>(other)

    {
    }

    GenericFunctionBlockPtr(FunctionBlockPtr&& other) noexcept
        : GenericFolderPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericFunctionBlockPtr& operator=(const FunctionBlockPtr& other)
    {
        if (this == &other)
            return *this;

        GenericFolderPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericFunctionBlockPtr& operator=(FunctionBlockPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericFolderPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets an information structure contain metadata of the function block type.

     * @returns The Function block type object.
     */
    daq::FunctionBlockTypePtr getFunctionBlockType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::FunctionBlockTypePtr type;
        auto errCode = this->object->getFunctionBlockType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets a list of the function block's input ports.

     * @param searchFilter Provides an optional filter that filters out unwanted components and allows for recursion.
     * @returns The list of input ports.
     * If searchFilter is not provided, the returned list contains only visible input ports and does not include those of
     * child function blocks.
     */
    daq::ListPtr<daq::IInputPort> getInputPorts(const daq::SearchFilterPtr& searchFilter = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IInputPort> ports;
        auto errCode = this->object->getInputPorts(&ports, searchFilter);
        daq::checkErrorInfo(errCode);

        return ports;
    }


    /*!
     * @brief Gets the list of the function block's output signals.

     * @param searchFilter Provides an optional filter that filters out unwanted components and allows for recursion.
     * @returns The list of output signals.
     * If searchFilter is not provided, the returned list contains only visible signals and does not include those of
     * child function blocks.
     */
    daq::ListPtr<daq::ISignal> getSignals(const daq::SearchFilterPtr& searchFilter = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::ISignal> cq_signals;
        auto errCode = this->object->getSignals(&cq_signals, searchFilter);
        daq::checkErrorInfo(errCode);

        return cq_signals;
    }


    /*!
     * @brief Gets the list of the function block's visible output signals including signals from visible child function blocks.

     * @param searchFilter Provides an optional filter that filters out unwanted components and allows for recursion.
     * @returns The list of output signals.
     */
    daq::ListPtr<daq::ISignal> getSignalsRecursive(const daq::SearchFilterPtr& searchFilter = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::ISignal> signals;
        auto errCode = this->object->getSignalsRecursive(&signals, searchFilter);
        daq::checkErrorInfo(errCode);

        return signals;
    }


    /*!
     * @brief Gets the function block's status signal.

     * @returns The status signal.
     * The status signal sends out a status event packet every time it is connected to an input port.
     * Additionally, a status event packet is sent whenever the status of the function block changes.
     */
    daq::SignalPtr getStatusSignal() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SignalPtr statusSignal;
        auto errCode = this->object->getStatusSignal(&statusSignal);
        daq::checkErrorInfo(errCode);

        return statusSignal;
    }


    /*!
     * @brief Gets a list of sub-function blocks.

     * @param searchFilter Provides optional parameters such as "recursive" and "visibleOnly" to modify the search pattern.
     * @returns The list of sub-function blocks.
     * If searchFilter is not provided, the returned list contains only visible function blocks and does not include those of
     * child function blocks.
     */
    daq::ListPtr<daq::IFunctionBlock> getFunctionBlocks(const daq::SearchFilterPtr& searchFilter = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IFunctionBlock> functionBlocks;
        auto errCode = this->object->getFunctionBlocks(&functionBlocks, searchFilter);
        daq::checkErrorInfo(errCode);

        return functionBlocks;
    }

#if __has_include(<cqdaq/function_block_ptr.custom.h>)
    #include <cqdaq/function_block_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
