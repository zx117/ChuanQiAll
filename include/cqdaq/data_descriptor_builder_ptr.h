//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:22.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/data_descriptor_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/data_descriptor_ptr.h>
#include <coretypes/string_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/dimension_ptr.h>
#include <coreobjects/unit_ptr.h>
#include <cqdaq/range_ptr.h>
#include <cqdaq/data_rule_ptr.h>
#include <coretypes/ratio_ptr.h>
#include <cqdaq/scaling_ptr.h>
#include <coretypes/dict_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DataDescriptorBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDataDescriptorBuilder>
{
    using SmartPtr = daq::DataDescriptorBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signals
 * @addtogroup cqdaq_data_descriptor Data descriptor
 * @{

 */


/*!
 * @brief Builder component of Data descriptor objects. Contains setter methods that allow for Data descriptor
 * parameter configuration, and a `build` method that builds the Data descriptor.

 */

class DataDescriptorBuilderPtr : public daq::ObjectPtr<IDataDescriptorBuilder>
{
public:
    using daq::ObjectPtr<IDataDescriptorBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IDataDescriptorBuilder>::operator=;



    DataDescriptorBuilderPtr()
        : daq::ObjectPtr<IDataDescriptorBuilder>()

    {
    }

    DataDescriptorBuilderPtr(daq::ObjectPtr<IDataDescriptorBuilder>&& ptr)
        : daq::ObjectPtr<IDataDescriptorBuilder>(std::move(ptr))

    {
    }

    DataDescriptorBuilderPtr(const daq::ObjectPtr<IDataDescriptorBuilder>& ptr)
        : daq::ObjectPtr<IDataDescriptorBuilder>(ptr)

    {
    }

    DataDescriptorBuilderPtr(const DataDescriptorBuilderPtr& other)
        : daq::ObjectPtr<IDataDescriptorBuilder>(other)

    {
    }

    DataDescriptorBuilderPtr(DataDescriptorBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IDataDescriptorBuilder>(std::move(other))

    {
    }
    
    DataDescriptorBuilderPtr& operator=(const DataDescriptorBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDataDescriptorBuilder>::operator =(other);


        return *this;
    }

    DataDescriptorBuilderPtr& operator=(DataDescriptorBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDataDescriptorBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Data descriptor object using the currently set values of the Builder.

     * @returns The built Data descriptor.
     */
    daq::DataDescriptorPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DataDescriptorPtr dataDescriptor;
        auto errCode = this->object->build(&dataDescriptor);
        daq::checkErrorInfo(errCode);

        return dataDescriptor;
    }


    /*!
     * @brief Sets a descriptive name for the signal's value.

     * @param name The name of the signal value.
     * When, for example, describing the amplitude values of spectrum data, the name would be `Amplitude`.
     */
    DataDescriptorBuilderPtr setName(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets a descriptive name for the signal's value.

     * @returns The name of the signal value.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the list of the descriptor's dimension's.

     * @param dimensions The list of dimensions.
     * The number of dimensions defines the rank of the signal's data (eg. Vector, Matrix).
     */
    DataDescriptorBuilderPtr setDimensions(const daq::ListPtr<daq::IDimension>& dimensions) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDimensions(dimensions);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list of the descriptor's dimension's.

     * @returns The list of dimensions.
     */
    daq::ListPtr<daq::IDimension> getDimensions() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IDimension> dimensions;
        auto errCode = this->object->getDimensions(&dimensions);
        daq::checkErrorInfo(errCode);

        return dimensions;
    }


    /*!
     * @brief Sets the descriptor's sample type.

     * @param sampleType The descriptor's sample type.
     */
    DataDescriptorBuilderPtr setSampleType(daq::SampleType sampleType) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSampleType(sampleType);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the descriptor's sample type.

     * @returns The descriptor's sample type.
     */
    daq::SampleType getSampleType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType sampleType;
        auto errCode = this->object->getSampleType(&sampleType);
        daq::checkErrorInfo(errCode);

        return sampleType;
    }


    /*!
     * @brief Sets the unit of the data in a signal's packets.

     * @param unit The unit specified by the descriptor.
     */
    DataDescriptorBuilderPtr setUnit(const daq::UnitPtr& unit) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setUnit(unit);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the unit of the data in a signal's packets.

     * @returns The unit specified by the descriptor.
     */
    daq::UnitPtr getUnit() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->getUnit(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Sets the value range of the data in a signal's packets defining the lowest and highest expected values.

     * @param range The value range the signal's data.
     * The range is not enforced by cqDAQ.
     */
    DataDescriptorBuilderPtr setValueRange(const daq::RangePtr& range) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValueRange(range);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the value range of the data in a signal's packets defining the lowest and highest expected values.

     * @returns The value range the signal's data.
     */
    daq::RangePtr getValueRange() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::RangePtr range;
        auto errCode = this->object->getValueRange(&range);
        daq::checkErrorInfo(errCode);

        return range;
    }


    /*!
     * @brief Sets the value Data rule.

     * @param rule The value Data rule.
     * If explicit, the values will be contained in the packet buffer. Otherwise they are calculated
     * using the packet parameter as the input into the rule.
     */
    DataDescriptorBuilderPtr setRule(const daq::DataRulePtr& rule) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRule(rule);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the value Data rule.

     * @returns The value Data rule.
     */
    daq::DataRulePtr getRule() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DataRulePtr rule;
        auto errCode = this->object->getRule(&rule);
        daq::checkErrorInfo(errCode);

        return rule;
    }


    /*!
     * @brief Sets the absolute origin of a signal value component.

     * @param origin The absolute origin.
     * An origin can be an arbitrary string that determines the starting point of the signal data.
     * All explicit or implicit values are multiplied by the resolution and added to the origin to obtain
     * absolute data instead of relative.
     * Most commonly a time epoch is used, in which case it should be formatted according to the ISO 8601 standard.
     */
    DataDescriptorBuilderPtr setOrigin(const daq::StringPtr& origin) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOrigin(origin);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the absolute origin of a signal value component.

     * @returns The absolute origin.
     */
    daq::StringPtr getOrigin() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr origin;
        auto errCode = this->object->getOrigin(&origin);
        daq::checkErrorInfo(errCode);

        return origin;
    }


    /*!
     * @brief Sets the Resolution which scales the an explicit or implicit value to the physical unit defined in `unit`.

     * @param tickResolution The Resolution.
     */
    DataDescriptorBuilderPtr setTickResolution(const daq::RatioPtr& tickResolution) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setTickResolution(tickResolution);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Resolution which scales the an explicit or implicit value to the physical unit defined in `unit`.

     * @returns The Resolution.
     */
    daq::RatioPtr getTickResolution() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::RatioPtr tickResolution;
        auto errCode = this->object->getTickResolution(&tickResolution);
        daq::checkErrorInfo(errCode);

        return tickResolution;
    }


    /*!
     * @brief Sets the scaling rule that needs to be applied to explicit/implicit data by readers.

     * @param scaling The scaling rule.
     * The OutputDataType of the rule matches the value descriptor's sample type. The InputDataType defines the sample type
     * of either the explicit data in packet buffers, or the packet's implicit value's sample type.
     */
    DataDescriptorBuilderPtr setPostScaling(const daq::ScalingPtr& scaling) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPostScaling(scaling);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the scaling rule that needs to be applied to explicit/implicit data by readers.

     * @returns The scaling rule.
     */
    daq::ScalingPtr getPostScaling() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScalingPtr scaling;
        auto errCode = this->object->getPostScaling(&scaling);
        daq::checkErrorInfo(errCode);

        return scaling;
    }


    /*!
     * @brief Sets the fields of the struct, forming a recursive value descriptor definition.

     * @param structFields The list of data descriptors forming the struct fields.
     * Contains a list of value descriptors, defining the data layout: the data described by the first DataDescriptor
     * of the list is at the start, followed by the data described by the second and so on.
     */
    DataDescriptorBuilderPtr setStructFields(const daq::ListPtr<daq::IDataDescriptor>& structFields) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setStructFields(structFields);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the fields of the struct, forming a recursive value descriptor definition.

     * @returns The list of data descriptors forming the struct fields.
     */
    daq::ListPtr<daq::IDataDescriptor> getStructFields() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IDataDescriptor> structFields;
        auto errCode = this->object->getStructFields(&structFields);
        daq::checkErrorInfo(errCode);

        return structFields;
    }


    /*!
     * @brief Sets any extra metadata defined by the data descriptor.

     * @param metadata Additional metadata of the descriptor as a dictionary.
     * All objects in the metadata dictionary must be serializable.
     */
    DataDescriptorBuilderPtr setMetadata(const daq::DictPtr<daq::IString, daq::IString>& metadata) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMetadata(metadata);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets any extra metadata defined by the data descriptor.

     * @returns Additional metadata of the descriptor as a dictionary.
     */
    daq::DictPtr<daq::IString, daq::IString> getMetadata() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IString> metadata;
        auto errCode = this->object->getMetadata(&metadata);
        daq::checkErrorInfo(errCode);

        return metadata;
    }

#if __has_include(<cqdaq/data_descriptor_builder_ptr.custom.h>)
    #include <cqdaq/data_descriptor_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_data_descriptor_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
