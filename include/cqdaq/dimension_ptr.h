//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:20.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/dimension.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/unit_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/dimension_rule_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DimensionPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDimension>
{
    using SmartPtr = daq::DimensionPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_dimension Dimension
 * @{

 */


/*!
 * @brief Describes a dimension of the signal's data. Eg. a column/row in a matrix.

 * Dimension objects define the size and labels of a single data dimension. Labels, in concert
 * with the unit, provide information about the position of data in a structure. For example, for vector
 * rank data in a frequency domain, the unit would be Hz, and the labels would range from the minimum to the maximum
 * frequency of the spectrum.
 * The number of dimensions a sample descriptor defines the rank of the signals data. When no dimensions are
 * present, one sample is a single value. When there's one dimension, a sample contains a vector of values,
 * when there are three a sample contains a matrix. Higher ranks of data can be represented by adding more
 * dimension objects to a sample descriptor.
 * The labels can be defined with a Rule (in example a linear rule with a coefficient and offset), where the
 * the data index is the input to the rule. In example
 * A Linear rule with coefficient = 5, offset = 10, size = 5 provides the following list of labels:
 * [10, 15, 20, 25, 30]
 * To specify the labels can explicitly, the List dimension rule can be used. The list rule allows for a list of
 * numbers, strings, or ranges to be used as the dimension labels.
 * Dimension objects implement the Struct methods internally and are Core type `ctStruct`.
 */

class DimensionPtr : public daq::ObjectPtr<IDimension>
{
public:
    using daq::ObjectPtr<IDimension>::ObjectPtr;
    //using daq::ObjectPtr<IDimension>::operator=;



    DimensionPtr()
        : daq::ObjectPtr<IDimension>()

    {
    }

    DimensionPtr(daq::ObjectPtr<IDimension>&& ptr)
        : daq::ObjectPtr<IDimension>(std::move(ptr))

    {
    }

    DimensionPtr(const daq::ObjectPtr<IDimension>& ptr)
        : daq::ObjectPtr<IDimension>(ptr)

    {
    }

    DimensionPtr(const DimensionPtr& other)
        : daq::ObjectPtr<IDimension>(other)

    {
    }

    DimensionPtr(DimensionPtr&& other) noexcept
        : daq::ObjectPtr<IDimension>(std::move(other))

    {
    }
    
    DimensionPtr& operator=(const DimensionPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDimension>::operator =(other);


        return *this;
    }

    DimensionPtr& operator=(DimensionPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDimension>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the name of the dimension.

     * @returns The name of the dimension.
     * The name that best describes the dimension, in example "Frequency" for spectrum data.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Gets the size of the dimension.

     * @returns The size of the dimension.
     * The size is obtained from the dimension rule parameters - either from the `size` parameter, or the
     * count of elements in the `list` parameter.
     */
    daq::SizeT getSize() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT size;
        auto errCode = this->object->getSize(&size);
        daq::checkErrorInfo(errCode);

        return size;
    }


    /*!
     * @brief Gets the unit of the dimension's labels.

     * @returns The unit of the dimension.
     */
    daq::UnitPtr getUnit() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->getUnit(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Gets a list of labels that defines the dimension.

     * @returns The list of labels.
     * The list is obtained from the dimension rule parameters by parsing and evaluating the parameters
     * in conjunction with the rule type.
     */
    daq::ListPtr<daq::IBaseObject> getLabels() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IBaseObject> labels;
        auto errCode = this->object->getLabels(&labels);
        daq::checkErrorInfo(errCode);

        return labels;
    }


    /*!
     * @brief Gets the rule that defines the labels and size of the dimension.

     * @returns The dimension rule.
     * The rule takes as input the index of data value in a sample and produces a label associated
     * with that index.
     */
    daq::DimensionRulePtr getRule() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DimensionRulePtr rule;
        auto errCode = this->object->getRule(&rule);
        daq::checkErrorInfo(errCode);

        return rule;
    }

#if __has_include(<cqdaq/dimension_ptr.custom.h>)
    #include <cqdaq/dimension_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_dimension
 * @addtogroup cqdaq_dimension_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
