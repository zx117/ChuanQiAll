//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:44.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/device_info_config.h"
#include "device_info_ptr.h"
#include <cqdaq/device_info_ptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/device_type_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DeviceInfoConfigPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDeviceInfoConfig>
{
    using SmartPtr = daq::DeviceInfoConfigPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_device_info Device info
 * @{

 */


/*!
 * @brief Configuration component of Device info objects. Contains setter methods that
 * are available until the object is frozen.

 * Device info config contains functions that allow for the configuration of Device info objects.
 * The implementation of `config` also implements the `freeze` function that freezes the object making it
 * immutable. Once frozen, the setter methods fail as the object can no longer be modified.
 */

class DeviceInfoConfigPtr : public GenericDeviceInfoPtr<IDeviceInfoConfig>
{
public:
    using GenericDeviceInfoPtr<IDeviceInfoConfig>::GenericDeviceInfoPtr;
    //using GenericDeviceInfoPtr<IDeviceInfoConfig>::operator=;



    DeviceInfoConfigPtr()
        : GenericDeviceInfoPtr<IDeviceInfoConfig>()

    {
    }

    DeviceInfoConfigPtr(daq::ObjectPtr<IDeviceInfoConfig>&& ptr)
        : GenericDeviceInfoPtr<IDeviceInfoConfig>(std::move(ptr))

    {
    }

    DeviceInfoConfigPtr(const daq::ObjectPtr<IDeviceInfoConfig>& ptr)
        : GenericDeviceInfoPtr<IDeviceInfoConfig>(ptr)

    {
    }

    DeviceInfoConfigPtr(const DeviceInfoConfigPtr& other)
        : GenericDeviceInfoPtr<IDeviceInfoConfig>(other)

    {
    }

    DeviceInfoConfigPtr(DeviceInfoConfigPtr&& other) noexcept
        : GenericDeviceInfoPtr<IDeviceInfoConfig>(std::move(other))

    {
    }
    
    DeviceInfoConfigPtr& operator=(const DeviceInfoConfigPtr& other)
    {
        if (this == &other)
            return *this;

        GenericDeviceInfoPtr<IDeviceInfoConfig>::operator =(other);


        return *this;
    }

    DeviceInfoConfigPtr& operator=(DeviceInfoConfigPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericDeviceInfoPtr<IDeviceInfoConfig>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the name of the device

     * @param name The name of the device.
     */
    void setName(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the string representation of a connection address used to connect to the device.

     * @param connectionString The string used to connect to the device.
     */
    void setConnectionString(const daq::StringPtr& connectionString) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setConnectionString(connectionString);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets a device type as an object providing type id, name, short description and
     * default device configuration.

     * @param[out] deviceType The device type object
     */
    void setDeviceType(const daq::DeviceTypePtr& deviceType) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDeviceType(deviceType);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the company that manufactured the device

     * @param manufacturer The manufacturer of the device.
     */
    void setManufacturer(const daq::StringPtr& manufacturer) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setManufacturer(manufacturer);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the unique identifier of the company that manufactured the device.
     * This identifier should be a fully qualified domain name;
     * however, it may be a GUID or similar construct that ensures global uniqueness.

     * @param manufacturerUri The manufacturer uri of the device.
     */
    void setManufacturerUri(const daq::StringPtr& manufacturerUri) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setManufacturerUri(manufacturerUri);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the model of the device

     * @param model The model of the device.
     */
    void setModel(const daq::StringPtr& model) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setModel(model);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the unique combination of numbers and letters used to identify the device.

     * @param productCode The product code of the device.
     */
    void setProductCode(const daq::StringPtr& productCode) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setProductCode(productCode);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the revision level of the device.

     * @param deviceRevision The device revision level.
     */
    void setDeviceRevision(const daq::StringPtr& deviceRevision) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDeviceRevision(deviceRevision);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the revision level of the hardware

     * @param hardwareRevision The hardware revision of the device.
     */
    void setHardwareRevision(const daq::StringPtr& hardwareRevision) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setHardwareRevision(hardwareRevision);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief sets the revision level of the software component

     * @param softwareRevision The software revision of the device.
     */
    void setSoftwareRevision(const daq::StringPtr& softwareRevision) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSoftwareRevision(softwareRevision);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the address of the user manual.
     * It may be a pathname in the file system or a URL (Web address)

     * @param deviceManual The manual of the device.
     */
    void setDeviceManual(const daq::StringPtr& deviceManual) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDeviceManual(deviceManual);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the purpose of the device. For example "TestMeasurementDevice".

     * @param deviceClass The class of the device.
     */
    void setDeviceClass(const daq::StringPtr& deviceClass) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDeviceClass(deviceClass);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the serial number of the device

     * @param serialNumber The serial number of the device.
     */
    void setSerialNumber(const daq::StringPtr& serialNumber) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSerialNumber(serialNumber);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the globally unique resource identifier provided by the manufacturer.
     * The recommended syntax of the ProductInstanceUri is: <ManufacturerUri>/<any string>
     * where <any string> is unique among all instances using the same ManufacturerUri.

     * @param productInstanceUri The product instance uri of the device.
     */
    void setProductInstanceUri(const daq::StringPtr& productInstanceUri) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setProductInstanceUri(productInstanceUri);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the incremental counter indicating the number of times the configuration
     * data has been modified.

     * @param revisionCounter The revision counter of the device.
     */
    void setRevisionCounter(daq::Int revisionCounter) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRevisionCounter(revisionCounter);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the asset ID of the device. Represents a user writable alphanumeric character
     * sequence uniquely identifying a component.

     * @param id The asset ID of the device.
     * The ID is provided by the integrator or user of the device. It contains typically an identifier
     * in a branch, use case or user specific naming scheme. This could be for example a reference to
     * an electric scheme.
     */
    void setAssetId(const daq::StringPtr& id) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setAssetId(id);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the Mac address of the device.

     * @param macAddress The Mac address.
     */
    void setMacAddress(const daq::StringPtr& macAddress) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMacAddress(macAddress);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the Mac address of the device's parent.

     * @param macAddress The parent's Mac address.
     */
    void setParentMacAddress(const daq::StringPtr& macAddress) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setParentMacAddress(macAddress);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the platform of the device. The platform specifies whether real hardware
     * is used or if the device is simulated.

     * @param platform The platform of the device.
     */
    void setPlatform(const daq::StringPtr& platform) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPlatform(platform);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the position of the device. The position specifies the position within a
     * given system. For example in which slot or slice the device is in.

     * @param position The platform of the device.
     */
    void setPosition(daq::Int position) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPosition(position);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the system type. The system type can, for example, be LayeredSystem,
     * StandaloneSystem, or RackSystem.

     * @param type The system type of the device.
     */
    void setSystemType(const daq::StringPtr& type) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSystemType(type);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the system UUID that represents a unique ID of a system. All devices in a system
     * share this UUID.

     * @param uuid The unique ID of a system.
     */
    void setSystemUuid(const daq::StringPtr& uuid) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSystemUuid(uuid);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/device_info_config_ptr.custom.h>)
    #include <cqdaq/device_info_config_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
