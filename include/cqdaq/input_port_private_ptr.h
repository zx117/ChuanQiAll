//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:27.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/input_port_private.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class InputPortPrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IInputPortPrivate>
{
    using SmartPtr = daq::InputPortPrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signal_path
 * @addtogroup cqdaq_input_port Input port
 * @{

 */


/*!
 * @brief Internal functions used by cqDAQ core. This interface should never be used in
 * client SDK or module code.

 */

class InputPortPrivatePtr : public daq::ObjectPtr<IInputPortPrivate>
{
public:
    using daq::ObjectPtr<IInputPortPrivate>::ObjectPtr;
    //using daq::ObjectPtr<IInputPortPrivate>::operator=;



    InputPortPrivatePtr()
        : daq::ObjectPtr<IInputPortPrivate>()

    {
    }

    InputPortPrivatePtr(daq::ObjectPtr<IInputPortPrivate>&& ptr)
        : daq::ObjectPtr<IInputPortPrivate>(std::move(ptr))

    {
    }

    InputPortPrivatePtr(const daq::ObjectPtr<IInputPortPrivate>& ptr)
        : daq::ObjectPtr<IInputPortPrivate>(ptr)

    {
    }

    InputPortPrivatePtr(const InputPortPrivatePtr& other)
        : daq::ObjectPtr<IInputPortPrivate>(other)

    {
    }

    InputPortPrivatePtr(InputPortPrivatePtr&& other) noexcept
        : daq::ObjectPtr<IInputPortPrivate>(std::move(other))

    {
    }
    
    InputPortPrivatePtr& operator=(const InputPortPrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IInputPortPrivate>::operator =(other);


        return *this;
    }

    InputPortPrivatePtr& operator=(InputPortPrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IInputPortPrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Disconnects the signal without notification to the signal.

     */
    void disconnectWithoutSignalNotification() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->disconnectWithoutSignalNotification();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/input_port_private_ptr.custom.h>)
    #include <cqdaq/input_port_private_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
