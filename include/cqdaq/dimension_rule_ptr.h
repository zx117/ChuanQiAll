//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:24.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/dimension_rule.h"
#include <coretypes/objectptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DimensionRulePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDimensionRule>
{
    using SmartPtr = daq::DimensionRulePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_dimension
 * @addtogroup cqdaq_dimension_rule Dimension rule
 * @{

 */


/*!
 * @brief Enumeration of available rule types

 */


/*!
 * @brief Rule that defines the labels (alternatively called bins, ticks) of a dimension.

 * Each dimension has a rule, which is queried and parsed by the dimension `getLabels` and `getSize` calls.
 * Three different rule types are supported by cqDAQ, with all others having to be set to `custom` type, requiring
 * anyone using them to parse them manually.
 * Dimension rule objects implement the Struct methods internally and are Core type `ctStruct`.
 * @subsection dimension_rule_types Rule types
 * @subsubsection linear_dimension_rule Linear dimension rule
 * The parameters include a `delta`, `start`, and `size` number members. The list of labels of size `size` is generated by
 * the equation: <em>index * delta + start</em>, where the index starts with 0 and goes up to `size - 1`.
 * In example: `delta = 10, start = 5, size = 5` produces the following list of samples -> [5, 15, 25, 35, 45]
 * @subsubsection logarithmic_dimension_rule Logarithmic dimension rule
 * The parameters include a `delta`, `start`, `base` and `size` number members. The list of labels of size `size` is generated by
 * the equation: <em>base ^ (index * delta + start)</em>, where the index starts with 0 and goes up to `size - 1`.
 * In example: `delta = 1, start = -2, base = 10 size = 5` produces the following list of samples -> [0.01, 0.1, 1, 10, 20]
 * @subsubsection list_dimension_rule List dimension rule
 * The parameters include a `list` list-typed member. The `list` contains labels, implicitly also defining the dimension size.
 * The labels in the list can be either strings, numbers, or ranges.
 * String example list: `list` = ["banana", "apple", "coconut"]
 * Number example list: = [1.2, 10.5, 20.2, 50.7]
 * Range example list: [1-10, 10-20, 20-30, 30-40, 40-50]
 */

class DimensionRulePtr : public daq::ObjectPtr<IDimensionRule>
{
public:
    using daq::ObjectPtr<IDimensionRule>::ObjectPtr;
    //using daq::ObjectPtr<IDimensionRule>::operator=;



    DimensionRulePtr()
        : daq::ObjectPtr<IDimensionRule>()

    {
    }

    DimensionRulePtr(daq::ObjectPtr<IDimensionRule>&& ptr)
        : daq::ObjectPtr<IDimensionRule>(std::move(ptr))

    {
    }

    DimensionRulePtr(const daq::ObjectPtr<IDimensionRule>& ptr)
        : daq::ObjectPtr<IDimensionRule>(ptr)

    {
    }

    DimensionRulePtr(const DimensionRulePtr& other)
        : daq::ObjectPtr<IDimensionRule>(other)

    {
    }

    DimensionRulePtr(DimensionRulePtr&& other) noexcept
        : daq::ObjectPtr<IDimensionRule>(std::move(other))

    {
    }
    
    DimensionRulePtr& operator=(const DimensionRulePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDimensionRule>::operator =(other);


        return *this;
    }

    DimensionRulePtr& operator=(DimensionRulePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDimensionRule>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the type of the dimension rule.

     * @returns The type of the dimension rule.
     */
    daq::DimensionRuleType getType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DimensionRuleType type;
        auto errCode = this->object->getType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets a dictionary of string-object key-value pairs representing the parameters used to evaluate the rule.

     * @returns The dictionary containing the rule parameter members.
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getParameters() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> parameters;
        auto errCode = this->object->getParameters(&parameters);
        daq::checkErrorInfo(errCode);

        return parameters;
    }

#if __has_include(<cqdaq/dimension_rule_ptr.custom.h>)
    #include <cqdaq/dimension_rule_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_dimension_rule
 * @addtogroup cqdaq_dimension_rule_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
