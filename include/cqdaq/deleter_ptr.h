//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:19.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/deleter.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class DeleterPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDeleter>
{
    using SmartPtr = daq::DeleterPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_packets
 * @addtogroup cqdaq_deleter Deleter
 * @{

 */


/*!
 * @brief Callback which is called when external memory is no longer needed and can be freed.

 * This interface is used with blueberry packets that are created with external memory. Provider
 * of external memory is responsible to provide a custom deleter, which is called when the packet is
 * destroyed.
 */

class DeleterPtr : public daq::ObjectPtr<IDeleter>
{
public:
    using daq::ObjectPtr<IDeleter>::ObjectPtr;
    //using daq::ObjectPtr<IDeleter>::operator=;



    DeleterPtr()
        : daq::ObjectPtr<IDeleter>()

    {
    }

    DeleterPtr(daq::ObjectPtr<IDeleter>&& ptr)
        : daq::ObjectPtr<IDeleter>(std::move(ptr))

    {
    }

    DeleterPtr(const daq::ObjectPtr<IDeleter>& ptr)
        : daq::ObjectPtr<IDeleter>(ptr)

    {
    }

    DeleterPtr(const DeleterPtr& other)
        : daq::ObjectPtr<IDeleter>(other)

    {
    }

    DeleterPtr(DeleterPtr&& other) noexcept
        : daq::ObjectPtr<IDeleter>(std::move(other))

    {
    }
    
    DeleterPtr& operator=(const DeleterPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDeleter>::operator =(other);


        return *this;
    }

    DeleterPtr& operator=(DeleterPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDeleter>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Deletes or frees the memory associated with `address` parameter.

     * @param[out] address The address of the external memory.
     */
    void deleteMemory(void* address) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->deleteMemory(address);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/deleter_ptr.custom.h>)
    #include <cqdaq/deleter_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
