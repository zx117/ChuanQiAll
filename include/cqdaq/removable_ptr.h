//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:20.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/removable.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class RemovablePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IRemovable>
{
    using SmartPtr = daq::RemovablePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_components
 * @addtogroup cqdaq_components_removable Removable
 * @{

 */


/*!
 * @brief Allows the component to be notified when it is removed.

 */

class RemovablePtr : public daq::ObjectPtr<IRemovable>
{
public:
    using daq::ObjectPtr<IRemovable>::ObjectPtr;
    //using daq::ObjectPtr<IRemovable>::operator=;



    RemovablePtr()
        : daq::ObjectPtr<IRemovable>()

    {
    }

    RemovablePtr(daq::ObjectPtr<IRemovable>&& ptr)
        : daq::ObjectPtr<IRemovable>(std::move(ptr))

    {
    }

    RemovablePtr(const daq::ObjectPtr<IRemovable>& ptr)
        : daq::ObjectPtr<IRemovable>(ptr)

    {
    }

    RemovablePtr(const RemovablePtr& other)
        : daq::ObjectPtr<IRemovable>(other)

    {
    }

    RemovablePtr(RemovablePtr&& other) noexcept
        : daq::ObjectPtr<IRemovable>(std::move(other))

    {
    }
    
    RemovablePtr& operator=(const RemovablePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IRemovable>::operator =(other);


        return *this;
    }

    RemovablePtr& operator=(RemovablePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IRemovable>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Notifies the component that it is being removed.

     * Call `remove` on the component to mark it as removed. It's up to the implementation
     * to define what is does on the act of removal. Basic implementation of `Component`
     * will switch it to inactive state and it cannot be activated again.
     */
    void remove() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->remove();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Returns True if component was removed.

     * @returns True if component was removed; otherwise False.
     */
    daq::Bool isRemoved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool removed;
        auto errCode = this->object->isRemoved(&removed);
        daq::checkErrorInfo(errCode);

        return removed;
    }

#if __has_include(<cqdaq/removable_ptr.custom.h>)
    #include <cqdaq/removable_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
