//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:06.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/awaitable.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class AwaitablePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IAwaitable>
{
    using SmartPtr = daq::AwaitablePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_scheduler_components
 * @addtogroup cqdaq_awaitable Awaitable
 * @{

 */

class AwaitablePtr : public daq::ObjectPtr<IAwaitable>
{
public:
    using daq::ObjectPtr<IAwaitable>::ObjectPtr;
    //using daq::ObjectPtr<IAwaitable>::operator=;



    AwaitablePtr()
        : daq::ObjectPtr<IAwaitable>()

    {
    }

    AwaitablePtr(daq::ObjectPtr<IAwaitable>&& ptr)
        : daq::ObjectPtr<IAwaitable>(std::move(ptr))

    {
    }

    AwaitablePtr(const daq::ObjectPtr<IAwaitable>& ptr)
        : daq::ObjectPtr<IAwaitable>(ptr)

    {
    }

    AwaitablePtr(const AwaitablePtr& other)
        : daq::ObjectPtr<IAwaitable>(other)

    {
    }

    AwaitablePtr(AwaitablePtr&& other) noexcept
        : daq::ObjectPtr<IAwaitable>(std::move(other))

    {
    }
    
    AwaitablePtr& operator=(const AwaitablePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IAwaitable>::operator =(other);


        return *this;
    }

    AwaitablePtr& operator=(AwaitablePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IAwaitable>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Cancels the outstanding work if it has not already started.

     * @returns Is @c true if the execution was canceled     * or @c false if the execution has already completed
     */
    daq::Bool cancel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool canceled;
        auto errCode = this->object->cancel(&canceled);
        daq::checkErrorInfo(errCode);

        return canceled;
    }


    
    void wait() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->wait();
        daq::checkErrorInfo(errCode);
    }

    /*!
     * @brief Waits until the awaitable has a valid result and retrieves it or
     * re-throws the exception that occurred during the execution.

     * @returns The execution result if any otherwise @c nullptr.
     * @throws CqdaqErrException when there is no work associated with the awaitable.
     */
    daq::BaseObjectPtr getResult() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr result;
        auto errCode = this->object->getResult(&result);
        daq::checkErrorInfo(errCode);

        return result;
    }


    /*!
     * @brief Checks if the execution has already finished.

     * @returns Is @c true if the execution has finished     * or @c false if the execution is in progress or there is no work associated
     */
    daq::Bool hasCompleted() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool completed;
        auto errCode = this->object->hasCompleted(&completed);
        daq::checkErrorInfo(errCode);

        return completed;
    }

#if __has_include(<cqdaq/awaitable_ptr.custom.h>)
    #include <cqdaq/awaitable_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
