//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 24.10.2024 06:56:51.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/worker.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class WorkerPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IWorker>
{
    using SmartPtr = daq::WorkerPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class WorkerPtr : public daq::ObjectPtr<IWorker>
{
public:
    using daq::ObjectPtr<IWorker>::ObjectPtr;
    //using daq::ObjectPtr<IWorker>::operator=;



    WorkerPtr()
        : daq::ObjectPtr<IWorker>()

    {
    }

    WorkerPtr(daq::ObjectPtr<IWorker>&& ptr)
        : daq::ObjectPtr<IWorker>(std::move(ptr))

    {
    }

    WorkerPtr(const daq::ObjectPtr<IWorker>& ptr)
        : daq::ObjectPtr<IWorker>(ptr)

    {
    }

    WorkerPtr(const WorkerPtr& other)
        : daq::ObjectPtr<IWorker>(other)

    {
    }

    WorkerPtr(WorkerPtr&& other) noexcept
        : daq::ObjectPtr<IWorker>(std::move(other))

    {
    }
    
    WorkerPtr& operator=(const WorkerPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IWorker>::operator =(other);


        return *this;
    }

    WorkerPtr& operator=(WorkerPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IWorker>::operator =(std::move(other));

        return *this;
    }


    
    void initialize() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->initialize();
        daq::checkErrorInfo(errCode);
    }

    
    void reset() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->reset();
        daq::checkErrorInfo(errCode);
    }

    
    void loadFinish() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->loadFinish();
        daq::checkErrorInfo(errCode);
    }

    
    void channelCreate() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->channelCreate();
        daq::checkErrorInfo(errCode);
    }

    
    void channelDelete() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->channelDelete();
        daq::checkErrorInfo(errCode);
    }

    
    void applyConfigChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->applyConfigChanged();
        daq::checkErrorInfo(errCode);
    }

    
    void channelIdChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->channelIdChanged();
        daq::checkErrorInfo(errCode);
    }

    
    void channelTopologyChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->channelTopologyChanged();
        daq::checkErrorInfo(errCode);
    }

    
    void onConfigChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->onConfigChanged();
        daq::checkErrorInfo(errCode);
    }

    
    void onDataformatChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->onDataformatChanged();
        daq::checkErrorInfo(errCode);
    }

    
    void initializeAcquisition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->initializeAcquisition();
        daq::checkErrorInfo(errCode);
    }

    
    void startAcquisition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->startAcquisition();
        daq::checkErrorInfo(errCode);
    }

    
    void onAcquisition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->onAcquisition();
        daq::checkErrorInfo(errCode);
    }

    
    void stopAcquisition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->stopAcquisition();
        daq::checkErrorInfo(errCode);
    }

    
    void finalizeAcquisition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->finalizeAcquisition();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/worker_ptr.custom.h>)
    #include <cqdaq/worker_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
