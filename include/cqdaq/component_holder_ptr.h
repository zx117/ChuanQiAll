//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:22.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/component_holder.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/component_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ComponentHolderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IComponentHolder>
{
    using SmartPtr = daq::ComponentHolderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class ComponentHolderPtr : public daq::ObjectPtr<IComponentHolder>
{
public:
    using daq::ObjectPtr<IComponentHolder>::ObjectPtr;
    //using daq::ObjectPtr<IComponentHolder>::operator=;



    ComponentHolderPtr()
        : daq::ObjectPtr<IComponentHolder>()

    {
    }

    ComponentHolderPtr(daq::ObjectPtr<IComponentHolder>&& ptr)
        : daq::ObjectPtr<IComponentHolder>(std::move(ptr))

    {
    }

    ComponentHolderPtr(const daq::ObjectPtr<IComponentHolder>& ptr)
        : daq::ObjectPtr<IComponentHolder>(ptr)

    {
    }

    ComponentHolderPtr(const ComponentHolderPtr& other)
        : daq::ObjectPtr<IComponentHolder>(other)

    {
    }

    ComponentHolderPtr(ComponentHolderPtr&& other) noexcept
        : daq::ObjectPtr<IComponentHolder>(std::move(other))

    {
    }
    
    ComponentHolderPtr& operator=(const ComponentHolderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IComponentHolder>::operator =(other);


        return *this;
    }

    ComponentHolderPtr& operator=(ComponentHolderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IComponentHolder>::operator =(std::move(other));

        return *this;
    }


    
    daq::StringPtr getLocalId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr localId;
        auto errCode = this->object->getLocalId(&localId);
        daq::checkErrorInfo(errCode);

        return localId;
    }

    
    daq::StringPtr getParentGlobalId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr parentId;
        auto errCode = this->object->getParentGlobalId(&parentId);
        daq::checkErrorInfo(errCode);

        return parentId;
    }

    
    daq::ComponentPtr getComponent() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ComponentPtr component;
        auto errCode = this->object->getComponent(&component);
        daq::checkErrorInfo(errCode);

        return component;
    }

#if __has_include(<cqdaq/component_holder_ptr.custom.h>)
    #include <cqdaq/component_holder_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
