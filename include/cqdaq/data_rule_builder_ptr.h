//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:25.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/data_rule_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/data_rule_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DataRuleBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDataRuleBuilder>
{
    using SmartPtr = daq::DataRuleBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_data_rule Data rule
 * @{

 */


/*!
 * @brief Configuration component of Data rule objects. Contains setter methods that allow for Data rule
 * parameter configuration, and a `build` method that builds the Data rule.

 */

class DataRuleBuilderPtr : public daq::ObjectPtr<IDataRuleBuilder>
{
public:
    using daq::ObjectPtr<IDataRuleBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IDataRuleBuilder>::operator=;



    DataRuleBuilderPtr()
        : daq::ObjectPtr<IDataRuleBuilder>()

    {
    }

    DataRuleBuilderPtr(daq::ObjectPtr<IDataRuleBuilder>&& ptr)
        : daq::ObjectPtr<IDataRuleBuilder>(std::move(ptr))

    {
    }

    DataRuleBuilderPtr(const daq::ObjectPtr<IDataRuleBuilder>& ptr)
        : daq::ObjectPtr<IDataRuleBuilder>(ptr)

    {
    }

    DataRuleBuilderPtr(const DataRuleBuilderPtr& other)
        : daq::ObjectPtr<IDataRuleBuilder>(other)

    {
    }

    DataRuleBuilderPtr(DataRuleBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IDataRuleBuilder>(std::move(other))

    {
    }
    
    DataRuleBuilderPtr& operator=(const DataRuleBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDataRuleBuilder>::operator =(other);


        return *this;
    }

    DataRuleBuilderPtr& operator=(DataRuleBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDataRuleBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Data rule object using the currently set values of the Builder.

     * @returns The built Data rule.
     */
    daq::DataRulePtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DataRulePtr dataRule;
        auto errCode = this->object->build(&dataRule);
        daq::checkErrorInfo(errCode);

        return dataRule;
    }


    /*!
     * @brief Sets the type of the data rule.

     * @param type The type of the data rule.
     */
    DataRuleBuilderPtr setType(daq::DataRuleType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the type of the data rule.

     * @returns The type of the data rule.
     */
    daq::DataRuleType getType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DataRuleType type;
        auto errCode = this->object->getType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets a dictionary of string-object key-value pairs representing the parameters used to evaluate the rule.

     * @param parameters The dictionary containing the rule parameter members.
     */
    DataRuleBuilderPtr setParameters(const daq::DictPtr<daq::IString, daq::IBaseObject>& parameters) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setParameters(parameters);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets a dictionary of string-object key-value pairs representing the parameters used to evaluate the rule.

     * @returns The dictionary containing the rule parameter members.
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getParameters() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> parameters;
        auto errCode = this->object->getParameters(&parameters);
        daq::checkErrorInfo(errCode);

        return parameters;
    }


    /*!
     * @brief Adds a string-object pair parameter to the Dictionary of Data rule parameters.

     * @param name The string-type name of the parameter.
     * @param parameter The object-type parameter.
     */
    DataRuleBuilderPtr addParameter(const daq::StringPtr& name, const daq::BaseObjectPtr& parameter) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addParameter(name, parameter);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Removes the parameter with the given name from the Dictionary of Data rule parameters.

     */
    DataRuleBuilderPtr removeParameter(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeParameter(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }

#if __has_include(<cqdaq/data_rule_builder_ptr.custom.h>)
    #include <cqdaq/data_rule_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_data_rule
 * @addtogroup cqdaq_data_rule_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
