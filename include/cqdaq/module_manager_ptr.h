//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:57.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/module_manager.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/module_ptr.h>
#include <cqdaq/context_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ModuleManagerPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IModuleManager>
{
    using SmartPtr = daq::ModuleManagerPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_modules
 * @addtogroup cqdaq_module_manager Module manager
 * @{

 */


/*!
 * @brief Loads all available modules in a implementation-defined manner.
 * User can also side-load custom modules via `addModule` call.

 */

class ModuleManagerPtr : public daq::ObjectPtr<IModuleManager>
{
public:
    using daq::ObjectPtr<IModuleManager>::ObjectPtr;
    //using daq::ObjectPtr<IModuleManager>::operator=;



    ModuleManagerPtr()
        : daq::ObjectPtr<IModuleManager>()

    {
    }

    ModuleManagerPtr(daq::ObjectPtr<IModuleManager>&& ptr)
        : daq::ObjectPtr<IModuleManager>(std::move(ptr))

    {
    }

    ModuleManagerPtr(const daq::ObjectPtr<IModuleManager>& ptr)
        : daq::ObjectPtr<IModuleManager>(ptr)

    {
    }

    ModuleManagerPtr(const ModuleManagerPtr& other)
        : daq::ObjectPtr<IModuleManager>(other)

    {
    }

    ModuleManagerPtr(ModuleManagerPtr&& other) noexcept
        : daq::ObjectPtr<IModuleManager>(std::move(other))

    {
    }
    
    ModuleManagerPtr& operator=(const ModuleManagerPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IModuleManager>::operator =(other);


        return *this;
    }

    ModuleManagerPtr& operator=(ModuleManagerPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IModuleManager>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Retrieves all modules known to the manager. Whether they were found or side-loaded.

     * @returns A list of known modules.
     */
    daq::ListPtr<daq::IModule> getModules() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IModule> modules;
        auto errCode = this->object->getModules(&modules);
        daq::checkErrorInfo(errCode);

        return modules;
    }


    /*!
     * @brief Side-load a custom module in run-time from memory that was not found by default.

     * @param module The module to add.
     * @throws DuplicateItemException When an identical @p module was already added.
     */
    void addModule(const daq::ModulePtr& module) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addModule(module);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Loads all modules from the directory path specified during manager construction. The
     * Context is passed to all loaded modules for internal use.

     * @param context The Context containing the Logger, Scheduler, Property Object Class Manager and Module Manager
     */
    void loadModules(const daq::ContextPtr& context) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->loadModules(context);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/module_manager_ptr.custom.h>)
    #include <cqdaq/module_manager_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
