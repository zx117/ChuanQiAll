//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:14.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/config_provider.h"
#include <coretypes/objectptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ConfigProviderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IConfigProvider>
{
    using SmartPtr = daq::ConfigProviderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_instance IConfigProvider
 * @{

 */


/*!
 * @brief Config provider is an interface that was made for populating an options dictionary of an instance builder from external sources
 * like a config file, environment variables, or command line arguments.
 * The process of population of the dictionary have to be alligned with rules:
 * - all keys are set in lowercase. Values are set without case changes.
 * - if a provider is trying to override an existing value, it has to have the same type. For example provider can not replace integer value with string or object with list
 * - if a provider is overriding a list, it replaces old list items with a new one. 

 */

class ConfigProviderPtr : public daq::ObjectPtr<IConfigProvider>
{
public:
    using daq::ObjectPtr<IConfigProvider>::ObjectPtr;
    //using daq::ObjectPtr<IConfigProvider>::operator=;



    ConfigProviderPtr()
        : daq::ObjectPtr<IConfigProvider>()

    {
    }

    ConfigProviderPtr(daq::ObjectPtr<IConfigProvider>&& ptr)
        : daq::ObjectPtr<IConfigProvider>(std::move(ptr))

    {
    }

    ConfigProviderPtr(const daq::ObjectPtr<IConfigProvider>& ptr)
        : daq::ObjectPtr<IConfigProvider>(ptr)

    {
    }

    ConfigProviderPtr(const ConfigProviderPtr& other)
        : daq::ObjectPtr<IConfigProvider>(other)

    {
    }

    ConfigProviderPtr(ConfigProviderPtr&& other) noexcept
        : daq::ObjectPtr<IConfigProvider>(std::move(other))

    {
    }
    
    ConfigProviderPtr& operator=(const ConfigProviderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IConfigProvider>::operator =(other);


        return *this;
    }

    ConfigProviderPtr& operator=(ConfigProviderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IConfigProvider>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Populate the existing options dictionary with variables from config provider

     * @param options The options dictionary
     */
    ConfigProviderPtr populateOptions(const daq::DictPtr<daq::IString, daq::IBaseObject>& options) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->populateOptions(options);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }

#if __has_include(<cqdaq/config_provider_ptr.custom.h>)
    #include <cqdaq/config_provider_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
