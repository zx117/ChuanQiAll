//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:26.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/scaling_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/scaling_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ScalingBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IScalingBuilder>
{
    using SmartPtr = daq::ScalingBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_scaling Scaling
 * @{

 */


/*!
 * @brief Configuration component of Scaling objects. Contains setter methods that allow for Scaling
 * parameter configuration, and a `build` method that builds the Scaling object.

 */

class ScalingBuilderPtr : public daq::ObjectPtr<IScalingBuilder>
{
public:
    using daq::ObjectPtr<IScalingBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IScalingBuilder>::operator=;



    ScalingBuilderPtr()
        : daq::ObjectPtr<IScalingBuilder>()

    {
    }

    ScalingBuilderPtr(daq::ObjectPtr<IScalingBuilder>&& ptr)
        : daq::ObjectPtr<IScalingBuilder>(std::move(ptr))

    {
    }

    ScalingBuilderPtr(const daq::ObjectPtr<IScalingBuilder>& ptr)
        : daq::ObjectPtr<IScalingBuilder>(ptr)

    {
    }

    ScalingBuilderPtr(const ScalingBuilderPtr& other)
        : daq::ObjectPtr<IScalingBuilder>(other)

    {
    }

    ScalingBuilderPtr(ScalingBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IScalingBuilder>(std::move(other))

    {
    }
    
    ScalingBuilderPtr& operator=(const ScalingBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IScalingBuilder>::operator =(other);


        return *this;
    }

    ScalingBuilderPtr& operator=(ScalingBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IScalingBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Scaling object using the currently set values of the Builder.

     * @returns The built Scaling object.
     */
    daq::ScalingPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScalingPtr scaling;
        auto errCode = this->object->build(&scaling);
        daq::checkErrorInfo(errCode);

        return scaling;
    }


    /*!
     * @brief Sets the scaling's input data type.

     * @param type The input data type.
     * The input data type corresponds to the raw data passed through the signal path in
     * data packets.
     */
    ScalingBuilderPtr setInputDataType(daq::SampleType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setInputDataType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the scaling's input data type.

     * @returns The input data type.
     */
    daq::SampleType getInputDataType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType type;
        auto errCode = this->object->getInputDataType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the scaling's output data type.

     * @param type The output data type
     * The output data type corresponds to the type specified in the value descriptor of
     * a signal, and is the type in which said signal's data should be read in after having
     * the scaling applied to it.
     */
    ScalingBuilderPtr setOutputDataType(daq::ScaledSampleType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOutputDataType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the scaling's output data type.

     * @returns The output data type
     */
    daq::ScaledSampleType getOutputDataType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScaledSampleType type;
        auto errCode = this->object->getOutputDataType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the type of the scaling that determines how the scaling parameters should be interpreted
     * and how the scaling should be calculated.

     * @param type The type of the scaling.
     */
    ScalingBuilderPtr setScalingType(daq::ScalingType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setScalingType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the type of the scaling that determines how the scaling parameters should be interpreted
     * and how the scaling should be calculated.

     * @returns The type of the scaling.
     */
    daq::ScalingType getScalingType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScalingType type;
        auto errCode = this->object->getScalingType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the list of parameters that are used to calculate the scaling in conjunction with the
     * input data.

     * @param parameters The list of parameters. All elements are Number types.
     * @throws FrozenException if the object is frozen.
     */
    ScalingBuilderPtr setParameters(const daq::DictPtr<daq::IString, daq::IBaseObject>& parameters) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setParameters(parameters);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list of parameters that are used to calculate the scaling in conjunction with the
     * input data.

     * @returns The list of parameters. All elements are Number types.
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getParameters() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> parameters;
        auto errCode = this->object->getParameters(&parameters);
        daq::checkErrorInfo(errCode);

        return parameters;
    }


    /*!
     * @brief Adds a string-object pair parameter to the Dictionary of Scaling parameters.

     * @param name The string-type name of the parameter.
     * @param parameter The object-type parameter.
     */
    ScalingBuilderPtr addParameter(const daq::StringPtr& name, const daq::BaseObjectPtr& parameter) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addParameter(name, parameter);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Removes the parameter with the given name from the Dictionary of Scaling parameters.

     */
    ScalingBuilderPtr removeParameter(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeParameter(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }

#if __has_include(<cqdaq/scaling_builder_ptr.custom.h>)
    #include <cqdaq/scaling_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_scaling
 * @addtogroup cqdaq_scaling_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
