//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:05.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/reader.h"
#include <coretypes/objectptr.h>
#include <coretypes/procedure_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IReader>
class GenericReaderPtr;

using ReaderPtr = daq::GenericReaderPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IReader>
{
    using SmartPtr = daq::GenericReaderPtr<daq::IReader>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_reader Reader
 * @{

 */


/*!
 * @brief Controls how Reader read call time-outs are handled.

 */


/*!
 * < When some segments are available return them immediately.
 * When no segments are available return immediately when any arrive or time-out is exceeded.
 */


/*!
 * < Wait for the requested amount or until time-out is exceeded.
 */


/*!
 * @brief A basic signal reader that simplifies accessing the signals's data stream.

 */
template <typename InterfaceType>
class GenericReaderPtr : public daq::ObjectPtr<InterfaceType>
{
public:
    using daq::ObjectPtr<InterfaceType>::ObjectPtr;
    //using daq::ObjectPtr<InterfaceType>::operator=;



    GenericReaderPtr()
        : daq::ObjectPtr<InterfaceType>()

    {
    }

    GenericReaderPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : daq::ObjectPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericReaderPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : daq::ObjectPtr<InterfaceType>(ptr)

    {
    }

    GenericReaderPtr(const ReaderPtr& other)
        : daq::ObjectPtr<InterfaceType>(other)

    {
    }

    GenericReaderPtr(ReaderPtr&& other) noexcept
        : daq::ObjectPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericReaderPtr& operator=(const ReaderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericReaderPtr& operator=(ReaderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the number of segments available to read

     * @returns The number of available segments
     */
    daq::SizeT getAvailableCount() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT count;
        auto errCode = this->object->getAvailableCount(&count);
        daq::checkErrorInfo(errCode);

        return count;
    }


    /*!
     * @brief Sets the specified callback function to be called when there is available data in the reader.
     * Pass @c nullptr to unset the callback. The callback should take no arguments.

     * @param callback The callback function to be set or @c nullptr to unset it.
     */
    void setOnDataAvailable(const daq::ProcedurePtr& callback) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOnDataAvailable(callback);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/reader_ptr.custom.h>)
    #include <cqdaq/reader_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
