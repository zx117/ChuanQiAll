//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:55.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger_sink_base_private.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class LoggerSinkBasePrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILoggerSinkBasePrivate>
{
    using SmartPtr = daq::LoggerSinkBasePrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class LoggerSinkBasePrivatePtr : public daq::ObjectPtr<ILoggerSinkBasePrivate>
{
public:
    using daq::ObjectPtr<ILoggerSinkBasePrivate>::ObjectPtr;
    //using daq::ObjectPtr<ILoggerSinkBasePrivate>::operator=;



    LoggerSinkBasePrivatePtr()
        : daq::ObjectPtr<ILoggerSinkBasePrivate>()

    {
    }

    LoggerSinkBasePrivatePtr(daq::ObjectPtr<ILoggerSinkBasePrivate>&& ptr)
        : daq::ObjectPtr<ILoggerSinkBasePrivate>(std::move(ptr))

    {
    }

    LoggerSinkBasePrivatePtr(const daq::ObjectPtr<ILoggerSinkBasePrivate>& ptr)
        : daq::ObjectPtr<ILoggerSinkBasePrivate>(ptr)

    {
    }

    LoggerSinkBasePrivatePtr(const LoggerSinkBasePrivatePtr& other)
        : daq::ObjectPtr<ILoggerSinkBasePrivate>(other)

    {
    }

    LoggerSinkBasePrivatePtr(LoggerSinkBasePrivatePtr&& other) noexcept
        : daq::ObjectPtr<ILoggerSinkBasePrivate>(std::move(other))

    {
    }
    
    LoggerSinkBasePrivatePtr& operator=(const LoggerSinkBasePrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILoggerSinkBasePrivate>::operator =(other);


        return *this;
    }

    LoggerSinkBasePrivatePtr& operator=(LoggerSinkBasePrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILoggerSinkBasePrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Get the sink implementation

     * @returns The sink implementation
     */
    std::shared_ptr<spdlog::sinks::sink> getSinkImpl() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        std::shared_ptr<spdlog::sinks::sink> sinkImp;
        auto errCode = this->object->getSinkImpl(&sinkImp);
        daq::checkErrorInfo(errCode);

        return sinkImp;
    }

#if __has_include(<cqdaq/logger_sink_base_private_ptr.custom.h>)
    #include <cqdaq/logger_sink_base_private_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
