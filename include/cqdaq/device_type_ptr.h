//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:45.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/device_type.h"
#include <coreobjects/component_type_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IDeviceType>
class GenericDeviceTypePtr;

using DeviceTypePtr = daq::GenericDeviceTypePtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDeviceType>
{
    using SmartPtr = daq::GenericDeviceTypePtr<daq::IDeviceType>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_device_type Device type
 * @{

 */


/*!
 * @brief Provides information about the device type.

 */
template <typename InterfaceType>
class GenericDeviceTypePtr : public GenericComponentTypePtr<InterfaceType>
{
public:
    using GenericComponentTypePtr<InterfaceType>::GenericComponentTypePtr;
    //using GenericComponentTypePtr<InterfaceType>::operator=;



    GenericDeviceTypePtr()
        : GenericComponentTypePtr<InterfaceType>()

    {
    }

    GenericDeviceTypePtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericComponentTypePtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericDeviceTypePtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericComponentTypePtr<InterfaceType>(ptr)

    {
    }

    GenericDeviceTypePtr(const DeviceTypePtr& other)
        : GenericComponentTypePtr<InterfaceType>(other)

    {
    }

    GenericDeviceTypePtr(DeviceTypePtr&& other) noexcept
        : GenericComponentTypePtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericDeviceTypePtr& operator=(const DeviceTypePtr& other)
    {
        if (this == &other)
            return *this;

        GenericComponentTypePtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericDeviceTypePtr& operator=(DeviceTypePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericComponentTypePtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }




#if __has_include(<cqdaq/device_type_ptr.custom.h>)
    #include <cqdaq/device_type_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_device_type
 * @addtogroup cqdaq_device_type_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
