//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:26.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/input_port_notifications.h"
#include <coretypes/objectptr.h>
#include <cqdaq/input_port_ptr.h>
#include <cqdaq/signal_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class InputPortNotificationsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IInputPortNotifications>
{
    using SmartPtr = daq::InputPortNotificationsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signal_path
 * @addtogroup cqdaq_input_port Input port notifications
 * @{

 */


/*!
 * @brief Notifications object passed to the input port on construction by its owner (listener).

 * Input ports invoke the notification functions within the Input port notifications object when corresponding
 * events occur. The listener can then react on those events.
 */

class InputPortNotificationsPtr : public daq::ObjectPtr<IInputPortNotifications>
{
public:
    using daq::ObjectPtr<IInputPortNotifications>::ObjectPtr;
    //using daq::ObjectPtr<IInputPortNotifications>::operator=;



    InputPortNotificationsPtr()
        : daq::ObjectPtr<IInputPortNotifications>()

    {
    }

    InputPortNotificationsPtr(daq::ObjectPtr<IInputPortNotifications>&& ptr)
        : daq::ObjectPtr<IInputPortNotifications>(std::move(ptr))

    {
    }

    InputPortNotificationsPtr(const daq::ObjectPtr<IInputPortNotifications>& ptr)
        : daq::ObjectPtr<IInputPortNotifications>(ptr)

    {
    }

    InputPortNotificationsPtr(const InputPortNotificationsPtr& other)
        : daq::ObjectPtr<IInputPortNotifications>(other)

    {
    }

    InputPortNotificationsPtr(InputPortNotificationsPtr&& other) noexcept
        : daq::ObjectPtr<IInputPortNotifications>(std::move(other))

    {
    }
    
    InputPortNotificationsPtr& operator=(const InputPortNotificationsPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IInputPortNotifications>::operator =(other);


        return *this;
    }

    InputPortNotificationsPtr& operator=(InputPortNotificationsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IInputPortNotifications>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Called when the Input port method `acceptsSignal` is called. Should return true if the signal is
     * accepted; false otherwise.

     * @param port The input port on which the method was called.
     * @param signal The signal which is being checked for acceptance.
     * @returns True if the signal is accepted; false otherwise.
     */
    daq::Bool acceptsSignal(const daq::InputPortPtr& port, const daq::SignalPtr& signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool accept;
        auto errCode = this->object->acceptsSignal(port, signal, &accept);
        daq::checkErrorInfo(errCode);

        return accept;
    }


    /*!
     * @brief Called when a signal is connected to the input port.

     * @param port The port to which the signal was connected.
     */
    void connected(const daq::InputPortPtr& port) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->connected(port);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Called when a signal is disconnected from the input port.

     * @param port The port from which a signal was disconnected.
     */
    void disconnected(const daq::InputPortPtr& port) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->disconnected(port);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Notifies the listener of the newly received packet on the specified input-port.

     * @param port The port on which the new packet was received.
     */
    void packetReceived(const daq::InputPortPtr& port) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->packetReceived(port);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/input_port_notifications_ptr.custom.h>)
    #include <cqdaq/input_port_notifications_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
