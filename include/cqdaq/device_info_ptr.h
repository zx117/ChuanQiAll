//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:44.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/device_info.h"
#include <coreobjects/property_object_ptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/device_type_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/server_capability_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IDeviceInfo>
class GenericDeviceInfoPtr;

using DeviceInfoPtr = daq::GenericDeviceInfoPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDeviceInfo>
{
    using SmartPtr = daq::GenericDeviceInfoPtr<daq::IDeviceInfo>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_device_info Device info
 * @{

 */


/*!
 * @brief Contains standard information about an cqDAQ device and device type. The Device Info object is a
 * Property Object, allowing for custom String, Int, Bool, or Float-type properties to be added.

 * The getter methods represent a standardized set of Device properties according to the
 * OPC UA: Devices standard. Any additional String, Int, Bool, or Float-type properties can added, using the
 * appropriate Property Object "add property" method. Any other types of properties are invalid.
 * Although Integer-type properties are valid additions, Selection properties cannot be added to
 * Device Info.
 * As the Device Info object adheres to the OPC UA: Devices standard, it behaves differently than
 * standard Property Objects. No metadata except the Value Type and Default Value are published
 * via OPC UA, and this only said Property metadata is visible to any clients.
 * All fields - default (eg. platform, manufacturer...) and custom are represented as either:
 * - String-type properties
 * - Integer-type properties
 * - Bool-type properties
 * - Float type properties
 * As such, listing all properties via Property Object methods, will return both the
 * names of the default and custom properties. All default properties are initialized to an empty
 * string with the exception of revisionCounter and Position that are integer properties and are
 * thus initialized to '0'. The names of the properties are written in camelCase - for
 * example "systemUuid", "parentMacAddress", "manufacturerUri".
 * If the DeviceInfo object is obtained from a device, or when listing available devices, the
 * object is frozen (immutable). As such, Property Object setter methods cannot be used
 * and will fail when called.
 */
template <typename InterfaceType>
class GenericDeviceInfoPtr : public GenericPropertyObjectPtr<InterfaceType>
{
public:
    using GenericPropertyObjectPtr<InterfaceType>::GenericPropertyObjectPtr;
    //using GenericPropertyObjectPtr<InterfaceType>::operator=;



    GenericDeviceInfoPtr()
        : GenericPropertyObjectPtr<InterfaceType>()

    {
    }

    GenericDeviceInfoPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericPropertyObjectPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericDeviceInfoPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericPropertyObjectPtr<InterfaceType>(ptr)

    {
    }

    GenericDeviceInfoPtr(const DeviceInfoPtr& other)
        : GenericPropertyObjectPtr<InterfaceType>(other)

    {
    }

    GenericDeviceInfoPtr(DeviceInfoPtr&& other) noexcept
        : GenericPropertyObjectPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericDeviceInfoPtr& operator=(const DeviceInfoPtr& other)
    {
        if (this == &other)
            return *this;

        GenericPropertyObjectPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericDeviceInfoPtr& operator=(DeviceInfoPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericPropertyObjectPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the name of the device

     * @returns The name of the device.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Gets the string representation of a connection address used to connect to the device.

     * @returns The string used to connect to the device.
     */
    daq::StringPtr getConnectionString() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr connectionString;
        auto errCode = this->object->getConnectionString(&connectionString);
        daq::checkErrorInfo(errCode);

        return connectionString;
    }


    /*!
     * @brief Gets a device type as an object providing type id, name, short description and
     * default device configuration.
     * By using default config object as a starting point, users can easily modify the preset
     * properties to tailor the configuration of the client device accordingly.

     * @returns The device type object
     */
    daq::GenericDeviceTypePtr<daq::IDeviceType> getDeviceType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::GenericDeviceTypePtr<daq::IDeviceType> deviceType;
        auto errCode = this->object->getDeviceType(&deviceType);
        daq::checkErrorInfo(errCode);

        return deviceType;
    }


    /*!
     * @brief Gets the company that manufactured the device

     * @returns The manufacturer of the device.
     */
    daq::StringPtr getManufacturer() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr manufacturer;
        auto errCode = this->object->getManufacturer(&manufacturer);
        daq::checkErrorInfo(errCode);

        return manufacturer;
    }


    /*!
     * @brief Gets the unique identifier of the company that manufactured the device
     * This identifier should be a fully qualified domain name;
     * however, it may be a GUID or similar construct that ensures global uniqueness.

     * @returns The manufacturer uri of the device.
     */
    daq::StringPtr getManufacturerUri() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr manufacturerUri;
        auto errCode = this->object->getManufacturerUri(&manufacturerUri);
        daq::checkErrorInfo(errCode);

        return manufacturerUri;
    }


    /*!
     * @brief Gets the model of the device

     * @returns The model of the device.
     */
    daq::StringPtr getModel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr model;
        auto errCode = this->object->getModel(&model);
        daq::checkErrorInfo(errCode);

        return model;
    }


    /*!
     * @brief Gets the unique combination of numbers and letters used to identify the device.

     * @returns The product code of the device.
     */
    daq::StringPtr getProductCode() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr productCode;
        auto errCode = this->object->getProductCode(&productCode);
        daq::checkErrorInfo(errCode);

        return productCode;
    }


    /*!
     * @brief Gets the revision level of the device.

     * @returns The device revision level.
     */
    daq::StringPtr getDeviceRevision() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr deviceRevision;
        auto errCode = this->object->getDeviceRevision(&deviceRevision);
        daq::checkErrorInfo(errCode);

        return deviceRevision;
    }


    /*!
     * @brief Gets the revision level of the hardware.

     * @returns The hardware revision of the device.
     */
    daq::StringPtr getHardwareRevision() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr hardwareRevision;
        auto errCode = this->object->getHardwareRevision(&hardwareRevision);
        daq::checkErrorInfo(errCode);

        return hardwareRevision;
    }


    /*!
     * @brief Gets the revision level of the software component.

     * @returns The software revision of the device.
     */
    daq::StringPtr getSoftwareRevision() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr softwareRevision;
        auto errCode = this->object->getSoftwareRevision(&softwareRevision);
        daq::checkErrorInfo(errCode);

        return softwareRevision;
    }


    /*!
     * @brief Gets the address of the user manual.
     * It may be a pathname in the file system or a URL (Web address)

     * @returns The manual of the device.
     */
    daq::StringPtr getDeviceManual() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr deviceManual;
        auto errCode = this->object->getDeviceManual(&deviceManual);
        daq::checkErrorInfo(errCode);

        return deviceManual;
    }


    /*!
     * @brief Gets the purpose of the device. For example "TestMeasurementDevice".

     * @returns The class of the device.
     */
    daq::StringPtr getDeviceClass() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr deviceClass;
        auto errCode = this->object->getDeviceClass(&deviceClass);
        daq::checkErrorInfo(errCode);

        return deviceClass;
    }


    /*!
     * @brief Gets the unique production number provided by the manufacturer

     * @returns The serial number of the device.
     */
    daq::StringPtr getSerialNumber() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr serialNumber;
        auto errCode = this->object->getSerialNumber(&serialNumber);
        daq::checkErrorInfo(errCode);

        return serialNumber;
    }


    /*!
     * @brief Gets the globally unique resource identifier provided by the manufacturer.
     * The recommended syntax of the ProductInstanceUri is: <ManufacturerUri>/<any string>
     * where <any string> is unique among all instances using the same ManufacturerUri.

     * @returns The product instance uri of the device.
     */
    daq::StringPtr getProductInstanceUri() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr productInstanceUri;
        auto errCode = this->object->getProductInstanceUri(&productInstanceUri);
        daq::checkErrorInfo(errCode);

        return productInstanceUri;
    }


    /*!
     * @brief Gets the incremental counter indicating the number of times the configuration
     * data has been modified.

     * @returns The revision counter of the device.
     */
    daq::Int getRevisionCounter() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int revisionCounter;
        auto errCode = this->object->getRevisionCounter(&revisionCounter);
        daq::checkErrorInfo(errCode);

        return revisionCounter;
    }


    /*!
     * @brief Gets the asset ID of the device. Represents a user writable alphanumeric character
     * sequence uniquely identifying a component.

     * @returns The asset ID of the device.
     * The ID is provided by the integrator or user of the device. It contains typically an identifier
     * in a branch, use case or user specific naming scheme. This could be for example a reference to
     * an electric scheme. The ID must be a string representation of an Int32 number.
     */
    daq::StringPtr getAssetId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr id;
        auto errCode = this->object->getAssetId(&id);
        daq::checkErrorInfo(errCode);

        return id;
    }


    /*!
     * @brief Gets the Mac address of the device.

     * @returns The Mac address.
     */
    daq::StringPtr getMacAddress() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr macAddress;
        auto errCode = this->object->getMacAddress(&macAddress);
        daq::checkErrorInfo(errCode);

        return macAddress;
    }


    /*!
     * @brief Gets the Mac address of the device's parent.

     * @returns The parent's Mac address.
     */
    daq::StringPtr getParentMacAddress() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr macAddress;
        auto errCode = this->object->getParentMacAddress(&macAddress);
        daq::checkErrorInfo(errCode);

        return macAddress;
    }


    /*!
     * @brief Gets the platform of the device. The platform specifies whether real hardware
     * is used or if the device is simulated.

     * @returns The platform of the device.
     */
    daq::StringPtr getPlatform() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr platform;
        auto errCode = this->object->getPlatform(&platform);
        daq::checkErrorInfo(errCode);

        return platform;
    }


    /*!
     * @brief Gets the position of the device. The position specifies the position within a
     * given system. For example in which slot or slice the device is in.

     * @returns The position of the device.
     * The Position should be a positive integer in the range supported by the UInt16 data type.
     */
    daq::Int getPosition() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int position;
        auto errCode = this->object->getPosition(&position);
        daq::checkErrorInfo(errCode);

        return position;
    }


    /*!
     * @brief Gets the system type. The system type can, for example, be LayeredSystem,
     * StandaloneSystem, or RackSystem.

     * @returns The system type of the device.
     */
    daq::StringPtr getSystemType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr type;
        auto errCode = this->object->getSystemType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the system UUID that represents a unique ID of a system. All devices in a system
     * share this UUID.

     * @returns The unique ID of a system.
     */
    daq::StringPtr getSystemUuid() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr uuid;
        auto errCode = this->object->getSystemUuid(&uuid);
        daq::checkErrorInfo(errCode);

        return uuid;
    }


    /*!
     * @brief Gets the list of property names that are not in the default set of Device info properties.
     * Default properties are all info properties that have a corresponding getter method.

     * @returns The list of names of custom properties.
     */
    daq::ListPtr<daq::IString> getCustomInfoPropertyNames() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IString> customInfoNames;
        auto errCode = this->object->getCustomInfoPropertyNames(&customInfoNames);
        daq::checkErrorInfo(errCode);

        return customInfoNames;
    }


    /*!
     * @brief Gets the version of the SDK used to build said device. Can be empty if the device does not use
     * the SDK as its firmware/is implemented at a protocol-level.

     * @returns The SDK version.
     */
    daq::StringPtr getSdkVersion() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr version;
        auto errCode = this->object->getSdkVersion(&version);
        daq::checkErrorInfo(errCode);

        return version;
    }


    /*!
     * @brief Gets the list of server capabilities stored in device info.

     * @returns The list of device supported protocols     * (List containing IServerCapability objects, representing the supported protocols along with their properties).
     */
    daq::ListPtr<daq::IServerCapability> getServerCapabilities() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IServerCapability> serverCapabilities;
        auto errCode = this->object->getServerCapabilities(&serverCapabilities);
        daq::checkErrorInfo(errCode);

        return serverCapabilities;
    }

#if __has_include(<cqdaq/device_info_ptr.custom.h>)
    #include <cqdaq/device_info_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
