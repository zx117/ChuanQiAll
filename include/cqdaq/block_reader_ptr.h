//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:06.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/block_reader.h"
#include <coretypes/span.h>
#include "sample_reader_ptr.h"
#include <cqdaq/sample_reader_ptr.h>
#include <cqdaq/reader_status_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class BlockReaderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IBlockReader>
{
    using SmartPtr = daq::BlockReaderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_block_reader Block reader
 * @{

 */


/*!
 * @brief A signal data reader that abstracts away reading of signal packets by keeping an
 * internal read-position and automatically advances it on subsequent reads. The difference to
 * a StreamReader is that instead of reading on per sample basis it always returns only a full block of samples.
 * This means that even if more samples are available they will not be read until there is enough of them to fill
 * at least one block.

 * @remark Currently only supports single-dimensional scalar sample-types and RangeInt64
 */

class BlockReaderPtr : public GenericSampleReaderPtr<IBlockReader>
{
public:
    using GenericSampleReaderPtr<IBlockReader>::GenericSampleReaderPtr;
    //using GenericSampleReaderPtr<IBlockReader>::operator=;



    BlockReaderPtr()
        : GenericSampleReaderPtr<IBlockReader>()

    {
    }

    BlockReaderPtr(daq::ObjectPtr<IBlockReader>&& ptr)
        : GenericSampleReaderPtr<IBlockReader>(std::move(ptr))

    {
    }

    BlockReaderPtr(const daq::ObjectPtr<IBlockReader>& ptr)
        : GenericSampleReaderPtr<IBlockReader>(ptr)

    {
    }

    BlockReaderPtr(const BlockReaderPtr& other)
        : GenericSampleReaderPtr<IBlockReader>(other)

    {
    }

    BlockReaderPtr(BlockReaderPtr&& other) noexcept
        : GenericSampleReaderPtr<IBlockReader>(std::move(other))

    {
    }
    
    BlockReaderPtr& operator=(const BlockReaderPtr& other)
    {
        if (this == &other)
            return *this;

        GenericSampleReaderPtr<IBlockReader>::operator =(other);


        return *this;
    }

    BlockReaderPtr& operator=(BlockReaderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericSampleReaderPtr<IBlockReader>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Copies at maximum the next `count` blocks of unread samples to the values buffer.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] blocks The buffer that the samples will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` * `blockSize` amount of samples.
     * @param[in,out] count The maximum amount of blocks to be read. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * blocks are returned. The rest of the buffer is not modified or cleared.
     * @param timeoutMs The maximum amount of time in milliseconds to wait for the requested amount of blocks before returning.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::isEventEncountered returns true.
     * - If the reading process is successful, ReaderStatus::isOk returns true, indicating that IReaderStatus::getValid is true and IReaderStatus::isEventEncountered is false.
     */
    daq::ReaderStatusPtr read(void* blocks, daq::SizeT* count, daq::SizeT timeoutMs = 0) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->read(blocks, count, timeoutMs, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief Copies at maximum the next `count` blocks of unread samples and clock-stamps to the `dataBlocks` and `domainBlocks` buffers.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] dataBlocks The buffer that the samples will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` * `blockSize` amount of samples.
     * @param[in] domainBlocks The buffer that the domain values will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` * `blockSize` amount of clock-stamps.
     * @param[in,out] count The maximum amount of blocks to be read. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * blocks are returned. The rest of the buffer is not modified or cleared.
     * @param timeoutMs The maximum amount of time in milliseconds to wait for the requested amount of blocks before returning.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::isEventEncountered returns true.
     * - If the reading process is successful, ReaderStatus::isOk returns true, indicating that IReaderStatus::getValid is true and IReaderStatus::isEventEncountered is false.
     */
    daq::ReaderStatusPtr readWithDomain(void* dataBlocks, void* domainBlocks, daq::SizeT* count, daq::SizeT timeoutMs = 0) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->readWithDomain(dataBlocks, domainBlocks, count, timeoutMs, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief The amount of samples the reader considers as one block.

     * @returns The number of samples in a block.
     */
    daq::SizeT getBlockSize() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT size;
        auto errCode = this->object->getBlockSize(&size);
        daq::checkErrorInfo(errCode);

        return size;
    }

#if __has_include(<cqdaq/block_reader_ptr.custom.h>)
    #include <cqdaq/block_reader_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
