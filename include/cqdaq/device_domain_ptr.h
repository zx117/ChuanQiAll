//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:44.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/device_domain.h"
#include <coretypes/objectptr.h>
#include <coretypes/ratio_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/unit_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DeviceDomainPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDeviceDomain>
{
    using SmartPtr = daq::DeviceDomainPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_device_domain Device domain
 * @{

 */


/*!
 * @brief Contains information about the domain of the device.

 * The device domain contains a general view into the device's domain data. While devices most often operate
 * in the time domain, this interface allows for description of any other domain commonly used in signal processing.
 * For example, common domains include the angle domain, frequency domain, the spatial domain, and the wavelet domain.
 * The device domain allows for users to query a device for its current domain value via `getTicksSinceOrigin`
 * and convert that into its domain unit by multiplying the tick count with the resolution. To get the absolute
 * domain value, we can then also add the value to the Origin, which is most often provided
 * as a time epoch in the ISO 8601 format.
 * Note that all devices might note provide a device domain implementation. Such devices cannot be directly queried
 * for their domain data. In such a case, the domain data can be obtained through the device's output signals.
 */

class DeviceDomainPtr : public daq::ObjectPtr<IDeviceDomain>
{
public:
    using daq::ObjectPtr<IDeviceDomain>::ObjectPtr;
    //using daq::ObjectPtr<IDeviceDomain>::operator=;



    DeviceDomainPtr()
        : daq::ObjectPtr<IDeviceDomain>()

    {
    }

    DeviceDomainPtr(daq::ObjectPtr<IDeviceDomain>&& ptr)
        : daq::ObjectPtr<IDeviceDomain>(std::move(ptr))

    {
    }

    DeviceDomainPtr(const daq::ObjectPtr<IDeviceDomain>& ptr)
        : daq::ObjectPtr<IDeviceDomain>(ptr)

    {
    }

    DeviceDomainPtr(const DeviceDomainPtr& other)
        : daq::ObjectPtr<IDeviceDomain>(other)

    {
    }

    DeviceDomainPtr(DeviceDomainPtr&& other) noexcept
        : daq::ObjectPtr<IDeviceDomain>(std::move(other))

    {
    }
    
    DeviceDomainPtr& operator=(const DeviceDomainPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDeviceDomain>::operator =(other);


        return *this;
    }

    DeviceDomainPtr& operator=(DeviceDomainPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDeviceDomain>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets domain (usually time) between two consecutive ticks. Resolution is provided in a domain unit.

     * @returns The device's resolution.
     */
    daq::RatioPtr getTickResolution() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::RatioPtr tickResolution;
        auto errCode = this->object->getTickResolution(&tickResolution);
        daq::checkErrorInfo(errCode);

        return tickResolution;
    }


    /*!
     * @brief Gets the device's absolute origin. Most often this is a time epoch in the ISO 8601 format.

     * @returns The origin.
     */
    daq::StringPtr getOrigin() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr origin;
        auto errCode = this->object->getOrigin(&origin);
        daq::checkErrorInfo(errCode);

        return origin;
    }


    /*!
     * @brief Gets the domain unit (eg. seconds, hours, degrees...)

     * @returns The domain unit.
     */
    daq::UnitPtr getUnit() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->getUnit(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }

#if __has_include(<cqdaq/device_domain_ptr.custom.h>)
    #include <cqdaq/device_domain_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
