//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 24.10.2024 06:57:02.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/data_center.h"
#include <coretypes/objectptr.h>
#include <cqdaq/folder_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/channel_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DataCenterPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDataCenter>
{
    using SmartPtr = daq::DataCenterPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class DataCenterPtr : public daq::ObjectPtr<IDataCenter>
{
public:
    using daq::ObjectPtr<IDataCenter>::ObjectPtr;
    //using daq::ObjectPtr<IDataCenter>::operator=;



    DataCenterPtr()
        : daq::ObjectPtr<IDataCenter>()

    {
    }

    DataCenterPtr(daq::ObjectPtr<IDataCenter>&& ptr)
        : daq::ObjectPtr<IDataCenter>(std::move(ptr))

    {
    }

    DataCenterPtr(const daq::ObjectPtr<IDataCenter>& ptr)
        : daq::ObjectPtr<IDataCenter>(ptr)

    {
    }

    DataCenterPtr(const DataCenterPtr& other)
        : daq::ObjectPtr<IDataCenter>(other)

    {
    }

    DataCenterPtr(DataCenterPtr&& other) noexcept
        : daq::ObjectPtr<IDataCenter>(std::move(other))

    {
    }
    
    DataCenterPtr& operator=(const DataCenterPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDataCenter>::operator =(other);


        return *this;
    }

    DataCenterPtr& operator=(DataCenterPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDataCenter>::operator =(std::move(other));

        return *this;
    }


    
    daq::FolderPtr getChannelTopology() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::FolderPtr ioFolder;
        auto errCode = this->object->getChannelTopology(&ioFolder);
        daq::checkErrorInfo(errCode);

        return ioFolder;
    }

    
    daq::Int getStartAbsTime() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int value;
        auto errCode = this->object->getStartAbsTime(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }

    /*!
     * @brief Gets a flat list of all actived channels.
     * @returns The flat list of channels.
     */
    daq::ListPtr<daq::IChannel> getActiveChannels() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IChannel> channels;
        auto errCode = this->object->getActiveChannels(&channels);
        daq::checkErrorInfo(errCode);

        return channels;
    }


    /*!
     * @brief Gets a flat list of all used channels.
     * @returns The flat list of channels.
     */
    daq::ListPtr<daq::IChannel> getUsedChannels() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IChannel> channels;
        auto errCode = this->object->getUsedChannels(&channels);
        daq::checkErrorInfo(errCode);

        return channels;
    }


    /*!
     * @brief Gets a flat list of all channels.
     * @returns The flat list of channels.
     */
    daq::ListPtr<daq::IChannel> getAllChannels() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IChannel> channels;
        auto errCode = this->object->getAllChannels(&channels);
        daq::checkErrorInfo(errCode);

        return channels;
    }

#if __has_include(<cqdaq/data_center_ptr.custom.h>)
    #include <cqdaq/data_center_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
