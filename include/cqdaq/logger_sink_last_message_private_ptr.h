//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:55.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger_sink_last_message_private.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class LastMessageLoggerSinkPrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILastMessageLoggerSinkPrivate>
{
    using SmartPtr = daq::LastMessageLoggerSinkPrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class LastMessageLoggerSinkPrivatePtr : public daq::ObjectPtr<ILastMessageLoggerSinkPrivate>
{
public:
    using daq::ObjectPtr<ILastMessageLoggerSinkPrivate>::ObjectPtr;
    //using daq::ObjectPtr<ILastMessageLoggerSinkPrivate>::operator=;



    LastMessageLoggerSinkPrivatePtr()
        : daq::ObjectPtr<ILastMessageLoggerSinkPrivate>()

    {
    }

    LastMessageLoggerSinkPrivatePtr(daq::ObjectPtr<ILastMessageLoggerSinkPrivate>&& ptr)
        : daq::ObjectPtr<ILastMessageLoggerSinkPrivate>(std::move(ptr))

    {
    }

    LastMessageLoggerSinkPrivatePtr(const daq::ObjectPtr<ILastMessageLoggerSinkPrivate>& ptr)
        : daq::ObjectPtr<ILastMessageLoggerSinkPrivate>(ptr)

    {
    }

    LastMessageLoggerSinkPrivatePtr(const LastMessageLoggerSinkPrivatePtr& other)
        : daq::ObjectPtr<ILastMessageLoggerSinkPrivate>(other)

    {
    }

    LastMessageLoggerSinkPrivatePtr(LastMessageLoggerSinkPrivatePtr&& other) noexcept
        : daq::ObjectPtr<ILastMessageLoggerSinkPrivate>(std::move(other))

    {
    }
    
    LastMessageLoggerSinkPrivatePtr& operator=(const LastMessageLoggerSinkPrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILastMessageLoggerSinkPrivate>::operator =(other);


        return *this;
    }

    LastMessageLoggerSinkPrivatePtr& operator=(LastMessageLoggerSinkPrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILastMessageLoggerSinkPrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Get the last log message

     * @returns The last log message
     */
    daq::StringPtr getLastMessage() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr lastMessage;
        auto errCode = this->object->getLastMessage(&lastMessage);
        daq::checkErrorInfo(errCode);

        return lastMessage;
    }


    /*!
     * @brief Wait for receiving a new log message

     * @param timeoutMs The timeout in milliseconds until which wait for a new log message. If timeout set as 0 ms waiting will be skipped.
     * @returns The success will return true if there was a new unread log message before waiting     * or sink got a new logger message before timeout. False if timeout was reached.
     */
    daq::Bool waitForMessage(daq::SizeT timeoutMs) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool success;
        auto errCode = this->object->waitForMessage(timeoutMs, &success);
        daq::checkErrorInfo(errCode);

        return success;
    }

#if __has_include(<cqdaq/last_message_logger_sink_private_ptr.custom.h>)
    #include <cqdaq/last_message_logger_sink_private_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
