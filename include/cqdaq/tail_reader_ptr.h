//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:06.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/tail_reader.h"
#include <coretypes/span.h>
#include "sample_reader_ptr.h"
#include <cqdaq/sample_reader_ptr.h>
#include <cqdaq/reader_status_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class TailReaderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ITailReader>
{
    using SmartPtr = daq::TailReaderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_tail_reader Tail reader
 * @{

 */


/*!
 * @brief A reader that only ever reads the last N samples, subsequent calls may result in overlapping data.

 */

class TailReaderPtr : public GenericSampleReaderPtr<ITailReader>
{
public:
    using GenericSampleReaderPtr<ITailReader>::GenericSampleReaderPtr;
    //using GenericSampleReaderPtr<ITailReader>::operator=;



    TailReaderPtr()
        : GenericSampleReaderPtr<ITailReader>()

    {
    }

    TailReaderPtr(daq::ObjectPtr<ITailReader>&& ptr)
        : GenericSampleReaderPtr<ITailReader>(std::move(ptr))

    {
    }

    TailReaderPtr(const daq::ObjectPtr<ITailReader>& ptr)
        : GenericSampleReaderPtr<ITailReader>(ptr)

    {
    }

    TailReaderPtr(const TailReaderPtr& other)
        : GenericSampleReaderPtr<ITailReader>(other)

    {
    }

    TailReaderPtr(TailReaderPtr&& other) noexcept
        : GenericSampleReaderPtr<ITailReader>(std::move(other))

    {
    }
    
    TailReaderPtr& operator=(const TailReaderPtr& other)
    {
        if (this == &other)
            return *this;

        GenericSampleReaderPtr<ITailReader>::operator =(other);


        return *this;
    }

    TailReaderPtr& operator=(TailReaderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericSampleReaderPtr<ITailReader>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Copies at maximum the next `count` unread samples to the values buffer.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] values The buffer that the samples will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of samples.
     * @param[in,out] count The maximum amount of samples to be read. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * samples are returned. The rest of the buffer is not modified or cleared.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::getReadStatus returns ReadStatus::Event
     * - If the reading process is successful, IReaderStatus::getReadStatu returns ReadStatus::Ok, indicating that IReaderStatus::getValid is true and there is no encountered events
     */
    daq::ReaderStatusPtr read(void* values, daq::SizeT* count) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->read(values, count, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief Copies at maximum the next `count` unread samples and clock-stamps to the `values` and `stamps` buffers.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] values The buffer that the data values will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of samples.
     * @param[in] domain The buffer that the domain values will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of clock-stamps.
     * @param[in,out] count The maximum amount of samples to be read. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * samples are returned. The rest of the buffer is not modified or cleared.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::getReadStatus returns ReadStatus::Event
     * - If the reading process is successful, IReaderStatus::getReadStatu returns ReadStatus::Ok, indicating that IReaderStatus::getValid is true and there is no encountered events
     */
    daq::ReaderStatusPtr readWithDomain(void* values, void* domain, daq::SizeT* count) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->readWithDomain(values, domain, count, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief The maximum amount of samples in history to keep.

     * @returns The history size.
     */
    daq::SizeT getHistorySize() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT size;
        auto errCode = this->object->getHistorySize(&size);
        daq::checkErrorInfo(errCode);

        return size;
    }

#if __has_include(<cqdaq/tail_reader_ptr.custom.h>)
    #include <cqdaq/tail_reader_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
