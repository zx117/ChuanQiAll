//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:21.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/range.h"
#include <coretypes/objectptr.h>
#include <coretypes/number_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class RangePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IRange>
{
    using SmartPtr = daq::RangePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_range Range
 * @{

 */


/*!
 * @brief Describes a range of values between the `lowValue` and `highValue` boundaries.

 * Range objects implement the Struct methods internally and are Core type `ctStruct`.
 */

class RangePtr : public daq::ObjectPtr<IRange>
{
public:
    using daq::ObjectPtr<IRange>::ObjectPtr;
    //using daq::ObjectPtr<IRange>::operator=;



    RangePtr()
        : daq::ObjectPtr<IRange>()

    {
    }

    RangePtr(daq::ObjectPtr<IRange>&& ptr)
        : daq::ObjectPtr<IRange>(std::move(ptr))

    {
    }

    RangePtr(const daq::ObjectPtr<IRange>& ptr)
        : daq::ObjectPtr<IRange>(ptr)

    {
    }

    RangePtr(const RangePtr& other)
        : daq::ObjectPtr<IRange>(other)

    {
    }

    RangePtr(RangePtr&& other) noexcept
        : daq::ObjectPtr<IRange>(std::move(other))

    {
    }
    
    RangePtr& operator=(const RangePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IRange>::operator =(other);


        return *this;
    }

    RangePtr& operator=(RangePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IRange>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the lower boundary value of the range.

     */
    daq::NumberPtr getLowValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr value;
        auto errCode = this->object->getLowValue(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Gets the upper boundary value of the range.

     */
    daq::NumberPtr getHighValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr value;
        auto errCode = this->object->getHighValue(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }

#if __has_include(<cqdaq/range_ptr.custom.h>)
    #include <cqdaq/range_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_range
 * @addtogroup cqdaq_range_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
