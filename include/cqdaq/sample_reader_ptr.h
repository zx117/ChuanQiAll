//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:05.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/sample_reader.h"
#include "reader_ptr.h"
#include <cqdaq/reader_ptr.h>
#include <coretypes/function_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::ISampleReader>
class GenericSampleReaderPtr;

using SampleReader = daq::GenericSampleReaderPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ISampleReader>
{
    using SmartPtr = daq::GenericSampleReaderPtr<daq::ISampleReader>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_sample_reader Sample Reader
 * @{

 */


/*!
 * @brief A basic signal reader that simplifies reading the signals's samples.

 */
template <typename InterfaceType>
class GenericSampleReaderPtr : public GenericReaderPtr<InterfaceType>
{
public:
    using GenericReaderPtr<InterfaceType>::GenericReaderPtr;
    //using GenericReaderPtr<InterfaceType>::operator=;



    GenericSampleReaderPtr()
        : GenericReaderPtr<InterfaceType>()

    {
    }

    GenericSampleReaderPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericReaderPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericSampleReaderPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericReaderPtr<InterfaceType>(ptr)

    {
    }

    GenericSampleReaderPtr(const SampleReader& other)
        : GenericReaderPtr<InterfaceType>(other)

    {
    }

    GenericSampleReaderPtr(SampleReader&& other) noexcept
        : GenericReaderPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericSampleReaderPtr& operator=(const SampleReader& other)
    {
        if (this == &other)
            return *this;

        GenericReaderPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericSampleReaderPtr& operator=(SampleReader&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericReaderPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the sample-type the signal value samples will be converted to when read
     * or @c SampleType::Invalid if read-type has not been determined yet.

     * @returns The sample-type type of the read samples otherwise @c SampleType::Invalid.
     */
    daq::SampleType getValueReadType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType sampleType;
        auto errCode = this->object->getValueReadType(&sampleType);
        daq::checkErrorInfo(errCode);

        return sampleType;
    }


    /*!
     * @brief Gets the sample-type the signal domain samples will be converted to when read
     * or @c SampleType::Invalid if read-type has not been determined yet.

     * @returns The sample-type type of the read samples otherwise @c SampleType::Invalid.
     */
    daq::SampleType getDomainReadType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType sampleType;
        auto errCode = this->object->getDomainReadType(&sampleType);
        daq::checkErrorInfo(errCode);

        return sampleType;
    }


    /*!
     * @brief Sets the transform function that will be called with the read value-data and currently valid Signal-Descriptor
     * giving the user the chance add a custom post-processing step. The function should have a signature compatible with:

     * @code
     * transform(Int inputBuffer, Int outputBuffer, SizeT toRead, IDataDescriptor* descriptor)
     * @endcode
     * @param transform The function performing the post-processing.
     */
    void setValueTransformFunction(const daq::FunctionPtr& transform) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValueTransformFunction(transform);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the transform function that will be called with the read domain-data and currently valid Signal-Descriptor
     * giving the user the chance add a custom post-processing step. The function should have a signature compatible with:

     * @code
     * transform(Int inputBuffer, Int outputBuffer, SizeT toRead, IDataDescriptor* descriptor)
     * @endcode
     * @param transform The function performing the post-processing.
     */
    void setDomainTransformFunction(const daq::FunctionPtr& transform) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDomainTransformFunction(transform);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the reader's read mode which determines if the reader will also scale the read data or not.

     * @returns The mode the reader is in (either Raw or Scaled)
     */
    daq::ReadMode getReadMode() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReadMode mode;
        auto errCode = this->object->getReadMode(&mode);
        daq::checkErrorInfo(errCode);

        return mode;
    }

#if __has_include(<cqdaq/sample_reader_ptr.custom.h>)
    #include <cqdaq/sample_reader_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
