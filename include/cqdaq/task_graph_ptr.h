//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:07.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/task_graph.h"
#include "task_ptr.h"
#include <cqdaq/task_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class TaskGraphPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ITaskGraph>
{
    using SmartPtr = daq::TaskGraphPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_scheduler_components
 * @addtogroup cqdaq_task TaskGraph
 * @{

 */


/*!
 * @brief A dependency graph (directed acyclic graph) of tasks that can be scheduled for execution on a Scheduler.

 */

class TaskGraphPtr : public GenericTaskPtr<ITaskGraph>
{
public:
    using GenericTaskPtr<ITaskGraph>::GenericTaskPtr;
    //using GenericTaskPtr<ITaskGraph>::operator=;



    TaskGraphPtr()
        : GenericTaskPtr<ITaskGraph>()

    {
    }

    TaskGraphPtr(daq::ObjectPtr<ITaskGraph>&& ptr)
        : GenericTaskPtr<ITaskGraph>(std::move(ptr))

    {
    }

    TaskGraphPtr(const daq::ObjectPtr<ITaskGraph>& ptr)
        : GenericTaskPtr<ITaskGraph>(ptr)

    {
    }

    TaskGraphPtr(const TaskGraphPtr& other)
        : GenericTaskPtr<ITaskGraph>(other)

    {
    }

    TaskGraphPtr(TaskGraphPtr&& other) noexcept
        : GenericTaskPtr<ITaskGraph>(std::move(other))

    {
    }
    
    TaskGraphPtr& operator=(const TaskGraphPtr& other)
    {
        if (this == &other)
            return *this;

        GenericTaskPtr<ITaskGraph>::operator =(other);


        return *this;
    }

    TaskGraphPtr& operator=(TaskGraphPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericTaskPtr<ITaskGraph>::operator =(std::move(other));

        return *this;
    }




#if __has_include(<cqdaq/task_graph_ptr.custom.h>)
    #include <cqdaq/task_graph_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
