//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 24.10.2024 06:57:26.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/ncc.h"
#include <cqdaq/worker_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class NccPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::INcc>
{
    using SmartPtr = daq::NccPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_ncc Ncc
 * @{
 */


/*!
 * @brief The ncc object. 
 * 
 * It forwards all Device and PropertyObject calls to the current root device, making the calls on the Instance
 * and root device equivalen.
 */

class NccPtr : public daq::ObjectPtr<INcc>
{
public:
    using daq::ObjectPtr<INcc>::ObjectPtr;
    //using daq::ObjectPtr<INcc>::operator=;



    NccPtr()
        : daq::ObjectPtr<INcc>()

    {
    }

    NccPtr(daq::ObjectPtr<INcc>&& ptr)
        : daq::ObjectPtr<INcc>(std::move(ptr))

    {
    }

    NccPtr(const daq::ObjectPtr<INcc>& ptr)
        : daq::ObjectPtr<INcc>(ptr)

    {
    }

    NccPtr(const NccPtr& other)
        : daq::ObjectPtr<INcc>(other)

    {
    }

    NccPtr(NccPtr&& other) noexcept
        : daq::ObjectPtr<INcc>(std::move(other))

    {
    }
    
    NccPtr& operator=(const NccPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<INcc>::operator =(other);


        return *this;
    }

    NccPtr& operator=(NccPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<INcc>::operator =(std::move(other));

        return *this;
    }


    
    daq::Int getStartAbsTime() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int value;
        auto errCode = this->object->getStartAbsTime(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }

#if __has_include(<cqdaq/ncc_ptr.custom.h>)
    #include <cqdaq/ncc_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
