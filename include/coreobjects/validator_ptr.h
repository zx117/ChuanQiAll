//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:55.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/validator.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ValidatorPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IValidator>
{
    using SmartPtr = daq::ValidatorPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property
 * @addtogroup objects_validator Validator
 * @{

 */


/*!
 * @brief Used by cqDAQ properties to validate whether a value fits the value restrictions of the Property.

 * Whenever a value is set to on a Property object, if the corresponding Property has a validator configured, the value will
 * be validated, throwing a validation error, if the value is not compliant with the validation restrictions. For example,
 * a validator can check the written value for lower-than, greater-than, equality, or other number relations.
 * The validation conditions are configured with an evaluation string when the validator is constructed. The string constructs an
 * Eval value that replaces any instance of the keyword "value" or "val" with the value being set. The result of the Eval
 * value evaluation is the output of the `validate` function call. For example, validators created with the string
 * "value == 5" would reject any value that is not equal to 5.
 */

class ValidatorPtr : public daq::ObjectPtr<IValidator>
{
public:
    using daq::ObjectPtr<IValidator>::ObjectPtr;
    //using daq::ObjectPtr<IValidator>::operator=;



    ValidatorPtr()
        : daq::ObjectPtr<IValidator>()

    {
    }

    ValidatorPtr(daq::ObjectPtr<IValidator>&& ptr)
        : daq::ObjectPtr<IValidator>(std::move(ptr))

    {
    }

    ValidatorPtr(const daq::ObjectPtr<IValidator>& ptr)
        : daq::ObjectPtr<IValidator>(ptr)

    {
    }

    ValidatorPtr(const ValidatorPtr& other)
        : daq::ObjectPtr<IValidator>(other)

    {
    }

    ValidatorPtr(ValidatorPtr&& other) noexcept
        : daq::ObjectPtr<IValidator>(std::move(other))

    {
    }
    
    ValidatorPtr& operator=(const ValidatorPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IValidator>::operator =(other);


        return *this;
    }

    ValidatorPtr& operator=(ValidatorPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IValidator>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Checks whether `value` adheres to the validity conditions of the validator.

     * @param propObj Optional property object parameter required if the validation depends on other properties of the Property object.
     * @param value The value to be checked for whether it is valid or not.
     * @throws ValidateFailedException if `value` is invalid.
     * @retval CQDAQ_SUCCESS if `value` is valid.
     */
    void validate(const daq::BaseObjectPtr& propObj, const daq::BaseObjectPtr& value) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->validate(propObj, value);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the string expression used when creating the validator.

     * @returns The validation expression.
     */
    daq::StringPtr getEval() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr eval;
        auto errCode = this->object->getEval(&eval);
        daq::checkErrorInfo(errCode);

        return eval;
    }

#if __has_include(<coreobjects/validator_ptr.custom.h>)
    #include <coreobjects/validator_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @addtogroup objects_validator_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
