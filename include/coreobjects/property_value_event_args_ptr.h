//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:03.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_value_event_args.h"
#include <coretypes/event_args_ptr.h>
#include <coreobjects/property_ptr.h>
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyValueEventArgsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyValueEventArgs>
{
    using SmartPtr = daq::PropertyValueEventArgsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class PropertyValueEventArgsPtr : public EventArgsPtr<IPropertyValueEventArgs>
{
public:
    using EventArgsPtr<IPropertyValueEventArgs>::EventArgsPtr;
    //using EventArgsPtr<IPropertyValueEventArgs>::operator=;



    PropertyValueEventArgsPtr()
        : EventArgsPtr<IPropertyValueEventArgs>()

    {
    }

    PropertyValueEventArgsPtr(daq::ObjectPtr<IPropertyValueEventArgs>&& ptr)
        : EventArgsPtr<IPropertyValueEventArgs>(std::move(ptr))

    {
    }

    PropertyValueEventArgsPtr(const daq::ObjectPtr<IPropertyValueEventArgs>& ptr)
        : EventArgsPtr<IPropertyValueEventArgs>(ptr)

    {
    }

    PropertyValueEventArgsPtr(const PropertyValueEventArgsPtr& other)
        : EventArgsPtr<IPropertyValueEventArgs>(other)

    {
    }

    PropertyValueEventArgsPtr(PropertyValueEventArgsPtr&& other) noexcept
        : EventArgsPtr<IPropertyValueEventArgs>(std::move(other))

    {
    }
    
    PropertyValueEventArgsPtr& operator=(const PropertyValueEventArgsPtr& other)
    {
        if (this == &other)
            return *this;

        EventArgsPtr<IPropertyValueEventArgs>::operator =(other);


        return *this;
    }

    PropertyValueEventArgsPtr& operator=(PropertyValueEventArgsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        EventArgsPtr<IPropertyValueEventArgs>::operator =(std::move(other));

        return *this;
    }


    
    daq::PropertyPtr getProperty() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyPtr property;
        auto errCode = this->object->getProperty(&property);
        daq::checkErrorInfo(errCode);

        return property;
    }

    
    daq::BaseObjectPtr getValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr value;
        auto errCode = this->object->getValue(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }

    
    void setValue(const daq::BaseObjectPtr& value) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValue(value);
        daq::checkErrorInfo(errCode);
    }

    
    daq::PropertyEventType getPropertyEventType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyEventType changeType;
        auto errCode = this->object->getPropertyEventType(&changeType);
        daq::checkErrorInfo(errCode);

        return changeType;
    }

    
    daq::Bool getIsUpdating() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool isUpdating;
        auto errCode = this->object->getIsUpdating(&isUpdating);
        daq::checkErrorInfo(errCode);

        return isUpdating;
    }

#if __has_include(<coreobjects/property_value_event_args_ptr.custom.h>)
    #include <coreobjects/property_value_event_args_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
