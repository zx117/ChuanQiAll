//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:20.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/folder_config.h"
#include <cqdaq/folder_ptr.h>
#include <cqdaq/component_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IFolderConfig>
class GenericFolderConfigPtr;

using FolderConfigPtr = daq::GenericFolderConfigPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IFolderConfig>
{
    using SmartPtr = daq::GenericFolderConfigPtr<daq::IFolderConfig>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_components
 * @addtogroup cqdaq_folder Folder
 * @{

 */


/*!
 * @brief Allows write access to folder.

 * Provides methods to add and remove items to the folder.
 */
template <typename InterfaceType>
class GenericFolderConfigPtr : public GenericFolderPtr<InterfaceType>
{
public:
    using GenericFolderPtr<InterfaceType>::GenericFolderPtr;
    //using GenericFolderPtr<InterfaceType>::operator=;



    GenericFolderConfigPtr()
        : GenericFolderPtr<InterfaceType>()

    {
    }

    GenericFolderConfigPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericFolderPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericFolderConfigPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericFolderPtr<InterfaceType>(ptr)

    {
    }

    GenericFolderConfigPtr(const FolderConfigPtr& other)
        : GenericFolderPtr<InterfaceType>(other)

    {
    }

    GenericFolderConfigPtr(FolderConfigPtr&& other) noexcept
        : GenericFolderPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericFolderConfigPtr& operator=(const FolderConfigPtr& other)
    {
        if (this == &other)
            return *this;

        GenericFolderPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericFolderConfigPtr& operator=(FolderConfigPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericFolderPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Adds a component to the folder.

     * @param item The component.
     */
    void addItem(const daq::ComponentPtr& item) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addItem(item);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes the item from the folder.

     * @param item The item component.
     */
    void removeItem(const daq::ComponentPtr& item) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeItem(item);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes the item from the folder using local id of the component.

     * @param localId The local id of the component.
     */
    void removeItemWithLocalId(const daq::StringPtr& localId) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeItemWithLocalId(localId);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes all items from the folder.

     */
    void clear() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->clear();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/folder_config_ptr.custom.h>)
    #include <cqdaq/folder_config_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_folder
 * @addtogroup cqdaq_folder_factories Folder
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
