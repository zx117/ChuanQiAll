//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:56.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/logger_component_ptr.h>
#include <coretypes/list_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class LoggerPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILogger>
{
    using SmartPtr = daq::LoggerPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_logger
 * @addtogroup cqdaq_logger_logger Logger
 * @{

 */


/*!
 * @brief Represents a collection of @ref ILoggerComponent "Logger Components" with multiple

 * @ref ILoggerSink "Logger Sinks" and a single @ref ILoggerThreadPool "Logger Thread Pool"
 * shared between components.
 * Logger is used to create, manage and maintain Logger Components associated with different parts of
 * the cqDAQ SDK. The Logger provides methods, allowing for components to be added and removed dynamically.
 * The components added within the same Logger object should have unique names. Each newly added
 * component inherits threshold log severity level from the Logger. Then this level can be changed
 * independently per component. The set of sinks is initialized on the Logger object creation
 * and cannot be changed after.
 * Additionally, Logger provides the ability to manage flushing policies for the added components,
 * see `flushOnLevel` method.
 */

class LoggerPtr : public daq::ObjectPtr<ILogger>
{
public:
    using daq::ObjectPtr<ILogger>::ObjectPtr;
    //using daq::ObjectPtr<ILogger>::operator=;



    LoggerPtr()
        : daq::ObjectPtr<ILogger>()

    {
    }

    LoggerPtr(daq::ObjectPtr<ILogger>&& ptr)
        : daq::ObjectPtr<ILogger>(std::move(ptr))

    {
    }

    LoggerPtr(const daq::ObjectPtr<ILogger>& ptr)
        : daq::ObjectPtr<ILogger>(ptr)

    {
    }

    LoggerPtr(const LoggerPtr& other)
        : daq::ObjectPtr<ILogger>(other)

    {
    }

    LoggerPtr(LoggerPtr&& other) noexcept
        : daq::ObjectPtr<ILogger>(std::move(other))

    {
    }
    
    LoggerPtr& operator=(const LoggerPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILogger>::operator =(other);


        return *this;
    }

    LoggerPtr& operator=(LoggerPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILogger>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the default log severity level.

     * @param level The log severity level.
     */
    void setLevel(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setLevel(level);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the default log severity level.

     * @returns The log severity level.
     */
    daq::LogLevel getLevel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LogLevel level;
        auto errCode = this->object->getLevel(&level);
        daq::checkErrorInfo(errCode);

        return level;
    }


    /*!
     * @brief Gets an added component by name or creates a new one with a given name and adds it to the Logger object.

     * @param name The component's name.
     * @returns The logger component with the name equal to @p `name`.
     * @throws InvalidParameterException if @p name is empty string.
     */
    daq::LoggerComponentPtr getOrAddComponent(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LoggerComponentPtr component;
        auto errCode = this->object->getOrAddComponent(name, &component);
        daq::checkErrorInfo(errCode);

        return component;
    }


    /*!
     * @brief Creates a component with a given name and adds it to the Logger object.

     * @param name The component's name.
     * @returns Added component.
     * @throws InvalidParameterException if @p name is empty string.
     */
    daq::LoggerComponentPtr addComponent(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LoggerComponentPtr component;
        auto errCode = this->object->addComponent(name, &component);
        daq::checkErrorInfo(errCode);

        return component;
    }


    /*!
     * @brief Removes the component with a given name from the Logger object.

     * @param name The component's name.
     * @throws NotFoundException if a component with the specified @p name was not added.
     */
    void removeComponent(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeComponent(name);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets a list of added components.

     * @returns The list of added components.
     */
    daq::ListPtr<daq::ILoggerComponent> getComponents() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::ILoggerComponent> components;
        auto errCode = this->object->getComponents(&components);
        daq::checkErrorInfo(errCode);

        return components;
    }


    /*!
     * @brief Gets an added component by name.

     * @param name The component's name.
     * @returns The logger component with the name equal to @p `name`.
     * @throws NotFoundException if a component with the specified @p name was not added.
     */
    daq::LoggerComponentPtr getComponent(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LoggerComponentPtr component;
        auto errCode = this->object->getComponent(name, &component);
        daq::checkErrorInfo(errCode);

        return component;
    }


    /*!
     * @brief Triggers writing out the messages stored in temporary buffers for added components
     * and sinks associated with the Logger object.

     */
    void flush() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->flush();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the minimum severity level of messages to be automatically flushed by components of Logger object.

     * @param level The log severity level.
     */
    void flushOnLevel(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->flushOnLevel(level);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/logger_ptr.custom.h>)
    #include <cqdaq/logger_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
