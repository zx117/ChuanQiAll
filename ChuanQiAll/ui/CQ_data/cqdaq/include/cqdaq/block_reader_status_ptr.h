//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:04.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/block_reader_status.h"
#include "reader_status_ptr.h"
#include <cqdaq/reader_status_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class BlockReaderStatusPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IBlockReaderStatus>
{
    using SmartPtr = daq::BlockReaderStatusPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_reader Block reader status
 * @{

 */


/*!
 * @brief IBlockReaderStatus inherits from IReaderStatus to expand information returned read function

 */

class BlockReaderStatusPtr : public GenericReaderStatusPtr<IBlockReaderStatus>
{
public:
    using GenericReaderStatusPtr<IBlockReaderStatus>::GenericReaderStatusPtr;
    //using GenericReaderStatusPtr<IBlockReaderStatus>::operator=;



    BlockReaderStatusPtr()
        : GenericReaderStatusPtr<IBlockReaderStatus>()

    {
    }

    BlockReaderStatusPtr(daq::ObjectPtr<IBlockReaderStatus>&& ptr)
        : GenericReaderStatusPtr<IBlockReaderStatus>(std::move(ptr))

    {
    }

    BlockReaderStatusPtr(const daq::ObjectPtr<IBlockReaderStatus>& ptr)
        : GenericReaderStatusPtr<IBlockReaderStatus>(ptr)

    {
    }

    BlockReaderStatusPtr(const BlockReaderStatusPtr& other)
        : GenericReaderStatusPtr<IBlockReaderStatus>(other)

    {
    }

    BlockReaderStatusPtr(BlockReaderStatusPtr&& other) noexcept
        : GenericReaderStatusPtr<IBlockReaderStatus>(std::move(other))

    {
    }
    
    BlockReaderStatusPtr& operator=(const BlockReaderStatusPtr& other)
    {
        if (this == &other)
            return *this;

        GenericReaderStatusPtr<IBlockReaderStatus>::operator =(other);


        return *this;
    }

    BlockReaderStatusPtr& operator=(BlockReaderStatusPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericReaderStatusPtr<IBlockReaderStatus>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Returns the number of samples that were read. 
     * Sometimes, during the process of reading, an event packet may occur that stops the reading of remaining samples. 
     * Developers can use this function to determine how many samples were actually read.

     * @param[out] samplesCount the amount of samples that were read.
     */
    daq::SizeT getReadSamples() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT readSamples;
        auto errCode = this->object->getReadSamples(&readSamples);
        daq::checkErrorInfo(errCode);

        return readSamples;
    }

#if __has_include(<cqdaq/block_reader_status_ptr.custom.h>)
    #include <cqdaq/block_reader_status_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
