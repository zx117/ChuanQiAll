//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:59.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger_thread_pool.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class LoggerThreadPoolPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILoggerThreadPool>
{
    using SmartPtr = daq::LoggerThreadPoolPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_logger
 * @addtogroup cqdaq_logger_thread_pool Logger thread pool
 * @{

 */


/*!
 * @brief Container for messages queue and backing threads used for asynchronous logging.

 */

class LoggerThreadPoolPtr : public daq::ObjectPtr<ILoggerThreadPool>
{
public:
    using daq::ObjectPtr<ILoggerThreadPool>::ObjectPtr;
    //using daq::ObjectPtr<ILoggerThreadPool>::operator=;



    LoggerThreadPoolPtr()
        : daq::ObjectPtr<ILoggerThreadPool>()

    {
    }

    LoggerThreadPoolPtr(daq::ObjectPtr<ILoggerThreadPool>&& ptr)
        : daq::ObjectPtr<ILoggerThreadPool>(std::move(ptr))

    {
    }

    LoggerThreadPoolPtr(const daq::ObjectPtr<ILoggerThreadPool>& ptr)
        : daq::ObjectPtr<ILoggerThreadPool>(ptr)

    {
    }

    LoggerThreadPoolPtr(const LoggerThreadPoolPtr& other)
        : daq::ObjectPtr<ILoggerThreadPool>(other)

    {
    }

    LoggerThreadPoolPtr(LoggerThreadPoolPtr&& other) noexcept
        : daq::ObjectPtr<ILoggerThreadPool>(std::move(other))

    {
    }
    
    LoggerThreadPoolPtr& operator=(const LoggerThreadPoolPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILoggerThreadPool>::operator =(other);


        return *this;
    }

    LoggerThreadPoolPtr& operator=(LoggerThreadPoolPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILoggerThreadPool>::operator =(std::move(other));

        return *this;
    }




#if __has_include(<cqdaq/logger_thread_pool_ptr.custom.h>)
    #include <cqdaq/logger_thread_pool_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
