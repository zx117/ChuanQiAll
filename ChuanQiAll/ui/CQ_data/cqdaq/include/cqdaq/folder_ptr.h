//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:20.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/folder.h"
#include <cqdaq/component_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/search_filter_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IFolder>
class GenericFolderPtr;

using FolderPtr = daq::GenericFolderPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IFolder>
{
    using SmartPtr = daq::GenericFolderPtr<daq::IFolder>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_components
 * @addtogroup cqdaq_folder Folder
 * @{

 */


/*!
 * @brief Acts as a container for other components

 * Other components use the folder component to organize the children components,
 * such as channels, signals, function blocks, etc.
 */
template <typename InterfaceType>
class GenericFolderPtr : public GenericComponentPtr<InterfaceType>
{
public:
    using GenericComponentPtr<InterfaceType>::GenericComponentPtr;
    //using GenericComponentPtr<InterfaceType>::operator=;



    GenericFolderPtr()
        : GenericComponentPtr<InterfaceType>()

    {
    }

    GenericFolderPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericComponentPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericFolderPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericComponentPtr<InterfaceType>(ptr)

    {
    }

    GenericFolderPtr(const FolderPtr& other)
        : GenericComponentPtr<InterfaceType>(other)

    {
    }

    GenericFolderPtr(FolderPtr&& other) noexcept
        : GenericComponentPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericFolderPtr& operator=(const FolderPtr& other)
    {
        if (this == &other)
            return *this;

        GenericComponentPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericFolderPtr& operator=(FolderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericComponentPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the list of the items in the folder.

     * @param searchFilter Provides an optional filter that filters out unwanted components and allows for recursion.
     * @returns The list of the items.
     * If searchFilter is not provided, the returned list contains only immediate children with visible set to `true`.
     */
    daq::ListPtr<daq::IComponent> getItems(const daq::SearchFilterPtr& searchFilter = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IComponent> items;
        auto errCode = this->object->getItems(&items, searchFilter);
        daq::checkErrorInfo(errCode);

        return items;
    }


    /*!
     * @brief Returns True if the folder is empty.

     * @returns True if the folder is empty.
     */
    daq::Bool isEmpty() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool empty;
        auto errCode = this->object->isEmpty(&empty);
        daq::checkErrorInfo(errCode);

        return empty;
    }


    /*!
     * @brief Returns True if the folder has an item with local ID.

     * @param localId The local ID of the item.
     * @returns True if the folder contains item with local ID.
     */
    daq::Bool hasItem(const daq::StringPtr& localId) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool value;
        auto errCode = this->object->hasItem(localId, &value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Gets the item component with the specified localId.

     * @param localId The local id of the child component.
     * @returns The item component.
     * @retval CQDAQ_SUCCESS if succeeded.
     * @retval CQDAQ_NOT_FOUND if folder with the specified ID not found.
     */
    daq::GenericComponentPtr<daq::IComponent> getItem(const daq::StringPtr& localId) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::GenericComponentPtr<daq::IComponent> item;
        auto errCode = this->object->getItem(localId, &item);
        daq::checkErrorInfo(errCode);

        return item;
    }

#if __has_include(<cqdaq/folder_ptr.custom.h>)
    #include <cqdaq/folder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
