//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:05.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/context.h"
#include <coretypes/event_wrapper.h>
#include <coretypes/objectptr.h>
#include <cqdaq/scheduler_ptr.h>
#include <cqdaq/logger_ptr.h>
#include <coretypes/type_manager_ptr.h>
#include <coretypes/event_ptr.h>
#include <cqdaq/context_ptr.fwd_declare.h>
#include <coreobjects/core_event_args_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ContextPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IContext>
{
    using SmartPtr = daq::ContextPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_utility
 * @addtogroup cqdaq_context Context
 * @{

 */


/*!
 * @brief The Context serves as a container for the Scheduler and Logger. It originates
 * at the instance, and is passed to the root device, which forwards it to components
 * such as function blocks and signals.

 * Note: The context holds a strong reference to the Module Manager until  the reference is moved via the
 * ContextInternal move function. The strong reference moved to an external owner to avoid memory leaks
 * due to circular references. This is done automatically when the Context is used in the cqDAQ Instance
 * constructor.
 */

class ContextPtr : public daq::ObjectPtr<IContext>
{
public:
    using daq::ObjectPtr<IContext>::ObjectPtr;
    //using daq::ObjectPtr<IContext>::operator=;



    ContextPtr()
        : daq::ObjectPtr<IContext>()

    {
    }

    ContextPtr(daq::ObjectPtr<IContext>&& ptr)
        : daq::ObjectPtr<IContext>(std::move(ptr))

    {
    }

    ContextPtr(const daq::ObjectPtr<IContext>& ptr)
        : daq::ObjectPtr<IContext>(ptr)

    {
    }

    ContextPtr(const ContextPtr& other)
        : daq::ObjectPtr<IContext>(other)

    {
    }

    ContextPtr(ContextPtr&& other) noexcept
        : daq::ObjectPtr<IContext>(std::move(other))

    {
    }
    
    ContextPtr& operator=(const ContextPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IContext>::operator =(other);


        return *this;
    }

    ContextPtr& operator=(ContextPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IContext>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the scheduler.

     * @returns The scheduler.
     */
    daq::SchedulerPtr getScheduler() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SchedulerPtr scheduler;
        auto errCode = this->object->getScheduler(&scheduler);
        daq::checkErrorInfo(errCode);

        return scheduler;
    }


    /*!
     * @brief Gets the logger.

     * @returns The logger.
     */
    daq::LoggerPtr getLogger() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LoggerPtr logger;
        auto errCode = this->object->getLogger(&logger);
        daq::checkErrorInfo(errCode);

        return logger;
    }


    /*!
     * @brief Gets the Module Manager as a Base Object.

     * @returns The module manager.
     */
    daq::BaseObjectPtr getModuleManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr manager;
        auto errCode = this->object->getModuleManager(&manager);
        daq::checkErrorInfo(errCode);

        return manager;
    }


    /*!
     * @brief Gets the Type Manager.

     * @returns The type manager.
     */
    daq::TypeManagerPtr getTypeManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::TypeManagerPtr manager;
        auto errCode = this->object->getTypeManager(&manager);
        daq::checkErrorInfo(errCode);

        return manager;
    }


    /*!
     * @brief Gets the Core Event object that triggers whenever a change happens within the cqDAQ core structure.

     * @returns The Core Event object. The event triggers with a Component reference and a CoreEventArgs object as arguments.
     * The Core Event is triggered on various changes to the cqDAQ Components. This includes changes to property values,
     * addition/removal of child components, connecting signals to input ports and others. The event type can be identified
     * via the event ID available within the CoreEventArgs object. Each event type has a set of predetermined parameters
     * available in the `parameters` field of the arguments. These can be used by any cqDAQ server, or other listener to
     * react to changes within the core structure.
     */
    daq::Event<daq::ComponentPtr, daq::CoreEventArgsPtr> getOnCoreEvent() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        EventPtr<> event;
        auto errCode = this->object->getOnCoreEvent(&event);
        daq::checkErrorInfo(errCode);

        return daq::Event<daq::ComponentPtr, daq::CoreEventArgsPtr>(event);
    }


    /*!
     * @brief Gets the dictionary of options 

     * @returns The dictionary of options
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getOptions() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> options;
        auto errCode = this->object->getOptions(&options);
        daq::checkErrorInfo(errCode);

        return options;
    }


    /*!
     * @brief Retrieves the options associated with the specified module ID.

     * @param moduleId The identifier of the module for which options are requested.
     * @returns A dictionary containing the options associated with the specified module ID.
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getModuleOptions(const daq::StringPtr& moduleId) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> options;
        auto errCode = this->object->getModuleOptions(moduleId, &options);
        daq::checkErrorInfo(errCode);

        return options;
    }

#if __has_include(<cqdaq/context_ptr.custom.h>)
    #include <cqdaq/context_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
