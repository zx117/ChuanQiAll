//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:35.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/mirrored_signal_private.h"
#include <coretypes/objectptr.h>
#include <cqdaq/event_packet_ptr.h>
#include <cqdaq/streaming_ptr.h>
#include <coretypes/string_ptr.h>
#include <cqdaq/data_descriptor_ptr.h>
#include <cqdaq/mirrored_signal_config_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class MirroredSignalPrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IMirroredSignalPrivate>
{
    using SmartPtr = daq::MirroredSignalPrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_streamings
 * @addtogroup cqdaq_streaming_signal Mirrored Signal private
 * @{

 */


/*!
 * @brief Internal functions used by cqDAQ core. This interface should never be used in
 * client SDK or module code.

 */

class MirroredSignalPrivatePtr : public daq::ObjectPtr<IMirroredSignalPrivate>
{
public:
    using daq::ObjectPtr<IMirroredSignalPrivate>::ObjectPtr;
    //using daq::ObjectPtr<IMirroredSignalPrivate>::operator=;



    MirroredSignalPrivatePtr()
        : daq::ObjectPtr<IMirroredSignalPrivate>()

    {
    }

    MirroredSignalPrivatePtr(daq::ObjectPtr<IMirroredSignalPrivate>&& ptr)
        : daq::ObjectPtr<IMirroredSignalPrivate>(std::move(ptr))

    {
    }

    MirroredSignalPrivatePtr(const daq::ObjectPtr<IMirroredSignalPrivate>& ptr)
        : daq::ObjectPtr<IMirroredSignalPrivate>(ptr)

    {
    }

    MirroredSignalPrivatePtr(const MirroredSignalPrivatePtr& other)
        : daq::ObjectPtr<IMirroredSignalPrivate>(other)

    {
    }

    MirroredSignalPrivatePtr(MirroredSignalPrivatePtr&& other) noexcept
        : daq::ObjectPtr<IMirroredSignalPrivate>(std::move(other))

    {
    }
    
    MirroredSignalPrivatePtr& operator=(const MirroredSignalPrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IMirroredSignalPrivate>::operator =(other);


        return *this;
    }

    MirroredSignalPrivatePtr& operator=(MirroredSignalPrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IMirroredSignalPrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Handles event packet e.g. packet with changes of the signals descriptors or
     * signal properties

     * @param eventPacket The event packet to be handled.
     * @returns True if the eventPacket should be sent along the signal path; False otherwise.
     */
    daq::Bool triggerEvent(const daq::EventPacketPtr& eventPacket) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool forward;
        auto errCode = this->object->triggerEvent(eventPacket, &forward);
        daq::checkErrorInfo(errCode);

        return forward;
    }


    /*!
     * @brief Adds streaming source for signal.

     * @param streaming The Streaming object representing the data source.
     */
    void addStreamingSource(const daq::StreamingPtr& streaming) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addStreamingSource(streaming);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes streaming source for signal.

     * @param streamingConnectionString The connection string of streaming source to be removed.
     */
    void removeStreamingSource(const daq::StringPtr& streamingConnectionString) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeStreamingSource(streamingConnectionString);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Handles the completion of subscription acknowledged by the specified streaming source.

     * @param streamingConnectionString The connection string of the streaming source that completed
     * the subscription for the signal.
     */
    void subscribeCompleted(const daq::StringPtr& streamingConnectionString) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->subscribeCompleted(streamingConnectionString);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Handles the completion of unsubscription acknowledged by the specified streaming source.

     * @param streamingConnectionString The connection string of the streaming source that completed
     * the unsubscription for the signal.
     */
    void unsubscribeCompleted(const daq::StringPtr& streamingConnectionString) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->unsubscribeCompleted(streamingConnectionString);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Acts the same as unsubscribeCompleted() but does not enter a critical section.

     * @param streamingConnectionString The connection string of the streaming source that completed
     * the unsubscription for the signal.
     */
    void unsubscribeCompletedNoLock(const daq::StringPtr& streamingConnectionString) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->unsubscribeCompletedNoLock(streamingConnectionString);
        daq::checkErrorInfo(errCode);
    }


    
    daq::DataDescriptorPtr getMirroredDataDescriptor() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DataDescriptorPtr descriptor;
        auto errCode = this->object->getMirroredDataDescriptor(&descriptor);
        daq::checkErrorInfo(errCode);

        return descriptor;
    }

    
    void setMirroredDataDescriptor(const daq::DataDescriptorPtr& descriptor) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMirroredDataDescriptor(descriptor);
        daq::checkErrorInfo(errCode);
    }

    
    daq::MirroredSignalConfigPtr getMirroredDomainSignal() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::MirroredSignalConfigPtr domainSignals;
        auto errCode = this->object->getMirroredDomainSignal(&domainSignals);
        daq::checkErrorInfo(errCode);

        return domainSignals;
    }

    
    void setMirroredDomainSignal(const daq::MirroredSignalConfigPtr& domainSignal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMirroredDomainSignal(domainSignal);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/mirrored_signal_private_ptr.custom.h>)
    #include <cqdaq/mirrored_signal_private_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
