//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:24.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/input_port_config.h"
#include "input_port_ptr.h"
#include <cqdaq/input_port_ptr.h>
#include <cqdaq/input_port_notifications_ptr.h>
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class InputPortConfigPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IInputPortConfig>
{
    using SmartPtr = daq::InputPortConfigPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @brief Represents how the input port should handle the packet-enqueued notification.

 */


/*!
 * @ingroup cqdaq_signal_path
 * @addtogroup cqdaq_input_port Input port
 * @{

 */


/*!
 * @brief The configuration component of input ports. Provides access to Input port owners
 * to internal components of the input port.

 */

class InputPortConfigPtr : public GenericInputPortPtr<IInputPortConfig>
{
public:
    using GenericInputPortPtr<IInputPortConfig>::GenericInputPortPtr;
    //using GenericInputPortPtr<IInputPortConfig>::operator=;



    InputPortConfigPtr()
        : GenericInputPortPtr<IInputPortConfig>()

    {
    }

    InputPortConfigPtr(daq::ObjectPtr<IInputPortConfig>&& ptr)
        : GenericInputPortPtr<IInputPortConfig>(std::move(ptr))

    {
    }

    InputPortConfigPtr(const daq::ObjectPtr<IInputPortConfig>& ptr)
        : GenericInputPortPtr<IInputPortConfig>(ptr)

    {
    }

    InputPortConfigPtr(const InputPortConfigPtr& other)
        : GenericInputPortPtr<IInputPortConfig>(other)

    {
    }

    InputPortConfigPtr(InputPortConfigPtr&& other) noexcept
        : GenericInputPortPtr<IInputPortConfig>(std::move(other))

    {
    }
    
    InputPortConfigPtr& operator=(const InputPortConfigPtr& other)
    {
        if (this == &other)
            return *this;

        GenericInputPortPtr<IInputPortConfig>::operator =(other);


        return *this;
    }

    InputPortConfigPtr& operator=(InputPortConfigPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericInputPortPtr<IInputPortConfig>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the input-ports response to the packet enqueued notification.

     */
    void setNotificationMethod(daq::PacketReadyNotification method) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setNotificationMethod(method);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets called when a packet was enqueued in a connection.

     */
    void notifyPacketEnqueued() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->notifyPacketEnqueued();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets called when a packet was enqueued in a connection.

     * The notification is called on the same thread that enqueued the packet.
     */
    void notifyPacketEnqueuedOnThisThread() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->notifyPacketEnqueuedOnThisThread();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Set the object receiving input-port related events and notifications.

     */
    void setListener(const daq::InputPortNotificationsPtr& port) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setListener(port);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Get a custom data attached to the object.

     */
    daq::BaseObjectPtr getCustomData() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr customData;
        auto errCode = this->object->getCustomData(&customData);
        daq::checkErrorInfo(errCode);

        return customData;
    }


    /*!
     * @brief Set a custom data attached to the object.

     */
    void setCustomData(const daq::BaseObjectPtr& customData) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setCustomData(customData);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets requires signal flag of the input port.

     * @param requiresSignal True if the input port requires a signal to be connected; false otherwise.
     * If an input port requires a signal, then the input port must have a signal connected otherwise
     * the owner of the input port (function block) should report an error.
     */
    void setRequiresSignal(daq::Bool requiresSignal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRequiresSignal(requiresSignal);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/input_port_config_ptr.custom.h>)
    #include <cqdaq/input_port_config_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
