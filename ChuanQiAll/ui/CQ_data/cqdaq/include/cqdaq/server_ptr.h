//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:53.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/server.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class ServerPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IServer>
{
    using SmartPtr = daq::ServerPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup structure_servers
 * @addtogroup structure_server Server
 * @{

 */


/*!
 * @brief Represents a server. The server provides access to the cqDAQ device.
 * Depend of the implementation, it can support configuring the device, reading configuration, and data streaming.

 * We do not make the server directly. But through the instance and module manager. For that reason, the server must be uniquely
 * defined with "serverType". The server is than created with the current root device, context and configuration object.
 * Configuration of the server can be done with custom property object.
 * The configuration object is created with the corresponding ServerType object (IServerType::createDefaultConfig method).
 * For example, with a configuration object, we can define connection timeout.
 */

class ServerPtr : public daq::ObjectPtr<IServer>
{
public:
    using daq::ObjectPtr<IServer>::ObjectPtr;
    //using daq::ObjectPtr<IServer>::operator=;



    ServerPtr()
        : daq::ObjectPtr<IServer>()

    {
    }

    ServerPtr(daq::ObjectPtr<IServer>&& ptr)
        : daq::ObjectPtr<IServer>(std::move(ptr))

    {
    }

    ServerPtr(const daq::ObjectPtr<IServer>& ptr)
        : daq::ObjectPtr<IServer>(ptr)

    {
    }

    ServerPtr(const ServerPtr& other)
        : daq::ObjectPtr<IServer>(other)

    {
    }

    ServerPtr(ServerPtr&& other) noexcept
        : daq::ObjectPtr<IServer>(std::move(other))

    {
    }
    
    ServerPtr& operator=(const ServerPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IServer>::operator =(other);


        return *this;
    }

    ServerPtr& operator=(ServerPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IServer>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Stops the server. This is called when we remove the server from the Instance or Instance is closing.

     */
    void stop() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->stop();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/server_ptr.custom.h>)
    #include <cqdaq/server_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
