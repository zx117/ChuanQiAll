//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:36.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/subscription_event_args.h"
#include <coretypes/event_args_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class SubscriptionEventArgsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ISubscriptionEventArgs>
{
    using SmartPtr = daq::SubscriptionEventArgsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ




class SubscriptionEventArgsPtr : public EventArgsPtr<ISubscriptionEventArgs>
{
public:
    using EventArgsPtr<ISubscriptionEventArgs>::EventArgsPtr;
    //using EventArgsPtr<ISubscriptionEventArgs>::operator=;



    SubscriptionEventArgsPtr()
        : EventArgsPtr<ISubscriptionEventArgs>()

    {
    }

    SubscriptionEventArgsPtr(daq::ObjectPtr<ISubscriptionEventArgs>&& ptr)
        : EventArgsPtr<ISubscriptionEventArgs>(std::move(ptr))

    {
    }

    SubscriptionEventArgsPtr(const daq::ObjectPtr<ISubscriptionEventArgs>& ptr)
        : EventArgsPtr<ISubscriptionEventArgs>(ptr)

    {
    }

    SubscriptionEventArgsPtr(const SubscriptionEventArgsPtr& other)
        : EventArgsPtr<ISubscriptionEventArgs>(other)

    {
    }

    SubscriptionEventArgsPtr(SubscriptionEventArgsPtr&& other) noexcept
        : EventArgsPtr<ISubscriptionEventArgs>(std::move(other))

    {
    }
    
    SubscriptionEventArgsPtr& operator=(const SubscriptionEventArgsPtr& other)
    {
        if (this == &other)
            return *this;

        EventArgsPtr<ISubscriptionEventArgs>::operator =(other);


        return *this;
    }

    SubscriptionEventArgsPtr& operator=(SubscriptionEventArgsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        EventArgsPtr<ISubscriptionEventArgs>::operator =(std::move(other));

        return *this;
    }


    
    daq::StringPtr getStreamingConnectionString() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr streamingConnectionString;
        auto errCode = this->object->getStreamingConnectionString(&streamingConnectionString);
        daq::checkErrorInfo(errCode);

        return streamingConnectionString;
    }

    
    daq::SubscriptionEventType getSubscriptionEventType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SubscriptionEventType type;
        auto errCode = this->object->getSubscriptionEventType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }

#if __has_include(<cqdaq/subscription_event_args_ptr.custom.h>)
    #include <cqdaq/subscription_event_args_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
