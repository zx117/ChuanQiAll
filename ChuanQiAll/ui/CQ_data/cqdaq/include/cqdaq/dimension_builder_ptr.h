//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:20.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/dimension_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/dimension_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/unit_ptr.h>
#include <cqdaq/dimension_rule_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class DimensionBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IDimensionBuilder>
{
    using SmartPtr = daq::DimensionBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signals
 * @addtogroup cqdaq_dimension Dimension
 * @{

 */


/*!
 * @brief Configuration component of Dimension objects. Contains setter methods that allow for Dimension
 * parameter configuration, and a `build` method that builds the Dimension.

 */

class DimensionBuilderPtr : public daq::ObjectPtr<IDimensionBuilder>
{
public:
    using daq::ObjectPtr<IDimensionBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IDimensionBuilder>::operator=;



    DimensionBuilderPtr()
        : daq::ObjectPtr<IDimensionBuilder>()

    {
    }

    DimensionBuilderPtr(daq::ObjectPtr<IDimensionBuilder>&& ptr)
        : daq::ObjectPtr<IDimensionBuilder>(std::move(ptr))

    {
    }

    DimensionBuilderPtr(const daq::ObjectPtr<IDimensionBuilder>& ptr)
        : daq::ObjectPtr<IDimensionBuilder>(ptr)

    {
    }

    DimensionBuilderPtr(const DimensionBuilderPtr& other)
        : daq::ObjectPtr<IDimensionBuilder>(other)

    {
    }

    DimensionBuilderPtr(DimensionBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IDimensionBuilder>(std::move(other))

    {
    }
    
    DimensionBuilderPtr& operator=(const DimensionBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IDimensionBuilder>::operator =(other);


        return *this;
    }

    DimensionBuilderPtr& operator=(DimensionBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IDimensionBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Dimension object using the currently set values of the Builder.

     * @returns The built Dimension.
     */
    daq::DimensionPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DimensionPtr dimension;
        auto errCode = this->object->build(&dimension);
        daq::checkErrorInfo(errCode);

        return dimension;
    }


    /*!
     * @brief Sets the name of the dimension.

     * @param name The name of the dimension.
     * The name that best describes the dimension, in example "Frequency" for spectrum data.
     */
    DimensionBuilderPtr setName(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the name of the dimension.

     * @returns The name of the dimension.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the unit of the dimension's labels.

     * @param unit The unit of the dimension.
     */
    DimensionBuilderPtr setUnit(const daq::UnitPtr& unit) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setUnit(unit);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the unit of the dimension's labels.

     * @returns The unit of the dimension.
     */
    daq::UnitPtr getUnit() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->getUnit(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Sets the rule that defines the labels and size of the dimension.

     * @param rule The dimension rule.
     * @throws FrozenException if the dimension object is frozen.
     * The rule takes as input the index of data value in a sample and produces a label associated
     * with that index.
     */
    DimensionBuilderPtr setRule(const daq::DimensionRulePtr& rule) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRule(rule);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the rule that defines the labels and size of the dimension.

     * @returns The dimension rule.
     */
    daq::DimensionRulePtr getRule() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DimensionRulePtr rule;
        auto errCode = this->object->getRule(&rule);
        daq::checkErrorInfo(errCode);

        return rule;
    }

#if __has_include(<cqdaq/dimension_builder_ptr.custom.h>)
    #include <cqdaq/dimension_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_dimension
 * @addtogroup cqdaq_dimension_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
