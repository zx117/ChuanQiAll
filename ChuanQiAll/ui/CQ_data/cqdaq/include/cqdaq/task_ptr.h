//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:06.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/task.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::ITask>
class GenericTaskPtr;

using TaskPtr = daq::GenericTaskPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ITask>
{
    using SmartPtr = daq::GenericTaskPtr<daq::ITask>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_scheduler_components
 * @addtogroup cqdaq_task Task
 * @{

 */


/*!
 *  @brief A packaged callback with possible continuations and dependencies that can
 *  be arranged in a dependency graph (directed acyclic graph). The task is not executed directly but only
 *  when the graph is scheduled for execution and all dependencies have been satisfied.

 */
template <typename InterfaceType>
class GenericTaskPtr : public daq::ObjectPtr<InterfaceType>
{
public:
    using daq::ObjectPtr<InterfaceType>::ObjectPtr;
    //using daq::ObjectPtr<InterfaceType>::operator=;



    GenericTaskPtr()
        : daq::ObjectPtr<InterfaceType>()

    {
    }

    GenericTaskPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : daq::ObjectPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericTaskPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : daq::ObjectPtr<InterfaceType>(ptr)

    {
    }

    GenericTaskPtr(const TaskPtr& other)
        : daq::ObjectPtr<InterfaceType>(other)

    {
    }

    GenericTaskPtr(TaskPtr&& other) noexcept
        : daq::ObjectPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericTaskPtr& operator=(const TaskPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericTaskPtr& operator=(TaskPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the task name.

     * @returns The task name.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the task name that is used in diagnostics.

     * @param name The new task name.
     */
    void setName(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/task_ptr.custom.h>)
    #include <cqdaq/task_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
