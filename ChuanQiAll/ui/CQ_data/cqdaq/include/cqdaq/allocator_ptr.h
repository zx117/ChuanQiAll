//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:19.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/allocator.h"
#include <coretypes/objectptr.h>
#include <cqdaq/data_descriptor_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class AllocatorPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IAllocator>
{
    using SmartPtr = daq::AllocatorPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_utility
 * @addtogroup cqdaq_allocator Allocator
 * @{

 */


/*!
 * @brief An allocator used to allocate memory.

 * The default BB allocator simply uses `malloc`, but the user can implement a custom allocator to
 * override this behavior (perhaps using a memory pool or different allocation strategy). An
 * example/reference implementation is provided which uses Microsoft `mimalloc`.
 */

class AllocatorPtr : public daq::ObjectPtr<IAllocator>
{
public:
    using daq::ObjectPtr<IAllocator>::ObjectPtr;
    //using daq::ObjectPtr<IAllocator>::operator=;



    AllocatorPtr()
        : daq::ObjectPtr<IAllocator>()

    {
    }

    AllocatorPtr(daq::ObjectPtr<IAllocator>&& ptr)
        : daq::ObjectPtr<IAllocator>(std::move(ptr))

    {
    }

    AllocatorPtr(const daq::ObjectPtr<IAllocator>& ptr)
        : daq::ObjectPtr<IAllocator>(ptr)

    {
    }

    AllocatorPtr(const AllocatorPtr& other)
        : daq::ObjectPtr<IAllocator>(other)

    {
    }

    AllocatorPtr(AllocatorPtr&& other) noexcept
        : daq::ObjectPtr<IAllocator>(std::move(other))

    {
    }
    
    AllocatorPtr& operator=(const AllocatorPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IAllocator>::operator =(other);


        return *this;
    }

    AllocatorPtr& operator=(AllocatorPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IAllocator>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Allocates a chunk of memory for a packet.

     * @param descriptor The OPTIONAL data descriptor of the signal for which memory is to be
     *                   allocated. This can provide hints to the allocator. However, allocator
     *                   implementations MUST accept null values.
     * @param bytes The number of bytes to allocate.
     * @param align The alignment requirement of the caller (typically the element size). This
     *              value may be zero if the caller does not need to specify an alignment
     *              requirement.
     * @returns The address of the allocated memory.
     * The implementation MAY set address value to `nullptr` without returning an error code,
     * if the allocator is out of memory. Alternatively, the implementation MAY return an error
     * code in this case.
     */
    void* allocate(const daq::DataDescriptorPtr& descriptor, daq::SizeT bytes, daq::SizeT align) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        void* address;
        auto errCode = this->object->allocate(descriptor, bytes, align, &address);
        daq::checkErrorInfo(errCode);

        return address;
    }


    /*!
     * @brief Releases a chunk of memory allocated by allocate().

     * @param address The address of the allocated memory to release.
     * The implementation MUST ignore calls where @p address is null.
     */
    void free(void* address) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->free(address);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/allocator_ptr.custom.h>)
    #include <cqdaq/allocator_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
