//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:22.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/tags_private.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>
#include <coretypes/list_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class TagsPrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ITagsPrivate>
{
    using SmartPtr = daq::TagsPrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_utility
 * @addtogroup cqdaq_tags Tags private
 * @{

 */


/*!
 * @brief Private interface to component tags. Allows for adding/removing tags.

 * Modifying the tags of a component might have unintended sideffects and should in most cases only be done
 * by the component owner module.
 */

class TagsPrivatePtr : public daq::ObjectPtr<ITagsPrivate>
{
public:
    using daq::ObjectPtr<ITagsPrivate>::ObjectPtr;
    //using daq::ObjectPtr<ITagsPrivate>::operator=;



    TagsPrivatePtr()
        : daq::ObjectPtr<ITagsPrivate>()

    {
    }

    TagsPrivatePtr(daq::ObjectPtr<ITagsPrivate>&& ptr)
        : daq::ObjectPtr<ITagsPrivate>(std::move(ptr))

    {
    }

    TagsPrivatePtr(const daq::ObjectPtr<ITagsPrivate>& ptr)
        : daq::ObjectPtr<ITagsPrivate>(ptr)

    {
    }

    TagsPrivatePtr(const TagsPrivatePtr& other)
        : daq::ObjectPtr<ITagsPrivate>(other)

    {
    }

    TagsPrivatePtr(TagsPrivatePtr&& other) noexcept
        : daq::ObjectPtr<ITagsPrivate>(std::move(other))

    {
    }
    
    TagsPrivatePtr& operator=(const TagsPrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ITagsPrivate>::operator =(other);


        return *this;
    }

    TagsPrivatePtr& operator=(TagsPrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ITagsPrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Adds a new tag to the list.

     * @param name The name of the tag to be added.
     * @returns nullptr if a node with the `name` is already in the list of tags.
     */
    void add(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->add(name);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes a new tag from the list.

     * @param name The name of the tag to be removed.
     * @returns nullptr if a node with the `name` is not in the list of tags.
     */
    void remove(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->remove(name);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Replaces all tags.

     * @param tags The new list of tags.
     */
    void replace(const daq::ListPtr<daq::IString>& tags) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->replace(tags);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/tags_private_ptr.custom.h>)
    #include <cqdaq/tags_private_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
