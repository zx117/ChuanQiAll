//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:07.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/multi_reader.h"
#include <coretypes/span.h>
#include "sample_reader_ptr.h"
#include <cqdaq/sample_reader_ptr.h>
#include <cqdaq/reader_status_ptr.h>
#include <coretypes/ratio_ptr.h>
#include <coretypes/string_ptr.h>
#include <coretypes/function_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class MultiReaderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IMultiReader>
{
    using SmartPtr = daq::MultiReaderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_multi_reader Multi reader
 * @{

 */


/*!
 * @brief Reads multiple Signals at once.

 */

class MultiReaderPtr : public GenericSampleReaderPtr<IMultiReader>
{
public:
    using GenericSampleReaderPtr<IMultiReader>::GenericSampleReaderPtr;
    //using GenericSampleReaderPtr<IMultiReader>::operator=;



    MultiReaderPtr()
        : GenericSampleReaderPtr<IMultiReader>()

    {
    }

    MultiReaderPtr(daq::ObjectPtr<IMultiReader>&& ptr)
        : GenericSampleReaderPtr<IMultiReader>(std::move(ptr))

    {
    }

    MultiReaderPtr(const daq::ObjectPtr<IMultiReader>& ptr)
        : GenericSampleReaderPtr<IMultiReader>(ptr)

    {
    }

    MultiReaderPtr(const MultiReaderPtr& other)
        : GenericSampleReaderPtr<IMultiReader>(other)

    {
    }

    MultiReaderPtr(MultiReaderPtr&& other) noexcept
        : GenericSampleReaderPtr<IMultiReader>(std::move(other))

    {
    }
    
    MultiReaderPtr& operator=(const MultiReaderPtr& other)
    {
        if (this == &other)
            return *this;

        GenericSampleReaderPtr<IMultiReader>::operator =(other);


        return *this;
    }

    MultiReaderPtr& operator=(MultiReaderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericSampleReaderPtr<IMultiReader>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Copies at maximum the next `count` unread samples to the values buffer.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] samples The buffer that the samples will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of samples.
     * This should be a jagged array (array of pointers to arrays) where the size is equal to
     * the Signal count and each Signal buffer is at least `count` size long.
     * E.g: reading the next 5 samples of 3 signals
     * samples
     *  |
     *  ˇ     0  1  2  3  4  5  <-- count
     * [0] = [0, 0, 0, 0, 0, 0]
     * [1] = [0, 0, 0, 0, 0, 0]
     * [2] = [0, 0, 0, 0, 0, 0]
     * @param[in,out] count The maximum amount of samples to be read expressed in commonSampleRate. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * samples are returned. The rest of the buffer is not modified or cleared. In case of different sample rates,
     * the number of read samples may be different for each individual signal.
     * @param timeoutMs The maximum amount of time in milliseconds to wait for the requested amount of samples before returning.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::getReadStatus returns ReadStatus::Event
     * - If the reading process is successful, IReaderStatus::getReadStatu returns ReadStatus::Ok, indicating that IReaderStatus::getValid is true and there is no encountered events
     */
    daq::ReaderStatusPtr read(void* samples, daq::SizeT* count, daq::SizeT timeoutMs = 0) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->read(samples, count, timeoutMs, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief Copies at maximum the next `count` unread samples and clock-stamps to the `samples` and `domain` buffers.
     * The amount actually read is returned through the `count` parameter.

     * @param[in] samples The buffer that the samples will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of samples.
     * This should be a jagged array (array of pointers to arrays) where the size is equal to
     * the Signal count and each Signal buffer is at least `count` size long.
     * E.g: reading the next 5 samples of 3 signals
     * samples
     *  |
     *  ˇ     0  1  2  3  4  5  <-- count
     * [0] = [0, 0, 0, 0, 0, 0]
     * [1] = [0, 0, 0, 0, 0, 0]
     * [2] = [0, 0, 0, 0, 0, 0]
     * @param[in] domain The buffer that the domain values will be copied to.
     * The buffer must be a contiguous memory big enough to receive `count` amount of clock-stamps.
     * This should be a jagged array (array of pointers to arrays) where the size is equal to
     * the Signal count and each Signal buffer is at least `count` size long.
     * E.g: reading the next 5 samples of 3 signals
     * domain
     *  |
     *  ˇ     0  1  2  3  4  5  <-- count
     * [0] = [0, 0, 0, 0, 0, 0]
     * [1] = [0, 0, 0, 0, 0, 0]
     * [2] = [0, 0, 0, 0, 0, 0]
     * @param[in,out] count The maximum amount of samples to be read expressed in commonSampleRate. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * samples are returned. The rest of the buffer is not modified or cleared. In case of different sample rates,
     * the number of read samples may be different for each individual signal.
     * @param timeoutMs The maximum amount of time in milliseconds to wait for the requested amount of samples before returning.
     * @param[out] status: Represents the status of the reader.
     * - If the reader is invalid, IReaderStatus::getValid returns false.
     * - If an event packet was encountered during processing, IReaderStatus::getReadStatus returns ReadStatus::Event
     * - If the reading process is successful, IReaderStatus::getReadStatu returns ReadStatus::Ok, indicating that IReaderStatus::getValid is true and there is no encountered events
     */
    daq::ReaderStatusPtr readWithDomain(void* samples, void* domain, daq::SizeT* count, daq::SizeT timeoutMs = 0) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReaderStatusPtr status;
        auto errCode = this->object->readWithDomain(samples, domain, count, timeoutMs, &status);
        daq::checkErrorInfo(errCode);

        return status;
    }


    /*!
     * @brief Skips the specified amount of samples.

     * @param[in,out] count The maximum amount of samples to be skipped. If the `count` is less than
     * available the parameter value is set to the actual amount and only the available
     * samples are skipped. The rest of the buffer is not modified or cleared.
     */
    void skipSamples(daq::SizeT* count) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->skipSamples(count);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the resolution the reader aligned all the signals to.
     * This is the highest resolution (lowest value) of all the signals to not loose the precision.

     * @returns The aligned resolution used for all read signals.
     */
    daq::RatioPtr getTickResolution() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::RatioPtr resolution;
        auto errCode = this->object->getTickResolution(&resolution);
        daq::checkErrorInfo(errCode);

        return resolution;
    }


    /*!
     * @brief Gets the origin the reader aligned all the signals to.
     * This is usually the earliest (lowest value) from all the signals.

     * @returns The origin all signals are aligned to.
     */
    daq::StringPtr getOrigin() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr origin;
        auto errCode = this->object->getOrigin(&origin);
        daq::checkErrorInfo(errCode);

        return origin;
    }


    /*!
     * @brief Gets the domain value (offset) from the aligned origin at the point the reader starts to provide synchronized samples.

     * @param domainStart The domain point at which the reader managed to synchronize all the signals.
     * @return CQDAQ_SUCCESS if the reader is synchronized,
     *         CQDAQ_IGNORED if the reader is not synchronized.
     */
    void getOffset(void* domainStart) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->getOffset(domainStart);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the synchronization status of the reader

     * @returns True if reader is synchronized, False otherwise.
     * Reader will try to synchronize the data from the signals when `getAvailableCount` or any of the read methods is called.
     */
    daq::Bool getIsSynchronized() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool isSynchronized;
        auto errCode = this->object->getIsSynchronized(&isSynchronized);
        daq::checkErrorInfo(errCode);

        return isSynchronized;
    }


    /*!
     * @brief Gets the user the option to invalidate the reader when the signal descriptor changes.

     * @param callback The callback to call when the descriptor changes or @c nullptr to unset it.
     * The callback takes a value and domain Signal descriptors as a parameters and returns a boolean indicating
     * whether the change is still acceptable. In the case the value or domain descriptor did not change
     * it will be @c nullptr. So either of the descriptors can be @c nullptr but not both.
     * If the callback is not assigned or is set to @c nullptr the reader will just check if the new sample-type
     * is still implicitly convertible to the read type and invalidate itself if that is not the case.
     */
    void setOnDescriptorChanged(const daq::FunctionPtr& callback) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOnDescriptorChanged(callback);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the currently set callback to call when the signal descriptor changes if any.

     * @returns The callback to call when the descriptor changes or @c nullptr if not set.
     */
    daq::FunctionPtr getOnDescriptorChanged() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::FunctionPtr callback;
        auto errCode = this->object->getOnDescriptorChanged(&callback);
        daq::checkErrorInfo(errCode);

        return callback;
    }


    /*!
     * @brief Gets the common sample rate in case input signal have different rates. The value of common sample rate is such
     * that sample rate of any individual signal can be represented as commonSampleRate / Div, where Div is an integer. Unless
     * the required common sample rate is specified in the MultiReader constructor, common sample rate is lowest common multiple
     * of individual signal's sample rates. The number of samples to be read is specified in common sample rate.

     * @returns The domain point at which the reader managed to synchronize all the signals.
     */
    daq::Int getCommonSampleRate() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int commonSampleRate;
        auto errCode = this->object->getCommonSampleRate(&commonSampleRate);
        daq::checkErrorInfo(errCode);

        return commonSampleRate;
    }

#if __has_include(<cqdaq/multi_reader_ptr.custom.h>)
    #include <cqdaq/multi_reader_ptr.custom.h>
#endif
};

/*!
 * @brief Creates a MultiReader with Builder

 * @param builder MultiReader Builder
 */


END_NAMESPACE_CQDAQ
