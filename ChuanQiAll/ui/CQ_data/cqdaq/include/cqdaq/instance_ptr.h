//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:13.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/instance.h"
#include <cqdaq/device.h>
#include <cqdaq/module_manager_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/property_object_ptr.h>
#include <coretypes/dict_ptr.h>
#include <cqdaq/server_type_ptr.h>
#include <cqdaq/server_ptr.h>
#include <coretypes/list_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class InstancePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IInstance>
{
    using SmartPtr = daq::InstancePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_instance Instance
 * @{

 */


/*!
 * @brief The top-level cqDAQ object. It acts as container for the cqDAQ context and the base module manager.

 * It forwards all Device and PropertyObject calls to the current root device, making the calls on the Instance
 * and root device equivalent.
 * On creation, it creates a Client device - a default device implementation that can load any function blocks
 * present in the module manager search path. If the native cqDAQ client-module is loaded, the Client device
 * can connect to any TMS enabled device by using the `addDevice` function. The Client is set as the root device
 * when the instance is created.
 */

class InstancePtr : public GenericDevicePtr<IInstance>
{
public:
    using GenericDevicePtr<IInstance>::GenericDevicePtr;
    //using GenericDevicePtr<IInstance>::operator=;



    InstancePtr()
        : GenericDevicePtr<IInstance>()

    {
    }

    InstancePtr(daq::ObjectPtr<IInstance>&& ptr)
        : GenericDevicePtr<IInstance>(std::move(ptr))

    {
    }

    InstancePtr(const daq::ObjectPtr<IInstance>& ptr)
        : GenericDevicePtr<IInstance>(ptr)

    {
    }

    InstancePtr(const InstancePtr& other)
        : GenericDevicePtr<IInstance>(other)

    {
    }

    InstancePtr(InstancePtr&& other) noexcept
        : GenericDevicePtr<IInstance>(std::move(other))

    {
    }
    
    InstancePtr& operator=(const InstancePtr& other)
    {
        if (this == &other)
            return *this;

        GenericDevicePtr<IInstance>::operator =(other);


        return *this;
    }

    InstancePtr& operator=(InstancePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericDevicePtr<IInstance>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the Module manager.

     * @returns The module manager.
     */
    daq::ModuleManagerPtr getModuleManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ModuleManagerPtr manager;
        auto errCode = this->object->getModuleManager(&manager);
        daq::checkErrorInfo(errCode);

        return manager;
    }


    /*!
     * @brief Gets the current root device.

     * @returns The current root device.
     * All Device calls invoked on the Instance are forwarded to the current root device.
     */
    daq::GenericDevicePtr<> getRootDevice() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::GenericDevicePtr<> rootDevice;
        auto errCode = this->object->getRootDevice(&rootDevice);
        daq::checkErrorInfo(errCode);

        return rootDevice;
    }


    /*!
     * @brief Adds a device with the connection string as root device.

     * @param connectionString The connection string containing the address of the device.
     * @param config A config object to configure a client device. This object can contain properties like max sample rate,
     * port to use for 3rd party communication, number of channels to generate, or other device specific settings. In case
     * of nullptr, a default configuration is used.
     * All Device calls invoked on the Instance are forwarded to the root device. The root device can only be set once.
     */
    void setRootDevice(const daq::StringPtr& connectionString, const daq::PropertyObjectPtr& config = nullptr) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRootDevice(connectionString, config);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Get a dictionary of available server types as <IString, IServerType> pairs

     * @returns The dictionary of available server types.
     */
    daq::DictPtr<daq::IString, daq::IServerType> getAvailableServerTypes() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IServerType> serverTypes;
        auto errCode = this->object->getAvailableServerTypes(&serverTypes);
        daq::checkErrorInfo(errCode);

        return serverTypes;
    }


    /*!
     * @brief Creates and adds a server with the provided serverType and configuration.

     * @param serverTypeId Type id of the server. Can be obtained from its corresponding Server type object.
     * @param serverConfig Config of the server. Can be created from its corresponding Server type object.
     * In case of a null value, it will use the default configuration.
     * @returns The added created server.
     */
    daq::ServerPtr addServer(const daq::StringPtr& serverTypeId, const daq::PropertyObjectPtr& serverConfig) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ServerPtr server;
        auto errCode = this->object->addServer(serverTypeId, serverConfig, &server);
        daq::checkErrorInfo(errCode);

        return server;
    }


    /*!
     * @brief Creates and adds streaming and "cqDAQ OpcUa" servers with default configurations.

     * @returns List of added created servers.
     */
    daq::ListPtr<daq::IServer> addStandardServers() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IServer> servers;
        auto errCode = this->object->addStandardServers(&servers);
        daq::checkErrorInfo(errCode);

        return servers;
    }


    /*!
     * @brief Removes the server provided as argument.

     * @param server The server to be removed.
     */
    void removeServer(const daq::ServerPtr& server) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeServer(server);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Get list of added servers.

     * @returns List of added servers.
     */
    daq::ListPtr<daq::IServer> getServers() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IServer> servers;
        auto errCode = this->object->getServers(&servers);
        daq::checkErrorInfo(errCode);

        return servers;
    }

#if __has_include(<cqdaq/instance_ptr.custom.h>)
    #include <cqdaq/instance_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
