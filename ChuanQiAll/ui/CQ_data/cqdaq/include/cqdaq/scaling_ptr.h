//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:25.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/scaling.h"
#include <coretypes/objectptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ScalingPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IScaling>
{
    using SmartPtr = daq::ScalingPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_scaling Scaling
 * @{

 */


/*!
 * @brief Enumeration of available scaling types

 */


/*!
 * @brief Signal descriptor field that defines a scaling transformation, which should be
 * applied to data carried by the signal's packets when read.

 * Each scaling specifies its `scalingType` and parses the parameters accordingly. The parameters
 * are to be interpreted and used as specified by each specific scaling type as detailed below.
 * Additionally, each Scaling object states is input and output data types. The inputDataType
 * describes the raw data type of the signal value (that data is input into the scaling scaling),
 * while the outputDataType should match the sample type of the signal's value descriptor.
 * Scaling objects implement the Struct methods internally and are Core type `ctStruct`.
 * @subsection scaling_types Scaling types
 * @subsubsection scaling_types_linear Linear scaling
 * Linear scaling parameters must have two entries:
 *   - Scale: coefficient by which the input data is to be multiplied
 *   - Offset: a constant that is added to the <em>scale * value</em> multiplication result
 * The linear scaling output is calculated as follows: <em>inputValue * scale + offset</em>
 */

class ScalingPtr : public daq::ObjectPtr<IScaling>
{
public:
    using daq::ObjectPtr<IScaling>::ObjectPtr;
    //using daq::ObjectPtr<IScaling>::operator=;



    ScalingPtr()
        : daq::ObjectPtr<IScaling>()

    {
    }

    ScalingPtr(daq::ObjectPtr<IScaling>&& ptr)
        : daq::ObjectPtr<IScaling>(std::move(ptr))

    {
    }

    ScalingPtr(const daq::ObjectPtr<IScaling>& ptr)
        : daq::ObjectPtr<IScaling>(ptr)

    {
    }

    ScalingPtr(const ScalingPtr& other)
        : daq::ObjectPtr<IScaling>(other)

    {
    }

    ScalingPtr(ScalingPtr&& other) noexcept
        : daq::ObjectPtr<IScaling>(std::move(other))

    {
    }
    
    ScalingPtr& operator=(const ScalingPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IScaling>::operator =(other);


        return *this;
    }

    ScalingPtr& operator=(ScalingPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IScaling>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the scaling's input data type.

     * @returns The input data type
     * The input data type corresponds to the raw values passed through the signal path in
     * data packets.
     */
    daq::SampleType getInputSampleType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType type;
        auto errCode = this->object->getInputSampleType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the scaling's output data type.

     * @returns The output data type
     * The output data type corresponds to the sample type specified in the value descriptor of
     * a signal, and is the type in which said signal's data should be read in after having
     * the scaling applied to it.
     */
    daq::ScaledSampleType getOutputSampleType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScaledSampleType type;
        auto errCode = this->object->getOutputSampleType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the type of the scaling that determines how the scaling parameters should be interpreted
     * and how the scaling should be calculated.

     * @returns The type of the scaling.
     */
    daq::ScalingType getType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ScalingType type;
        auto errCode = this->object->getType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the dictionary of parameters that are used to calculate the scaling in conjunction with the input data.

     * @returns The dictionary of parameters.
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getParameters() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> parameters;
        auto errCode = this->object->getParameters(&parameters);
        daq::checkErrorInfo(errCode);

        return parameters;
    }

#if __has_include(<cqdaq/scaling_ptr.custom.h>)
    #include <cqdaq/scaling_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_scaling
 * @addtogroup cqdaq_scaling_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
