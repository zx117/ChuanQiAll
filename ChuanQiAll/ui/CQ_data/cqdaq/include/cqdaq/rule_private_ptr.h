//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:19.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/rule_private.h"
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class RulePrivatePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IRulePrivate>
{
    using SmartPtr = daq::RulePrivatePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup cqdaq_data_rule Rule private
 * @{

 */


/*!
 * @brief Private rule interface implemented by Dimension rules, Data rules and Scaling. Allows for parameter verification.

 */

class RulePrivatePtr : public daq::ObjectPtr<IRulePrivate>
{
public:
    using daq::ObjectPtr<IRulePrivate>::ObjectPtr;
    //using daq::ObjectPtr<IRulePrivate>::operator=;



    RulePrivatePtr()
        : daq::ObjectPtr<IRulePrivate>()

    {
    }

    RulePrivatePtr(daq::ObjectPtr<IRulePrivate>&& ptr)
        : daq::ObjectPtr<IRulePrivate>(std::move(ptr))

    {
    }

    RulePrivatePtr(const daq::ObjectPtr<IRulePrivate>& ptr)
        : daq::ObjectPtr<IRulePrivate>(ptr)

    {
    }

    RulePrivatePtr(const RulePrivatePtr& other)
        : daq::ObjectPtr<IRulePrivate>(other)

    {
    }

    RulePrivatePtr(RulePrivatePtr&& other) noexcept
        : daq::ObjectPtr<IRulePrivate>(std::move(other))

    {
    }
    
    RulePrivatePtr& operator=(const RulePrivatePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IRulePrivate>::operator =(other);


        return *this;
    }

    RulePrivatePtr& operator=(RulePrivatePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IRulePrivate>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Checks whether the parameters are valid and returns an appropriate error code if not.

     * @throws CqdaqErrException If the parameters are invalid for the specific rule type.
     */
    void verifyParameters() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->verifyParameters();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/rule_private_ptr.custom.h>)
    #include <cqdaq/rule_private_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
