//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:36.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/channel.h"
#include "function_block_ptr.h"
#include <cqdaq/function_block_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ChannelPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IChannel>
{
    using SmartPtr = daq::ChannelPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_function_blocks
 * @addtogroup cqdaq_channel Channel
 * @{

 */


/*!
 * @brief Channels represent physical sensors of cqDAQ devices. Internally
 * they are standard function blocks with an additional option to provide a list of
 * tags.

 */

class ChannelPtr : public GenericFunctionBlockPtr<IChannel>
{
public:
    using GenericFunctionBlockPtr<IChannel>::GenericFunctionBlockPtr;
    //using GenericFunctionBlockPtr<IChannel>::operator=;



    ChannelPtr()
        : GenericFunctionBlockPtr<IChannel>()

    {
    }

    ChannelPtr(daq::ObjectPtr<IChannel>&& ptr)
        : GenericFunctionBlockPtr<IChannel>(std::move(ptr))

    {
    }

    ChannelPtr(const daq::ObjectPtr<IChannel>& ptr)
        : GenericFunctionBlockPtr<IChannel>(ptr)

    {
    }

    ChannelPtr(const ChannelPtr& other)
        : GenericFunctionBlockPtr<IChannel>(other)

    {
    }

    ChannelPtr(ChannelPtr&& other) noexcept
        : GenericFunctionBlockPtr<IChannel>(std::move(other))

    {
    }
    
    ChannelPtr& operator=(const ChannelPtr& other)
    {
        if (this == &other)
            return *this;

        GenericFunctionBlockPtr<IChannel>::operator =(other);


        return *this;
    }

    ChannelPtr& operator=(ChannelPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericFunctionBlockPtr<IChannel>::operator =(std::move(other));

        return *this;
    }




#if __has_include(<cqdaq/channel_ptr.custom.h>)
    #include <cqdaq/channel_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
