//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:57.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/context_internal.h"
#include <coretypes/objectptr.h>
#include <cqdaq/module_manager_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class ContextInternalPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IContextInternal>
{
    using SmartPtr = daq::ContextInternalPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_utility
 * @addtogroup cqdaq_context Context
 * @{

 */


/*!
 * @brief Internal Context interface used for transferring the Module Manager reference to a new owner.

 */

class ContextInternalPtr : public daq::ObjectPtr<IContextInternal>
{
public:
    using daq::ObjectPtr<IContextInternal>::ObjectPtr;
    //using daq::ObjectPtr<IContextInternal>::operator=;



    ContextInternalPtr()
        : daq::ObjectPtr<IContextInternal>()

    {
    }

    ContextInternalPtr(daq::ObjectPtr<IContextInternal>&& ptr)
        : daq::ObjectPtr<IContextInternal>(std::move(ptr))

    {
    }

    ContextInternalPtr(const daq::ObjectPtr<IContextInternal>& ptr)
        : daq::ObjectPtr<IContextInternal>(ptr)

    {
    }

    ContextInternalPtr(const ContextInternalPtr& other)
        : daq::ObjectPtr<IContextInternal>(other)

    {
    }

    ContextInternalPtr(ContextInternalPtr&& other) noexcept
        : daq::ObjectPtr<IContextInternal>(std::move(other))

    {
    }
    
    ContextInternalPtr& operator=(const ContextInternalPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IContextInternal>::operator =(other);


        return *this;
    }

    ContextInternalPtr& operator=(ContextInternalPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IContextInternal>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the Module Manager. Moves the strong reference to the manager to the first
     * caller and retains a weak reference internally.

     * @returns The module manager.
     * Returns a nullptr on subsequent invocations, and if the manager is not assigned.
     */
    daq::ModuleManagerPtr moveModuleManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ModuleManagerPtr manager;
        auto errCode = this->object->moveModuleManager(&manager);
        daq::checkErrorInfo(errCode);

        return manager;
    }

#if __has_include(<cqdaq/context_internal_ptr.custom.h>)
    #include <cqdaq/context_internal_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
