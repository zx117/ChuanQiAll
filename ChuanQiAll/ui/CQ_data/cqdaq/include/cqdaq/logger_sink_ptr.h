//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:58.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger_sink.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class LoggerSinkPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILoggerSink>
{
    using SmartPtr = daq::LoggerSinkPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_logger
 * @{

 */


/*!
 * @brief Enumeration of available log severity levels. `Trace` is the lowest level.
 * `Critical` is the highest level.

 */


/*!
 * @}
 */


/*!
 * @ingroup cqdaq_logger
 * @addtogroup cqdaq_logger_sink Logger sink
 * @{

 */


/*!
 * @brief Represents the object that actually writes the log messages to the target.
 * Each Logger Sink is responsible for only single target: file, console etc.

 * Logger Sink allows to set up a threshold log severity level, so the messages with lower level
 * will not be written to the target.
 * Additionally, it provides the ability to customize format for messages written to the target,
 * see `setPattern` method.
 */

class LoggerSinkPtr : public daq::ObjectPtr<ILoggerSink>
{
public:
    using daq::ObjectPtr<ILoggerSink>::ObjectPtr;
    //using daq::ObjectPtr<ILoggerSink>::operator=;



    LoggerSinkPtr()
        : daq::ObjectPtr<ILoggerSink>()

    {
    }

    LoggerSinkPtr(daq::ObjectPtr<ILoggerSink>&& ptr)
        : daq::ObjectPtr<ILoggerSink>(std::move(ptr))

    {
    }

    LoggerSinkPtr(const daq::ObjectPtr<ILoggerSink>& ptr)
        : daq::ObjectPtr<ILoggerSink>(ptr)

    {
    }

    LoggerSinkPtr(const LoggerSinkPtr& other)
        : daq::ObjectPtr<ILoggerSink>(other)

    {
    }

    LoggerSinkPtr(LoggerSinkPtr&& other) noexcept
        : daq::ObjectPtr<ILoggerSink>(std::move(other))

    {
    }
    
    LoggerSinkPtr& operator=(const LoggerSinkPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILoggerSink>::operator =(other);


        return *this;
    }

    LoggerSinkPtr& operator=(LoggerSinkPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILoggerSink>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the minimal severity level of messages to be written to the target.

     * @param level The log severity level of the sink.
     */
    void setLevel(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setLevel(level);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the minimal severity level of messages to be written to the target.

     * @returns The log severity level of the sink.
     */
    daq::LogLevel getLevel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LogLevel level;
        auto errCode = this->object->getLevel(&level);
        daq::checkErrorInfo(errCode);

        return level;
    }


    /*!
     * @brief Checks whether the messages with given log severity level will be written to the target or not.

     * @param level The severity level of messages.
     * @returns True if the messages with @p level will be written to the target; false otherwise.
     */
    daq::Bool shouldLog(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool willLog;
        auto errCode = this->object->shouldLog(level, &willLog);
        daq::checkErrorInfo(errCode);

        return willLog;
    }


    /*!
     * @brief Sets the custom formatter pattern for the sink.

     * @param pattern The formatter pattern string.
     */
    void setPattern(const daq::StringPtr& pattern) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPattern(pattern);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Triggers writing out the messages from temporary buffers to the target.

     */
    void flush() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->flush();
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/logger_sink_ptr.custom.h>)
    #include <cqdaq/logger_sink_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
