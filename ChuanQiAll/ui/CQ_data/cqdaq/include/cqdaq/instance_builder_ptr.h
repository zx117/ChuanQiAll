//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:14.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/instance_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/instance_ptr.h>
#include <cqdaq/config_provider_ptr.h>
#include <cqdaq/context_ptr.h>
#include <cqdaq/logger_ptr.h>
#include <coretypes/string_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/number_ptr.h>
#include <cqdaq/logger_sink_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/module_manager_ptr.h>
#include <cqdaq/scheduler_ptr.h>
#include <coreobjects/property_object_ptr.h>
#include <cqdaq/device_info_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class InstanceBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IInstanceBuilder>
{
    using SmartPtr = daq::InstanceBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_devices
 * @addtogroup cqdaq_instance InstanceBuilder
 * @{

 */


/*!
 * @brief Builder component of Instance objects. Contains setter methods to configure the Instance parameters, such as Context (Logger, Scheduler, ModuleManager) and RootDevice.
 * Contains a  `build` method that builds the Instance object.

 * The InstanceBuilder provides a fluent interface for setting various configuration options for an Instance
 * object before its creation. It allows customization of the logger, module manager, scheduler and root device.
 * Once configured, calling the `build` method returns a fully initialized Instance object with the specified settings.
 * @subsection Configuration Methods:
 * The InstanceBuilder provides the following configuration methods:
 * - **Logger:** The custom Logger for the Instance. This logger will be used for logging messages related to the Instance and its components.
 * If a custom logger is set, the `Logger sink` will be ignored since it is only used with the default Instance logger.
 * If custom logger was not set, builder will generate Instance with default logger.
 * - **Global log level:** The Logger global log level for the Instance. All log messages with a severity
 * level equal to or higher than the specified level will be processed. Default log level is LogLevel::Default
 * - **Component log level:** The Logger level for a specific component of the Instance. Log messages related to
 * that component will be processed according to the specified log level. By default, each component uses the global log level.
 * - **Logger sink:** The logger sink to the default Instance logger. This sink will be responsible for processing log messages,
 * such as writing them to a file or sending them to a remote server. If `Logger` has been set, configuring of the 'Logger sink' has no effect in building Instance.
 * If logger sinks has not been configure, the Instance uses 'default sinks'.
 * - **Module manager:** The custom ModuleManager for the Instance. When configured, the default module manager path will be ignored.
 * If module manager has not configured, the Instance uses built in manager
 * - **Module path:** The path for the default ModuleManager of the Instance. If a custom module manager has not been set,
 * this path will be used to load modules. Default module path is empty string
 * - **Scheduler:** The custom scheduler for the Instance. If set, the number of worker threads will be ignored.
 * If scheduler has not been configured, the Instance uses default schduler.
 * - **Scheduler worker num:** The number of worker threads in the scheduler of the Instance. if a scheduler has not been set and worker num is 0,
 * which considers as maximum number of concurrent threads.
 * - **Default root device local ID:** The local id of the default client root device. Has no effect if `Root device` has been congigured.
 * - **Default root device info:** The information of default root device of the Instance such as serial number. Has no effect if `Root device` has been congigured.
 * - **Root device:** The connection string of a device that replaces the default cqDAQ root device (virtual client).
 * When the instance is created a connection to the device with the given connection string will be established, and the device will be placed at the root of the component tree structure.
 * When configured, the `Default root device local ID` and `Default root device info` will be ignored.
 * - **Sink log level:** The sink logger level of the default Instance logger. This level is ignored if a custom logger has been configured.
 * - **Config provider:** The config provider is expanding the local options of instance builder from json file or command lines.
 * If value was set before, provider will override this with new one.
 * - **Module options:** Local options dictionary of instance builder has `modules` key which contains custom values for modules.
 * By default this dictionary is empty, but can be populated from json file, env variables or command line arguments.
 */

class InstanceBuilderPtr : public daq::ObjectPtr<IInstanceBuilder>
{
public:
    using daq::ObjectPtr<IInstanceBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IInstanceBuilder>::operator=;



    InstanceBuilderPtr()
        : daq::ObjectPtr<IInstanceBuilder>()

    {
    }

    InstanceBuilderPtr(daq::ObjectPtr<IInstanceBuilder>&& ptr)
        : daq::ObjectPtr<IInstanceBuilder>(std::move(ptr))

    {
    }

    InstanceBuilderPtr(const daq::ObjectPtr<IInstanceBuilder>& ptr)
        : daq::ObjectPtr<IInstanceBuilder>(ptr)

    {
    }

    InstanceBuilderPtr(const InstanceBuilderPtr& other)
        : daq::ObjectPtr<IInstanceBuilder>(other)

    {
    }

    InstanceBuilderPtr(InstanceBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IInstanceBuilder>(std::move(other))

    {
    }
    
    InstanceBuilderPtr& operator=(const InstanceBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IInstanceBuilder>::operator =(other);


        return *this;
    }

    InstanceBuilderPtr& operator=(InstanceBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IInstanceBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns an Instance object using the currently set values of the Builder.

     * @returns The built Instance.
     */
    daq::InstancePtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::InstancePtr instance;
        auto errCode = this->object->build(&instance);
        daq::checkErrorInfo(errCode);

        return instance;
    }


    /*!
     * @brief Populates internal options dictionary with values from set config provider

     * @param sink The configuration provider
     */
    InstanceBuilderPtr addConfigProvider(const daq::ConfigProviderPtr& configProvider) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addConfigProvider(configProvider);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Sets the Context object of the instance. This overwrites other context related
     * settings such as logger, scheduler and module manager settings.

     * @param context The Context object for instance.
     */
    InstanceBuilderPtr setContext(const daq::ContextPtr& context) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setContext(context);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Returns a context object of the instance.

     * @returns The Context object of the instance.
     */
    daq::ContextPtr getContext() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ContextPtr context;
        auto errCode = this->object->getContext(&context);
        daq::checkErrorInfo(errCode);

        return context;
    }


    /*!
     * @brief Sets the custom Logger for the Instance. This logger will be used for logging messages related to the Instance and its components. 
     * When configured, the `Logger sink` will be ignored, as it is in use only with the default Instance logger.

     * @param logger The custom Logger of Instance
     */
    InstanceBuilderPtr setLogger(const daq::LoggerPtr& logger) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setLogger(logger);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Logger of the Instance. Returns nullptr if custom logger has not been set

     * @returns The Logger of Instance
     */
    daq::LoggerPtr getLogger() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LoggerPtr logger;
        auto errCode = this->object->getLogger(&logger);
        daq::checkErrorInfo(errCode);

        return logger;
    }


    /*!
     * @brief Sets the Logger global log level for the Instance. All log messages with a severity
     * level equal to or higher than the specified level will be processed.

     * @param logLevel The Logger global level of Instance
     */
    InstanceBuilderPtr setGlobalLogLevel(daq::LogLevel logLevel) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setGlobalLogLevel(logLevel);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the default Logger global level of Instance

     * @returns The Logger global level of Instance. Returns LogLevel::Default, If global log level has not been set
     */
    daq::LogLevel getGlobalLogLevel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LogLevel logLevel;
        auto errCode = this->object->getGlobalLogLevel(&logLevel);
        daq::checkErrorInfo(errCode);

        return logLevel;
    }


    /*!
     * @brief Sets The Logger level for a specific component of the Instance. Log messages related to
     * that component will be processed according to the specified log level.

     * @param component The name of Instance component
     * @param logLevel The log level of Instance component
     */
    InstanceBuilderPtr setComponentLogLevel(const daq::StringPtr& component, daq::LogLevel logLevel) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setComponentLogLevel(component, logLevel);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the dictionary of component names and log level which will be added to logger components

     * @returns The dictionary of component names and log level
     */
    daq::DictPtr<daq::IString, daq::INumber> getComponentsLogLevel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::INumber> components;
        auto errCode = this->object->getComponentsLogLevel(&components);
        daq::checkErrorInfo(errCode);

        return components;
    }


    /*!
     * @brief Adds the logger sink of the default Instance logger. If Logger has been set, configuring of the Logger sink has no effect in building Instance.

     * @param sink The logger sink of the default Instance logger
     */
    InstanceBuilderPtr addLoggerSink(const daq::LoggerSinkPtr& sink) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addLoggerSink(sink);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Sets the sink logger level of the default Instance logger. If Logger has been set, configuring of the Logger sink has no effect in building Instance.

     * @param sink The sink logger of the default Instance logger
     * @param logLevel The sink logger level of the default Instance logger
     */
    InstanceBuilderPtr setSinkLogLevel(const daq::LoggerSinkPtr& sink, daq::LogLevel logLevel) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSinkLogLevel(sink, logLevel);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list of logger sinks for the default Instance logger.

     * @returns The list of logger sinks of the default Instance logger
     */
    daq::ListPtr<daq::ILoggerSink> getLoggerSinks() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::ILoggerSink> sinks;
        auto errCode = this->object->getLoggerSinks(&sinks);
        daq::checkErrorInfo(errCode);

        return sinks;
    }


    /*!
     * @brief Sets the path for the default ModuleManager of the Instance. If Module manager has been set, configuring of Module path has no effect in building Instance.

     * @param path The path for the default ModuleManager of Instance
     */
    InstanceBuilderPtr setModulePath(const daq::StringPtr& path) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setModulePath(path);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the path for the default ModuleManager of Instance.

     * @returns The path for the default ModuleManager of Instance. Returns empty string, If module path has not been set
     */
    daq::StringPtr getModulePath() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr path;
        auto errCode = this->object->getModulePath(&path);
        daq::checkErrorInfo(errCode);

        return path;
    }


    /*!
     * @brief Add the path for the default ModuleManager of the Instance. If Module manager has been set, configuring of Module path has no effect in building Instance.

     * @param path The path for the default ModuleManager of Instance
     */
    InstanceBuilderPtr addModulePath(const daq::StringPtr& path) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addModulePath(path);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Get the list of paths for the default ModuleManager of the Instance. If Module manager has been set, configuring of Module path has no effect in building Instance.

     * @returns The paths for the default ModuleManager of Instance
     */
    daq::ListPtr<daq::IString> getModulePathsList() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IString> paths;
        auto errCode = this->object->getModulePathsList(&paths);
        daq::checkErrorInfo(errCode);

        return paths;
    }


    /*!
     * @brief Sets The custom ModuleManager for the Instance.

     * @param moduleManager The custom ModuleManager of Instance
     */
    InstanceBuilderPtr setModuleManager(const daq::ModuleManagerPtr& moduleManager) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setModuleManager(moduleManager);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the custom ModuleManager of Instance

     * @returns The ModuleManager of Instance. Returns nullptr, if custom ModuleManager has not been set
     */
    daq::ModuleManagerPtr getModuleManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ModuleManagerPtr moduleManager;
        auto errCode = this->object->getModuleManager(&moduleManager);
        daq::checkErrorInfo(errCode);

        return moduleManager;
    }


    /*!
     * @brief Sets the number of worker threads in the scheduler of the Instance. If Scheduler has been set, configuring of Scheduler worker num has no effect in building Instance.

     * @param numWorkers The amount of worker threads in the scheduler of Instance. If @c is 0, then the amount of workers is the maximum number of concurrent threads supported by the implementation.
     */
    InstanceBuilderPtr setSchedulerWorkerNum(daq::SizeT numWorkers) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSchedulerWorkerNum(numWorkers);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the amount of worker threads in the scheduler of Instance.

     * @returns The amount of worker threads in the scheduler of Instance. Returns 0, if worker num has not been set
     */
    daq::SizeT getSchedulerWorkerNum() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SizeT numWorkers;
        auto errCode = this->object->getSchedulerWorkerNum(&numWorkers);
        daq::checkErrorInfo(errCode);

        return numWorkers;
    }


    /*!
     * @brief Sets the custom scheduler of Instance

     * @param moduleManager The custom scheduler of Instance
     */
    InstanceBuilderPtr setScheduler(const daq::SchedulerPtr& scheduler) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setScheduler(scheduler);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the custom scheduler of Instance

     * @param[out] moduleManager The custom scheduler of Instance. Returns nullptr, if custom Scheduler has not been set.
     */
    daq::SchedulerPtr getScheduler() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SchedulerPtr scheduler;
        auto errCode = this->object->getScheduler(&scheduler);
        daq::checkErrorInfo(errCode);

        return scheduler;
    }


    /*!
     * @brief Sets the local id for default device. Has no effect if `Root device` has been congigured.

     * @param localId The default root device local id
     */
    InstanceBuilderPtr setDefaultRootDeviceLocalId(const daq::StringPtr& localId) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDefaultRootDeviceLocalId(localId);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the default root device local id

     * @returns The default root device local id. Returns empty string id default root device local is has not been set.
     */
    daq::StringPtr getDefaultRootDeviceLocalId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr localId;
        auto errCode = this->object->getDefaultRootDeviceLocalId(&localId);
        daq::checkErrorInfo(errCode);

        return localId;
    }


    /*!
     * @brief Sets the connection string for a device that replaces the default cqDAQ root device. 
    * When the instance is created, a connection to the device with the given connection string will be established, 
    * and the device will be placed at the root of the component tree structure.

     * @param connectionString The connection string for the root device of the Instance.
     * @param config A config object to configure a client device. This object can contain properties like max sample rate,
    * port to use for 3rd party communication, number of channels to generate, or other device specific settings. In case
    * of nullptr, a default configuration is used.
     */
    InstanceBuilderPtr setRootDevice(const daq::StringPtr& connectionString, const daq::PropertyObjectPtr& config = nullptr) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRootDevice(connectionString, config);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the connection string for the default root device of Instance.

     * @param[out] rootDevice The connection string for the root device of Instance. Returns nullptr, if root device connection string has not been set.
     */
    daq::StringPtr getRootDevice() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr connectionString;
        auto errCode = this->object->getRootDevice(&connectionString);
        daq::checkErrorInfo(errCode);

        return connectionString;
    }


    /*!
     * @brief Gets the configuration property object for the default root device of Instance.

     * @returns The configuraiton property object for the root device of Instance. Returns nullptr, for the default     * configuration property object.
     */
    daq::PropertyObjectPtr getRootDeviceConfig() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyObjectPtr config;
        auto errCode = this->object->getRootDeviceConfig(&config);
        daq::checkErrorInfo(errCode);

        return config;
    }


    /*!
     * @brief Sets the default device info of Instance. If device info has been set, method getInfo of Instance will return set device info if Root Device has not been set

     * @param deviceInfo The device info of the default device of Instance
     */
    InstanceBuilderPtr setDefaultRootDeviceInfo(const daq::DeviceInfoPtr& deviceInfo) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDefaultRootDeviceInfo(deviceInfo);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the default device info of Instance

     * @param defaultDevice The default device info of Instance. Returns nullptr, if default device info has not been set.
     */
    daq::DeviceInfoPtr getDefaultRootDeviceInfo() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DeviceInfoPtr deviceInfo;
        auto errCode = this->object->getDefaultRootDeviceInfo(&deviceInfo);
        daq::checkErrorInfo(errCode);

        return deviceInfo;
    }


    /*!
     * @brief Gets the dictionary of instance options

     * @returns The dictionary of instance options
     */
    daq::DictPtr<daq::IString, daq::IBaseObject> getOptions() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IBaseObject> options;
        auto errCode = this->object->getOptions(&options);
        daq::checkErrorInfo(errCode);

        return options;
    }


    /*!
     * @brief Allows enabling or disabling standard configuration providers, including JsonConfigProvider, based on the specified flag.

     * @param flag Boolean flag indicating whether to enable (true) or disable (false) standard config providers.
     */
    InstanceBuilderPtr enableStandardProviders(daq::Bool flag) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->enableStandardProviders(flag);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }

#if __has_include(<cqdaq/instance_builder_ptr.custom.h>)
    #include <cqdaq/instance_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup cqdaq_instance
 * @addtogroup cqdaq_instance_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
