//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:23.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/signal_config.h"
#include "signal_ptr.h"
#include <cqdaq/signal_ptr.h>
#include <cqdaq/data_descriptor_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/packet_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::ISignalConfig>
class GenericSignalConfigPtr;

using SignalConfigPtr = daq::GenericSignalConfigPtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ISignalConfig>
{
    using SmartPtr = daq::GenericSignalConfigPtr<daq::ISignalConfig>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_signals
 * @addtogroup cqdaq_signal Signal
 * @{

 */


/*!
 * @brief The configuration component of a Signal. Allows for configuration of its properties,
 * managing its streaming sources, and sending packets through its connections.

 * The Signal config is most often accessible only to the devices or function blocks that own
 * the signal. They react on property, or input signal changes to modify a signal's data descriptor,
 * and send processed/acquired data down its signal path.
 */
template <typename InterfaceType>
class GenericSignalConfigPtr : public GenericSignalPtr<InterfaceType>
{
public:
    using GenericSignalPtr<InterfaceType>::GenericSignalPtr;
    //using GenericSignalPtr<InterfaceType>::operator=;



    GenericSignalConfigPtr()
        : GenericSignalPtr<InterfaceType>()

    {
    }

    GenericSignalConfigPtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : GenericSignalPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericSignalConfigPtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : GenericSignalPtr<InterfaceType>(ptr)

    {
    }

    GenericSignalConfigPtr(const SignalConfigPtr& other)
        : GenericSignalPtr<InterfaceType>(other)

    {
    }

    GenericSignalConfigPtr(SignalConfigPtr&& other) noexcept
        : GenericSignalPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericSignalConfigPtr& operator=(const SignalConfigPtr& other)
    {
        if (this == &other)
            return *this;

        GenericSignalPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericSignalConfigPtr& operator=(SignalConfigPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericSignalPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the data descriptor.

     * @param descriptor The data descriptor.
     * Setting the data descriptor triggers a Descriptor changed event packet to be sent to
     * all connections of the signal. If the signal is a domain signal of another, that signal
     * also sends a Descriptor changed event to all its connections.
     */
    void setDescriptor(const daq::DataDescriptorPtr& descriptor) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDescriptor(descriptor);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the domain signal reference.

     * @param signal The domain signal.
     * Setting a new domain signal triggers a Descriptor changed event packet to be sent to
     * all connections of the signal.
     */
    void setDomainSignal(const daq::GenericSignalPtr<daq::ISignal>& cq_signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDomainSignal(cq_signal);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the list of related signals.

     * @param signals The list of related signals.
     */
    void setRelatedSignals(const daq::ListPtr<daq::ISignal>& cq_signals) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRelatedSignals(cq_signals);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Adds a related signal to the list of related signals.

     * @param signal The signal to be added.
     * @throws DuplicateItemException if the signal is already present in the list.
     */
    void addRelatedSignal(const daq::GenericSignalPtr<daq::ISignal>& cq_signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addRelatedSignal(cq_signal);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes a signal from the list of related signal.

     * @param signal The signal to be removed.
     * @throws NotFoundException if the signal is not part of the list.
     */
    void removeRelatedSignal(const daq::GenericSignalPtr<daq::ISignal>& cq_signal) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeRelatedSignal(cq_signal);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Clears the list of related signals.

     */
    void clearRelatedSignals() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->clearRelatedSignals();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sends a packet through all connections of the signal.

     * @param packet The packet to be sent.
     */
    void sendPacket(const daq::PacketPtr& packet) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->sendPacket(packet);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/signal_config_ptr.custom.h>)
    #include <cqdaq/signal_config_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
