//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:22.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/tags.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class TagsPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ITags>
{
    using SmartPtr = daq::TagsPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_utility
 * @addtogroup cqdaq_tags Tags
 * @{

 */


/*!
 * @brief List of string tags. Provides helpers to get and search the list of tags.

 * Tags provide a view into an underlying list of tags. The list can be retrieved via
 * `getList`, and inspected through `contains` and `query`.
 * To manipulate the list of tags, the add/remove tag functions can be used. The Tags
 * object can only be modified if the object is not locked by the owning Component.
 */

class TagsPtr : public daq::ObjectPtr<ITags>
{
public:
    using daq::ObjectPtr<ITags>::ObjectPtr;
    //using daq::ObjectPtr<ITags>::operator=;



    TagsPtr()
        : daq::ObjectPtr<ITags>()

    {
    }

    TagsPtr(daq::ObjectPtr<ITags>&& ptr)
        : daq::ObjectPtr<ITags>(std::move(ptr))

    {
    }

    TagsPtr(const daq::ObjectPtr<ITags>& ptr)
        : daq::ObjectPtr<ITags>(ptr)

    {
    }

    TagsPtr(const TagsPtr& other)
        : daq::ObjectPtr<ITags>(other)

    {
    }

    TagsPtr(TagsPtr&& other) noexcept
        : daq::ObjectPtr<ITags>(std::move(other))

    {
    }
    
    TagsPtr& operator=(const TagsPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ITags>::operator =(other);


        return *this;
    }

    TagsPtr& operator=(TagsPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ITags>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the list of all tags in the list.

     * @returns The list of tag strings.
     */
    daq::ListPtr<daq::IString> getList() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IString> value;
        auto errCode = this->object->getList(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Checks whether a tag is present in the list of tags.

     * @param name The name of the tag being checked.
     * @returns True if a tag is found; false otherwise.
     */
    daq::Bool contains(const daq::StringPtr& name) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool value;
        auto errCode = this->object->contains(name, &value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Queries the list of tags, creating an EvalValue expression from the `query` string.
     * Returns true if the list of tags matches the query, false otherwise.

     * @param query The query string. I.e. "tag1 || (tag2 && tag3)"
     * @returns The result of the query
     */
    daq::Bool query(const daq::StringPtr& query) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool value;
        auto errCode = this->object->query(query, &value);
        daq::checkErrorInfo(errCode);

        return value;
    }

#if __has_include(<cqdaq/tags_ptr.custom.h>)
    #include <cqdaq/tags_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
