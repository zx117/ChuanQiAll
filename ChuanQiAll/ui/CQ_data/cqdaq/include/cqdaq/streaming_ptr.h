//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:35.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/streaming.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/signal_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class StreamingPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IStreaming>
{
    using SmartPtr = daq::StreamingPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_streamings
 * @addtogroup cqdaq_streaming_streaming Streaming
 * @{

 */


/*!
 * @brief Represents the client-side part of a streaming service responsible for initiating
 * communication with the cqDAQ device streaming server and processing the received data.
 * Wraps the client-side implementation details of the particular data transfer protocol used by
 * cqDAQ to send processed/acquired data from devices running an cqDAQ Server to an
 * cqDAQ Client.

 * The Streaming is used as a selectable data source for mirrored signals. For this, it
 * provides methods, allowing mirrored signals to be added/removed dynamically,
 * to enable/disable the use of Streaming as a data source of these signals.
 * Forwarding of packets received from the remote device through the data transfer protocol down to
 * the signal path is enabled when the following conditions are met:
 * - Streaming object itself is in active state.
 * - Streaming is selected as an active source of the corresponding signal.
 * Usually, the data transfer protocol provides information about the signals whose data can be sent
 * over the protocol. It allows the implementation to reject unsupported signals from being added to
 * the streaming. Each Streaming object provides the string representation of a connection address
 * used to connect to the streaming service of the device. This string representation is used as
 * a unique ID to determine the streaming source for the mirrored signal.
 */

class StreamingPtr : public daq::ObjectPtr<IStreaming>
{
public:
    using daq::ObjectPtr<IStreaming>::ObjectPtr;
    //using daq::ObjectPtr<IStreaming>::operator=;



    StreamingPtr()
        : daq::ObjectPtr<IStreaming>()

    {
    }

    StreamingPtr(daq::ObjectPtr<IStreaming>&& ptr)
        : daq::ObjectPtr<IStreaming>(std::move(ptr))

    {
    }

    StreamingPtr(const daq::ObjectPtr<IStreaming>& ptr)
        : daq::ObjectPtr<IStreaming>(ptr)

    {
    }

    StreamingPtr(const StreamingPtr& other)
        : daq::ObjectPtr<IStreaming>(other)

    {
    }

    StreamingPtr(StreamingPtr&& other) noexcept
        : daq::ObjectPtr<IStreaming>(std::move(other))

    {
    }
    
    StreamingPtr& operator=(const StreamingPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IStreaming>::operator =(other);


        return *this;
    }

    StreamingPtr& operator=(StreamingPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IStreaming>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the active state of the Streaming.

     * @returns True if the Streaming is active; false otherwise.
     */
    daq::Bool getActive() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool active;
        auto errCode = this->object->getActive(&active);
        daq::checkErrorInfo(errCode);

        return active;
    }


    /*!
     * @brief Sets the Streaming to be either active or inactive.

     * @param active The new active state of the Streaming.
     */
    void setActive(daq::Bool active) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setActive(active);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Adds signals to the Streaming.

     * @param signals The list of signals to be added.
     * @throws DuplicateItemException if a signal on the list is already added to the Streaming.
     * @throws NoInterfaceException if a signal on the list is not a mirrored signal.
     * After a signal is added to the Streaming, the Streaming automatically appears in the list of
     * available streaming sources of a signal.
     */
    void addSignals(const daq::ListPtr<daq::ISignal>& cq_signals) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addSignals(cq_signals);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes signals from the Streaming.

     * @param signals The list of signals to be removed.
     * @throws NotFoundException if a signal on the list was not added to the Streaming.
     * After a signal is removed from the Streaming, the Streaming is automatically excluded in the list of
     * available streaming sources of a signal.
     */
    void removeSignals(const daq::ListPtr<daq::ISignal>& cq_signals) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeSignals(cq_signals);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Removes all added signals from the Streaming.

     */
    void removeAllSignals() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeAllSignals();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the string representation of a connection address used to connect to the streaming
     * service of the device.

     * @returns The string used to connect to the streaming service.
     */
    daq::StringPtr getConnectionString() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr connectionString;
        auto errCode = this->object->getConnectionString(&connectionString);
        daq::checkErrorInfo(errCode);

        return connectionString;
    }

#if __has_include(<cqdaq/streaming_ptr.custom.h>)
    #include <cqdaq/streaming_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
