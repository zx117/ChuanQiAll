//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:56:07.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/multi_reader_builder.h"
#include <coretypes/objectptr.h>
#include <cqdaq/multi_reader_ptr.h>
#include <cqdaq/signal_ptr.h>
#include <cqdaq/input_port_ptr.h>
#include <coretypes/list_ptr.h>
#include <cqdaq/component_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class MultiReaderBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IMultiReaderBuilder>
{
    using SmartPtr = daq::MultiReaderBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_readers
 * @addtogroup cqdaq_multi_reader Multi reader builder
 * @{

 */


/*!
 * @brief Builder component of Multi reader objects. Contains setter methods to configure the Multi reader parameters
 * and a `build` method that builds the Unit object.

 */

class MultiReaderBuilderPtr : public daq::ObjectPtr<IMultiReaderBuilder>
{
public:
    using daq::ObjectPtr<IMultiReaderBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IMultiReaderBuilder>::operator=;



    MultiReaderBuilderPtr()
        : daq::ObjectPtr<IMultiReaderBuilder>()

    {
    }

    MultiReaderBuilderPtr(daq::ObjectPtr<IMultiReaderBuilder>&& ptr)
        : daq::ObjectPtr<IMultiReaderBuilder>(std::move(ptr))

    {
    }

    MultiReaderBuilderPtr(const daq::ObjectPtr<IMultiReaderBuilder>& ptr)
        : daq::ObjectPtr<IMultiReaderBuilder>(ptr)

    {
    }

    MultiReaderBuilderPtr(const MultiReaderBuilderPtr& other)
        : daq::ObjectPtr<IMultiReaderBuilder>(other)

    {
    }

    MultiReaderBuilderPtr(MultiReaderBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IMultiReaderBuilder>(std::move(other))

    {
    }
    
    MultiReaderBuilderPtr& operator=(const MultiReaderBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IMultiReaderBuilder>::operator =(other);


        return *this;
    }

    MultiReaderBuilderPtr& operator=(MultiReaderBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IMultiReaderBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Multi reader object using the currently set values of the Builder.

     * @returns The built Multi reader.
     */
    daq::MultiReaderPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::MultiReaderPtr multiReader;
        auto errCode = this->object->build(&multiReader);
        daq::checkErrorInfo(errCode);

        return multiReader;
    }


    /*!
     * @brief Adds the signal to list in multi reader

     * @param signal The signal which will be handled in multi reader
     */
    MultiReaderBuilderPtr addSignal(const daq::SignalPtr& signal) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addSignal(signal);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Adds the input port to list in multi reader

     * @param port The input port which will be handled in multi reader
     */
    MultiReaderBuilderPtr addInputPort(const daq::InputPortPtr& port) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addInputPort(port);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list of input ports

     * @returns The list of input ports
     */
    daq::ListPtr<daq::IComponent> getSourceComponents() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IComponent> ports;
        auto errCode = this->object->getSourceComponents(&ports);
        daq::checkErrorInfo(errCode);

        return ports;
    }


    /*!
     * @brief Sets the value signal read type

     * @param type The value signal read type
     */
    MultiReaderBuilderPtr setValueReadType(daq::SampleType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValueReadType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the value signal read type

     * @returns The value signal read type
     */
    daq::SampleType getValueReadType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType type;
        auto errCode = this->object->getValueReadType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the domain signal read type

     * @param type The domain signal read type
     */
    MultiReaderBuilderPtr setDomainReadType(daq::SampleType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDomainReadType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the domain signal read type

     * @returns The domain signal read type
     */
    daq::SampleType getDomainReadType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::SampleType type;
        auto errCode = this->object->getDomainReadType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the read mode (Unscaled, Scaled, RawValue)

     * @param mode The read mode
     */
    MultiReaderBuilderPtr setReadMode(daq::ReadMode mode) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setReadMode(mode);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the read mode (Unscaled, Scaled, RawValue)

     * @returns The read mode
     */
    daq::ReadMode getReadMode() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReadMode mode;
        auto errCode = this->object->getReadMode(&mode);
        daq::checkErrorInfo(errCode);

        return mode;
    }


    /*!
     * @brief Sets the read timeout mode

     * @param mode The timeout mode. 
     * if "Any" returns immediatly if there is available data otherwise time-out is exceeded.
     * if "All" waiting until timeout and returns avaiable data if existing. otherwise time-out is exceeded.
     */
    MultiReaderBuilderPtr setReadTimeoutType(daq::ReadTimeoutType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setReadTimeoutType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the read timeout mode

     * @param mode The timeout mode. 
     * if "Any" returns immediatly if there is available data otherwise time-out is exceeded.
     * if "All" waiting until timeout and returns avaiable data if existing. otherwise time-out is exceeded.
     */
    daq::ReadTimeoutType getReadTimeoutType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ReadTimeoutType type;
        auto errCode = this->object->getReadTimeoutType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the required common sample rate

     * @param sampleRate The required common sample rate
     */
    MultiReaderBuilderPtr setRequiredCommonSampleRate(daq::Int sampleRate) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setRequiredCommonSampleRate(sampleRate);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the required common sample rate

     * @returns The required common sample rate
     */
    daq::Int getRequiredCommonSampleRate() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int sampleRate;
        auto errCode = this->object->getRequiredCommonSampleRate(&sampleRate);
        daq::checkErrorInfo(errCode);

        return sampleRate;
    }


    /*!
     * @brief Sets the start on full unit of domain

     * @param enabled enable/disable start on full unit of domain
     */
    MultiReaderBuilderPtr setStartOnFullUnitOfDomain(daq::Bool enabled) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setStartOnFullUnitOfDomain(enabled);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the start on full unit of domain

     * @returns enable/disable start on full unit of domain
     */
    daq::Bool getStartOnFullUnitOfDomain() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool enabled;
        auto errCode = this->object->getStartOnFullUnitOfDomain(&enabled);
        daq::checkErrorInfo(errCode);

        return enabled;
    }

#if __has_include(<cqdaq/multi_reader_builder_ptr.custom.h>)
    #include <cqdaq/multi_reader_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
