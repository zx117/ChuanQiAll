//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:58.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "cqdaq/logger_component.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class LoggerComponentPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ILoggerComponent>
{
    using SmartPtr = daq::LoggerComponentPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_logger
 * @addtogroup cqdaq_logger_component Logger component
 * @{

 */


/*!
 * @brief Logs messages produced by a specific part of cqDAC SDK. The messages are written
 * into the @ref ILoggerSink "Logger Sinks" associated with the Logger Component object.

 * The set of associated sinks is initialized on the Logger Component object creation and cannot be
 * changed after.
 * Logger Component allows to set up a threshold log severity level, so the messages with lower level
 * will not be registered.
 * Additionally, it provides the ability to trigger writing out messages stored in temporary buffers or
 * set up the minimum severity level of messages to be written out automatically,
 * see `flushOnLevel` method.
 */

class LoggerComponentPtr : public daq::ObjectPtr<ILoggerComponent>
{
public:
    using daq::ObjectPtr<ILoggerComponent>::ObjectPtr;
    //using daq::ObjectPtr<ILoggerComponent>::operator=;



    LoggerComponentPtr()
        : daq::ObjectPtr<ILoggerComponent>()

    {
    }

    LoggerComponentPtr(daq::ObjectPtr<ILoggerComponent>&& ptr)
        : daq::ObjectPtr<ILoggerComponent>(std::move(ptr))

    {
    }

    LoggerComponentPtr(const daq::ObjectPtr<ILoggerComponent>& ptr)
        : daq::ObjectPtr<ILoggerComponent>(ptr)

    {
    }

    LoggerComponentPtr(const LoggerComponentPtr& other)
        : daq::ObjectPtr<ILoggerComponent>(other)

    {
    }

    LoggerComponentPtr(LoggerComponentPtr&& other) noexcept
        : daq::ObjectPtr<ILoggerComponent>(std::move(other))

    {
    }
    
    LoggerComponentPtr& operator=(const LoggerComponentPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ILoggerComponent>::operator =(other);


        return *this;
    }

    LoggerComponentPtr& operator=(LoggerComponentPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ILoggerComponent>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the name of the component.

     * @returns The name of the component.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the minimal severity level of messages to be logged by the component.

     * @param level The log severity level of the component.
     */
    void setLevel(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setLevel(level);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Gets the minimal severity level of messages to be logged by the component.

     * @returns The log severity level of the component.
     */
    daq::LogLevel getLevel() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::LogLevel level;
        auto errCode = this->object->getLevel(&level);
        daq::checkErrorInfo(errCode);

        return level;
    }


    /*!
     * @brief Logs a message with the provided source location and severity level.

     * @param location The source location.
     * @param msg The message.
     * @param level The severity level of the message.
     */
    void logMessage(daq::SourceLocation location, daq::ConstCharPtr msg, daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->logMessage(location, msg, level);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the custom formatter pattern for the component.

     * @param pattern The format pattern string.
     */
    void setPattern(const daq::StringPtr& pattern) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPattern(pattern);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Checks whether the messages with given log severity level will be logged or not.

     * @param level The severity level of messages.
     * @returns True if the messages with @p level will be logged within the component; false otherwise.
     */
    daq::Bool shouldLog(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool willLog;
        auto errCode = this->object->shouldLog(level, &willLog);
        daq::checkErrorInfo(errCode);

        return willLog;
    }


    /*!
     * @brief Triggers writing out the messages stored in temporary buffers.

     */
    void flush() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->flush();
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Sets the minimum severity level of messages to be automatically written to the associated
     * sinks bypassing the temporary buffers.

     * @param level The severity level of messages.
     */
    void flushOnLevel(daq::LogLevel level) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->flushOnLevel(level);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<cqdaq/logger_component_ptr.custom.h>)
    #include <cqdaq/logger_component_ptr.custom.h>
#endif
};

END_NAMESPACE_CQDAQ
