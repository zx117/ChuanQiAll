//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:00.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_builder.h"
#include <coretypes/objectptr.h>
#include <coreobjects/property_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/unit_ptr.h>
#include <coretypes/number_ptr.h>
#include <coretypes/list_ptr.h>
#include <coretypes/boolean_factory.h>
#include <coreobjects/eval_value_ptr.h>
#include <coreobjects/validator_ptr.h>
#include <coreobjects/coercer_ptr.h>
#include <coreobjects/callable_info_ptr.h>
#include <coretypes/event_ptr.h>
#include <coreobjects/property_object_ptr.h>
#include <coreobjects/property_value_event_args_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyBuilder>
{
    using SmartPtr = daq::PropertyBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property
 * @addtogroup objects_property_obj PropertyBuilder
 * @{

 */


/*!
 * @brief The builder interface of Properties. Allows for construction of Properties through the `build`
 * method.

 * Contains setters for the Property fields. The setters take as parameters cqDAQ objects, even if
 * the value must always evaluate to, for example, a boolean. This allows for EvalValue objects to be
 * set instead of a static value.
 * The EvalValue objects can evaluate to Boolean, String, List, Unit, and Property types. and can thus be
 * used when such types are expected from the getters.
 * The Property can be built by calling the `build` method.
 */

class PropertyBuilderPtr : public daq::ObjectPtr<IPropertyBuilder>
{
public:
    using daq::ObjectPtr<IPropertyBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IPropertyBuilder>::operator=;



    PropertyBuilderPtr()
        : daq::ObjectPtr<IPropertyBuilder>()

    {
    }

    PropertyBuilderPtr(daq::ObjectPtr<IPropertyBuilder>&& ptr)
        : daq::ObjectPtr<IPropertyBuilder>(std::move(ptr))

    {
    }

    PropertyBuilderPtr(const daq::ObjectPtr<IPropertyBuilder>& ptr)
        : daq::ObjectPtr<IPropertyBuilder>(ptr)

    {
    }

    PropertyBuilderPtr(const PropertyBuilderPtr& other)
        : daq::ObjectPtr<IPropertyBuilder>(other)

    {
    }

    PropertyBuilderPtr(PropertyBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IPropertyBuilder>(std::move(other))

    {
    }
    
    PropertyBuilderPtr& operator=(const PropertyBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IPropertyBuilder>::operator =(other);


        return *this;
    }

    PropertyBuilderPtr& operator=(PropertyBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IPropertyBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Property using the currently set values of the Builder.

     * @returns The built property.
     */
    daq::PropertyPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyPtr property;
        auto errCode = this->object->build(&property);
        daq::checkErrorInfo(errCode);

        return property;
    }


    /*!
     * @brief Sets the Value type of the Property. Values written to the corresponding Property value
     * must be of the same type.

     * @param type The value type.
     */
    PropertyBuilderPtr setValueType(daq::CoreType type) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValueType(type);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Value type of the Property.

     * @returns The value type.
     */
    daq::CoreType getValueType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::CoreType type;
        auto errCode = this->object->getValueType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Sets the Name of the Property. The names of Properties in a Property object must be unique.
     * The name is used as the key to the corresponding Property value when getting/setting the value.

     * @param name The Name of the Property.
     */
    PropertyBuilderPtr setName(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Name of the Property.

     * @returns The Name of the Property.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the short string Description of the Property.

     * @param description The Description of the Property.
     */
    PropertyBuilderPtr setDescription(const daq::StringPtr& description) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDescription(description);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the short string Description of the Property.

     * @returns The Description of the Property.
     */
    daq::StringPtr getDescription() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr description;
        auto errCode = this->object->getDescription(&description);
        daq::checkErrorInfo(errCode);

        return description;
    }


    /*!
     * @brief Sets the Unit of the Property.

     * @param unit The Unit of the Property.
     */
    PropertyBuilderPtr setUnit(const daq::UnitPtr& unit) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setUnit(unit);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Unit of the Property.

     * @returns The Unit of the Property.
     */
    daq::UnitPtr getUnit() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->getUnit(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Sets the Minimum value of the Property. Available only if the Value type is `ctInt` or `ctFloat`.

     * @param min The Minimum value of the Property.
     */
    PropertyBuilderPtr setMinValue(const daq::NumberPtr& min) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMinValue(min);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Minimum value of the Property. Available only if the Value type is `ctInt` or `ctFloat`.

     * @returns The Minimum value of the Property.
     */
    daq::NumberPtr getMinValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr min;
        auto errCode = this->object->getMinValue(&min);
        daq::checkErrorInfo(errCode);

        return min;
    }


    /*!
     * @brief Sets the Maximum value of the Property. Available only if the Value type is `ctInt` or `ctFloat`.

     * @param max The Maximum value of the Property.
     */
    PropertyBuilderPtr setMaxValue(const daq::NumberPtr& max) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setMaxValue(max);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Maximum value of the Property. Available only if the Value type is `ctInt` or `ctFloat`.

     * @returns The Maximum value of the Property.
     */
    daq::NumberPtr getMaxValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr max;
        auto errCode = this->object->getMaxValue(&max);
        daq::checkErrorInfo(errCode);

        return max;
    }


    /*!
     * @brief Sets the Default value of the Property. The Default value must always be configured for a Property to be
     * in a valid state. Exceptions are Function/Procedure and Reference properties.
     * The function will freeze default value if it is freezable. 

     * @param value The Default value of the Property.
     */
    PropertyBuilderPtr setDefaultValue(const daq::BaseObjectPtr& value) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setDefaultValue(value);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Default value of the Property.

     * @returns The Default value of the Property.
     */
    daq::BaseObjectPtr getDefaultValue() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr value;
        auto errCode = this->object->getDefaultValue(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Sets the list of Suggested values. Contains values that are the optimal settings for the corresponding
     * Property value. These values, however, are not enforced when setting a new Property value.

     * @param values The Suggested values of the Property.
     */
    PropertyBuilderPtr setSuggestedValues(const daq::ListPtr<daq::IBaseObject>& values) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSuggestedValues(values);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list of Suggested values. Contains values that are the optimal gettings for the corresponding
     * Property value. These values, however, are not enforced when getting a new Property value.

     * @returns The Suggested values of the Property.
     */
    daq::ListPtr<daq::IBaseObject> getSuggestedValues() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IBaseObject> values;
        auto errCode = this->object->getSuggestedValues(&values);
        daq::checkErrorInfo(errCode);

        return values;
    }


    /*!
     * @brief Used to determine whether the property is visible or not.

     * @param visible True if the Property is visible; false otherwise.
     */
    PropertyBuilderPtr setVisible(const daq::BooleanPtr& visible) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setVisible(visible);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Used to determine whether the property is visible or not.

     * @returns True if the Property is visible; false otherwise.
     */
    daq::BooleanPtr getVisible() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BooleanPtr visible;
        auto errCode = this->object->getVisible(&visible);
        daq::checkErrorInfo(errCode);

        return visible;
    }


    /*!
     * @brief Used to determine whether the Property is a read-only property or not.

     * @param readOnly True if the Property is a read-only property; false otherwise.
     * Read-only Property values can still be modified by using the `PropertyObjectProtected` interface methods.
     */
    PropertyBuilderPtr setReadOnly(const daq::BooleanPtr& readOnly) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setReadOnly(readOnly);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Used to determine whether the Property is a read-only property or not.

     * @returns True if the Property is a read-only property; false otherwise.
     */
    daq::BooleanPtr getReadOnly() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BooleanPtr readOnly;
        auto errCode = this->object->getReadOnly(&readOnly);
        daq::checkErrorInfo(errCode);

        return readOnly;
    }


    /*!
     * @brief Sets the list or dictionary of selection values. If the list/dictionary is not empty, the property
     * is a Selection property, and must have the Value type `ctInt`.

     * @param values The list/dictionary of possible selection values.
     */
    PropertyBuilderPtr setSelectionValues(const daq::BaseObjectPtr& values) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSelectionValues(values);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the list or dictionary of selection values.

     * @returns The list/dictionary of possible selection values.
     */
    daq::BaseObjectPtr getSelectionValues() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr values;
        auto errCode = this->object->getSelectionValues(&values);
        daq::checkErrorInfo(errCode);

        return values;
    }


    /*!
     * @brief Sets the referenced property. If set, all getters except for the `Name`, `Referenced property`, and
     * `Is referenced` getters will return the value of the `Referenced property`.

     * @param propertyEval The referenced property.
     * If the Property is not bound to a Property object this call will not be able to return the Referenced property.
     */
    PropertyBuilderPtr setReferencedProperty(const daq::EvalValuePtr& propertyEval) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setReferencedProperty(propertyEval);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the referenced property.

     * @returns The referenced property.
     */
    daq::EvalValuePtr getReferencedProperty() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::EvalValuePtr propertyEval;
        auto errCode = this->object->getReferencedProperty(&propertyEval);
        daq::checkErrorInfo(errCode);

        return propertyEval;
    }


    /*!
     * @brief Sets the validator of the Property.

     * @param validator The validator.
     * Used to validate whether a value written to the corresponding Property value is valid or not.
     */
    PropertyBuilderPtr setValidator(const daq::ValidatorPtr& validator) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setValidator(validator);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the validator of the Property.

     * @returns The validator.
     */
    daq::ValidatorPtr getValidator() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ValidatorPtr validator;
        auto errCode = this->object->getValidator(&validator);
        daq::checkErrorInfo(errCode);

        return validator;
    }


    /*!
     * @brief Sets the coercer of the Property.

     * @param coercer The coercer.
     * Used to coerce a value written to the corresponding Property value to the constraints specified by the coercer.
     */
    PropertyBuilderPtr setCoercer(const daq::CoercerPtr& coercer) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setCoercer(coercer);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the coercer of the Property.

     * @returns The coercer.
     */
    daq::CoercerPtr getCoercer() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::CoercerPtr coercer;
        auto errCode = this->object->getCoercer(&coercer);
        daq::checkErrorInfo(errCode);

        return coercer;
    }


    /*!
     * @brief Sets the Callable information objects of the Property that specifies the argument and return types
     * of the callable object stored as the Property value.

     * @param callable The Callable info object.
     */
    PropertyBuilderPtr setCallableInfo(const daq::CallableInfoPtr& callable) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setCallableInfo(callable);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the Callable information objects of the Property that specifies the argument and return types
     * of the callable object stored as the Property value.

     * @returns The Callable info object.
     */
    daq::CallableInfoPtr getCallableInfo() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::CallableInfoPtr callable;
        auto errCode = this->object->getCallableInfo(&callable);
        daq::checkErrorInfo(errCode);

        return callable;
    }


    /*!
     * @brief Sets a custom on-write event. Used mostly when cloning properties.

     * @param event The on-write event.
     */
    PropertyBuilderPtr setOnPropertyValueWrite(const daq::Event<daq::PropertyObjectPtr, PropertyValueEventArgsPtr>& event) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOnPropertyValueWrite(event);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets a custom on-write event. Used mostly when cloning properties.

     * @returns The on-write event.
     */
    daq::Event<daq::PropertyObjectPtr, daq::PropertyValueEventArgsPtr> getOnPropertyValueWrite() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        EventPtr<> event;
        auto errCode = this->object->getOnPropertyValueWrite(&event);
        daq::checkErrorInfo(errCode);

        return daq::Event<daq::PropertyObjectPtr, daq::PropertyValueEventArgsPtr>(event);
    }


    /*!
     * @brief Sets a custom on-read event. Used mostly when cloning properties.

     * @param event The on-read event.
     */
    PropertyBuilderPtr setOnPropertyValueRead(const daq::Event<daq::PropertyObjectPtr, PropertyValueEventArgsPtr>& event) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOnPropertyValueRead(event);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets a custom on-read event. Used mostly when cloning properties.

     * @returns The on-read event.
     */
    daq::Event<daq::PropertyObjectPtr, daq::PropertyValueEventArgsPtr> getOnPropertyValueRead() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        EventPtr<> event;
        auto errCode = this->object->getOnPropertyValueRead(&event);
        daq::checkErrorInfo(errCode);

        return daq::Event<daq::PropertyObjectPtr, daq::PropertyValueEventArgsPtr>(event);
    }

#if __has_include(<coreobjects/property_builder_ptr.custom.h>)
    #include <coreobjects/property_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @addtogroup objects_property_obj_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
