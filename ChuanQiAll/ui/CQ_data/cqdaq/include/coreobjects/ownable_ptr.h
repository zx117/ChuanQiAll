//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:02.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/ownable.h"
#include <coreobjects/property_object_ptr.h>
#include <coretypes/objectptr.h>




BEGIN_NAMESPACE_CQDAQ


class OwnablePtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IOwnable>
{
    using SmartPtr = daq::OwnablePtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_utility
 * @addtogroup objects_ownable Ownable
 * @{

 */


/*!
 * @brief An ownable object can have IPropertyObject as the owner.

 * An object can declare itself ownable. When a parent object that supports a concept of ownership
 * calls the` setOwner` method, it becomes the owner of the object. It's up to the object's implementation
 * to decide what actions should it forward to the owner.
 * For example, a property object that is a child of another property object will look up property values
 * in their owner's dictionary if the property is not set locally.
 */

class OwnablePtr : public daq::ObjectPtr<IOwnable>
{
public:
    using daq::ObjectPtr<IOwnable>::ObjectPtr;
    //using daq::ObjectPtr<IOwnable>::operator=;



    OwnablePtr()
        : daq::ObjectPtr<IOwnable>()

    {
    }

    OwnablePtr(daq::ObjectPtr<IOwnable>&& ptr)
        : daq::ObjectPtr<IOwnable>(std::move(ptr))

    {
    }

    OwnablePtr(const daq::ObjectPtr<IOwnable>& ptr)
        : daq::ObjectPtr<IOwnable>(ptr)

    {
    }

    OwnablePtr(const OwnablePtr& other)
        : daq::ObjectPtr<IOwnable>(other)

    {
    }

    OwnablePtr(OwnablePtr&& other) noexcept
        : daq::ObjectPtr<IOwnable>(std::move(other))

    {
    }
    
    OwnablePtr& operator=(const OwnablePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IOwnable>::operator =(other);


        return *this;
    }

    OwnablePtr& operator=(OwnablePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IOwnable>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets the owner of the object.

     * @param owner The object that will own this object.
     */
    void setOwner(const daq::PropertyObjectPtr& owner) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setOwner(owner);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<coreobjects/ownable_ptr.custom.h>)
    #include <coreobjects/ownable_ptr.custom.h>
#endif
};

/*!
 * @}

 */


END_NAMESPACE_CQDAQ
