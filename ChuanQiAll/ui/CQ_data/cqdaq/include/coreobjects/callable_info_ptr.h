//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:05.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/callable_info.h"
#include <coretypes/objectptr.h>
#include <coretypes/list_ptr.h>
#include <coreobjects/argument_info_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class CallableInfoPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::ICallableInfo>
{
    using SmartPtr = daq::CallableInfoPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_utility
 * @addtogroup objects_callable_info CallableInfo
 * @{

 */


/*!
 * @brief Provides information about the argument count and types, as well as the return type of
 * Function/Procedure-type properties.

 * A callable should be invoked with the parameter types specified in the `arguments` field, in the
 * order listed.
 * A Procedure-type Property will not have a return type configured in its Callable info field.
 * Argument info objects implement the Struct methods internally and are Core type `ctStruct`.
 */

class CallableInfoPtr : public daq::ObjectPtr<ICallableInfo>
{
public:
    using daq::ObjectPtr<ICallableInfo>::ObjectPtr;
    //using daq::ObjectPtr<ICallableInfo>::operator=;



    CallableInfoPtr()
        : daq::ObjectPtr<ICallableInfo>()

    {
    }

    CallableInfoPtr(daq::ObjectPtr<ICallableInfo>&& ptr)
        : daq::ObjectPtr<ICallableInfo>(std::move(ptr))

    {
    }

    CallableInfoPtr(const daq::ObjectPtr<ICallableInfo>& ptr)
        : daq::ObjectPtr<ICallableInfo>(ptr)

    {
    }

    CallableInfoPtr(const CallableInfoPtr& other)
        : daq::ObjectPtr<ICallableInfo>(other)

    {
    }

    CallableInfoPtr(CallableInfoPtr&& other) noexcept
        : daq::ObjectPtr<ICallableInfo>(std::move(other))

    {
    }
    
    CallableInfoPtr& operator=(const CallableInfoPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<ICallableInfo>::operator =(other);


        return *this;
    }

    CallableInfoPtr& operator=(CallableInfoPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<ICallableInfo>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the return type of the callable function.

     * @returns The return type of the callable.
     */
    daq::CoreType getReturnType() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::CoreType type;
        auto errCode = this->object->getReturnType(&type);
        daq::checkErrorInfo(errCode);

        return type;
    }


    /*!
     * @brief Gets the list of arguments the callable function/procedure expects.

     * @returns the list of arguments of type `ArgumentInfo`.
     */
    daq::ListPtr<daq::IArgumentInfo> getArguments() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IArgumentInfo> argumentInfo;
        auto errCode = this->object->getArguments(&argumentInfo);
        daq::checkErrorInfo(errCode);

        return argumentInfo;
    }

#if __has_include(<coreobjects/callable_info_ptr.custom.h>)
    #include <coreobjects/callable_info_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @addtogroup objects_callable_info_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
