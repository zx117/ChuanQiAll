//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:07.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/unit_builder.h"
#include <coretypes/objectptr.h>
#include <coreobjects/unit_ptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class UnitBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IUnitBuilder>
{
    using SmartPtr = daq::UnitBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup cqdaq_data_descriptor
 * @addtogroup coreobjects_unit Unit
 * @{

 */


/*!
 * @brief Builder component of Unit objects. Contains setter methods to configure the Unit parameters, and a
 * `build` method that builds the Unit object.

 */

class UnitBuilderPtr : public daq::ObjectPtr<IUnitBuilder>
{
public:
    using daq::ObjectPtr<IUnitBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IUnitBuilder>::operator=;



    UnitBuilderPtr()
        : daq::ObjectPtr<IUnitBuilder>()

    {
    }

    UnitBuilderPtr(daq::ObjectPtr<IUnitBuilder>&& ptr)
        : daq::ObjectPtr<IUnitBuilder>(std::move(ptr))

    {
    }

    UnitBuilderPtr(const daq::ObjectPtr<IUnitBuilder>& ptr)
        : daq::ObjectPtr<IUnitBuilder>(ptr)

    {
    }

    UnitBuilderPtr(const UnitBuilderPtr& other)
        : daq::ObjectPtr<IUnitBuilder>(other)

    {
    }

    UnitBuilderPtr(UnitBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IUnitBuilder>(std::move(other))

    {
    }
    
    UnitBuilderPtr& operator=(const UnitBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IUnitBuilder>::operator =(other);


        return *this;
    }

    UnitBuilderPtr& operator=(UnitBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IUnitBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Unit object using the currently set values of the Builder.

     * @returns The built Unit.
     */
    daq::UnitPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::UnitPtr unit;
        auto errCode = this->object->build(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Sets the unit ID as defined in <a href="https://unece.org/trade/cefact/UNLOCODE-Download">Codes for Units of Measurement used
     * in International Trade</a>.

     * @param id The unit ID.
     * The ID should be -1 if the unit is not available.
     */
    UnitBuilderPtr setId(daq::Int id) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setId(id);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the unit ID as defined in <a href="https://unece.org/trade/cefact/UNLOCODE-Download">Codes for Units of Measurement used
     * in International Trade</a>.

     * @returns The unit ID.
     * Returns -1 if the unit id is not available.
     */
    daq::Int getId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Int id;
        auto errCode = this->object->getId(&id);
        daq::checkErrorInfo(errCode);

        return id;
    }


    /*!
     * @brief Sets the symbol of the unit, i.e. "m/s".

     * @param symbol The unit's symbol.
     */
    UnitBuilderPtr setSymbol(const daq::StringPtr& symbol) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setSymbol(symbol);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the symbol of the unit, i.e. "m/s".

     * @returns The unit's symbol.
     */
    daq::StringPtr getSymbol() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr symbol;
        auto errCode = this->object->getSymbol(&symbol);
        daq::checkErrorInfo(errCode);

        return symbol;
    }


    /*!
     * @brief Sets the full name of the unit, i.e. "meters per second".

     * @param name The unit's full name.
     */
    UnitBuilderPtr setName(const daq::StringPtr& name) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(name);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the full name of the unit, i.e. "meters per second".

     * @returns The unit's full name.
     * `nullptr` if not set.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Sets the quantity represented by the unit, i.e. "Velocity"

     * @param quantity The unit's quantity.
     */
    UnitBuilderPtr setQuantity(const daq::StringPtr& quantity) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setQuantity(quantity);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the quantity represented by the unit, i.e. "Velocity" 

     * @returns The unit's quantity.
     * `nullptr` if not set.
     */
    daq::StringPtr getQuantity() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr quantity;
        auto errCode = this->object->getQuantity(&quantity);
        daq::checkErrorInfo(errCode);

        return quantity;
    }

#if __has_include(<coreobjects/unit_builder_ptr.custom.h>)
    #include <coreobjects/unit_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @ingroup coreobjects_unit
 * @addtogroup coreobjects_unit_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
