//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:59.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_internal.h"
#include <coretypes/objectptr.h>
#include <coreobjects/property_ptr.h>
#include <coreobjects/property_object_ptr.h>
#include <coretypes/string_ptr.h>
#include <coretypes/number_ptr.h>
#include <coretypes/list_ptr.h>
#include <coretypes/boolean_factory.h>
#include <coreobjects/eval_value_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyInternalPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyInternal>
{
    using SmartPtr = daq::PropertyInternalPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property
 * @addtogroup objects_property_obj PropertyInternal
 * @{

 */

class PropertyInternalPtr : public daq::ObjectPtr<IPropertyInternal>
{
public:
    using daq::ObjectPtr<IPropertyInternal>::ObjectPtr;
    //using daq::ObjectPtr<IPropertyInternal>::operator=;



    PropertyInternalPtr()
        : daq::ObjectPtr<IPropertyInternal>()

    {
    }

    PropertyInternalPtr(daq::ObjectPtr<IPropertyInternal>&& ptr)
        : daq::ObjectPtr<IPropertyInternal>(std::move(ptr))

    {
    }

    PropertyInternalPtr(const daq::ObjectPtr<IPropertyInternal>& ptr)
        : daq::ObjectPtr<IPropertyInternal>(ptr)

    {
    }

    PropertyInternalPtr(const PropertyInternalPtr& other)
        : daq::ObjectPtr<IPropertyInternal>(other)

    {
    }

    PropertyInternalPtr(PropertyInternalPtr&& other) noexcept
        : daq::ObjectPtr<IPropertyInternal>(std::move(other))

    {
    }
    
    PropertyInternalPtr& operator=(const PropertyInternalPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IPropertyInternal>::operator =(other);


        return *this;
    }

    PropertyInternalPtr& operator=(PropertyInternalPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IPropertyInternal>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Clones the property without an owner.

     */
    daq::PropertyPtr clone() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyPtr clonedProperty;
        auto errCode = this->object->clone(&clonedProperty);
        daq::checkErrorInfo(errCode);

        return clonedProperty;
    }


    /*!
     * @brief Clones the property, setting the passed PropertyObject as its owner.

     * If the provided owner is the same as the current owner of the property, the property is not cloned.
     * Instead the property itself is returned as-is.
     */
    daq::PropertyPtr cloneWithOwner(const daq::PropertyObjectPtr& owner) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyPtr clonedProperty;
        auto errCode = this->object->cloneWithOwner(owner, &clonedProperty);
        daq::checkErrorInfo(errCode);

        return clonedProperty;
    }


    /*!
     * @brief Gets the Property description in an as either a String or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::StringPtr getDescriptionUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr description;
        auto errCode = this->object->getDescriptionUnresolved(&description);
        daq::checkErrorInfo(errCode);

        return description;
    }


    /*!
     * @brief Gets the Property unit in an as either a String (TODO: as an IUnit once supported)
     * or unresolved EvalValue. The EvalValue is bound to the owner, if the Property has an owner.

     */
    daq::BaseObjectPtr getUnitUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr unit;
        auto errCode = this->object->getUnitUnresolved(&unit);
        daq::checkErrorInfo(errCode);

        return unit;
    }


    /*!
     * @brief Gets the Property min value in an as either a Number or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::NumberPtr getMinValueUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr min;
        auto errCode = this->object->getMinValueUnresolved(&min);
        daq::checkErrorInfo(errCode);

        return min;
    }


    /*!
     * @brief Gets the Property max value in an as either a Number or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::NumberPtr getMaxValueUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::NumberPtr max;
        auto errCode = this->object->getMaxValueUnresolved(&max);
        daq::checkErrorInfo(errCode);

        return max;
    }


    /*!
     * @brief Gets the Property default value in an as either a BaseObject or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::BaseObjectPtr getDefaultValueUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr value;
        auto errCode = this->object->getDefaultValueUnresolved(&value);
        daq::checkErrorInfo(errCode);

        return value;
    }


    /*!
     * @brief Gets the Property suggested values in an as either a List of BaseObjects or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::ListPtr<daq::IBaseObject> getSuggestedValuesUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IBaseObject> values;
        auto errCode = this->object->getSuggestedValuesUnresolved(&values);
        daq::checkErrorInfo(errCode);

        return values;
    }


    /*!
     * @brief Gets the Property visible field in an as either a Boolean or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::BooleanPtr getVisibleUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BooleanPtr visible;
        auto errCode = this->object->getVisibleUnresolved(&visible);
        daq::checkErrorInfo(errCode);

        return visible;
    }


    /*!
     * @brief Gets the Property read-only field in an as either a Boolean or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::BooleanPtr getReadOnlyUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BooleanPtr readOnly;
        auto errCode = this->object->getReadOnlyUnresolved(&readOnly);
        daq::checkErrorInfo(errCode);

        return readOnly;
    }


    /*!
     * @brief Gets the Property selection values in an as either a Dictionary of Int-BaseObject pairs, List of BaseObjects,
     * or unresolved EvalValue. The EvalValue is bound to the owner, if the Property has an owner.

     */
    daq::BaseObjectPtr getSelectionValuesUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::BaseObjectPtr values;
        auto errCode = this->object->getSelectionValuesUnresolved(&values);
        daq::checkErrorInfo(errCode);

        return values;
    }


    /*!
     * @brief Gets the Property referenced property in an as either a Property or unresolved EvalValue. The EvalValue
     * is bound to the owner, if the Property has an owner.

     */
    daq::EvalValuePtr getReferencedPropertyUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::EvalValuePtr propertyEval;
        auto errCode = this->object->getReferencedPropertyUnresolved(&propertyEval);
        daq::checkErrorInfo(errCode);

        return propertyEval;
    }


    /*!
     * @brief Gets the unresolved type of the Property 

     */
    daq::CoreType getValueTypeUnresolved() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::CoreType coreType;
        auto errCode = this->object->getValueTypeUnresolved(&coreType);
        daq::checkErrorInfo(errCode);

        return coreType;
    }

#if __has_include(<coreobjects/property_internal_ptr.custom.h>)
    #include <coreobjects/property_internal_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
