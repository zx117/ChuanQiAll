//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:00.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_object_protected.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyObjectProtectedPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyObjectProtected>
{
    using SmartPtr = daq::PropertyObjectProtectedPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property_object
 * @addtogroup objects_property_object_protected PropertyObjectProtected
 * @{

 */


/*!
 * @brief Provides protected access that allows changing read-only property values of a Property object.

 */

class PropertyObjectProtectedPtr : public daq::ObjectPtr<IPropertyObjectProtected>
{
public:
    using daq::ObjectPtr<IPropertyObjectProtected>::ObjectPtr;
    //using daq::ObjectPtr<IPropertyObjectProtected>::operator=;



    PropertyObjectProtectedPtr()
        : daq::ObjectPtr<IPropertyObjectProtected>()

    {
    }

    PropertyObjectProtectedPtr(daq::ObjectPtr<IPropertyObjectProtected>&& ptr)
        : daq::ObjectPtr<IPropertyObjectProtected>(std::move(ptr))

    {
    }

    PropertyObjectProtectedPtr(const daq::ObjectPtr<IPropertyObjectProtected>& ptr)
        : daq::ObjectPtr<IPropertyObjectProtected>(ptr)

    {
    }

    PropertyObjectProtectedPtr(const PropertyObjectProtectedPtr& other)
        : daq::ObjectPtr<IPropertyObjectProtected>(other)

    {
    }

    PropertyObjectProtectedPtr(PropertyObjectProtectedPtr&& other) noexcept
        : daq::ObjectPtr<IPropertyObjectProtected>(std::move(other))

    {
    }
    
    PropertyObjectProtectedPtr& operator=(const PropertyObjectProtectedPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IPropertyObjectProtected>::operator =(other);


        return *this;
    }

    PropertyObjectProtectedPtr& operator=(PropertyObjectProtectedPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IPropertyObjectProtected>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Sets a property value. Does not fail if the property is read-only.

     * @param propertyName The name of the Property of which value the function should set.
     * @param value The property value to set.
     */
    void setProtectedPropertyValue(const daq::StringPtr& propertyName, const daq::BaseObjectPtr& value) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setProtectedPropertyValue(propertyName, value);
        daq::checkErrorInfo(errCode);
    }


    /*!
     * @brief Clears a property value. Does not fail if the property is read-only.

     * @param propertyName The name of the Property of which value the function should be cleared.
     */
    void clearProtectedPropertyValue(const daq::StringPtr& propertyName) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->clearProtectedPropertyValue(propertyName);
        daq::checkErrorInfo(errCode);
    }

#if __has_include(<coreobjects/property_object_protected_ptr.custom.h>)
    #include <coreobjects/property_object_protected_ptr.custom.h>
#endif
};

/*!
 * @}

 */


END_NAMESPACE_CQDAQ
