//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:54:58.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/component_type.h"
#include <coretypes/objectptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/property_object_ptr.h>




BEGIN_NAMESPACE_CQDAQ

template <typename InterfaceType = daq::IComponentType>
class GenericComponentTypePtr;

using ComponentTypePtr = daq::GenericComponentTypePtr<>;

END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IComponentType>
{
    using SmartPtr = daq::GenericComponentTypePtr<daq::IComponentType>;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_utility
 * @addtogroup objects_component_type Component type
 * @{

 */


/*!
 * @brief Provides information about the component types.

 * Is a Struct core type, and has access to Struct methods internally. Note that the Default config is not part of
 * the Struct fields.
 */
template <typename InterfaceType>
class GenericComponentTypePtr : public daq::ObjectPtr<InterfaceType>
{
public:
    using daq::ObjectPtr<InterfaceType>::ObjectPtr;
    //using daq::ObjectPtr<InterfaceType>::operator=;



    GenericComponentTypePtr()
        : daq::ObjectPtr<InterfaceType>()

    {
    }

    GenericComponentTypePtr(daq::ObjectPtr<InterfaceType>&& ptr)
        : daq::ObjectPtr<InterfaceType>(std::move(ptr))

    {
    }

    GenericComponentTypePtr(const daq::ObjectPtr<InterfaceType>& ptr)
        : daq::ObjectPtr<InterfaceType>(ptr)

    {
    }

    GenericComponentTypePtr(const ComponentTypePtr& other)
        : daq::ObjectPtr<InterfaceType>(other)

    {
    }

    GenericComponentTypePtr(ComponentTypePtr&& other) noexcept
        : daq::ObjectPtr<InterfaceType>(std::move(other))

    {
    }
    
    GenericComponentTypePtr& operator=(const ComponentTypePtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<InterfaceType>::operator =(other);


        return *this;
    }

    GenericComponentTypePtr& operator=(ComponentTypePtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<InterfaceType>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the unique component type id.

     * @returns The unique id of a component type.
     * Unique id should not be presented on the UI.
     */
    daq::StringPtr getId() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr id;
        auto errCode = this->object->getId(&id);
        daq::checkErrorInfo(errCode);

        return id;
    }


    /*!
     * @brief Gets the user-friendly name of a component.

     * @returns The user-friendly name of a component.
     * Name is usually presented on the UI. Does not have to be unique.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr name;
        auto errCode = this->object->getName(&name);
        daq::checkErrorInfo(errCode);

        return name;
    }


    /*!
     * @brief Gets the description of a component.

     * @returns The description of a component.
     * A short description of a component and it's parameters.
     */
    daq::StringPtr getDescription() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr description;
        auto errCode = this->object->getDescription(&description);
        daq::checkErrorInfo(errCode);

        return description;
    }


    /*!
     * @brief The function creates and returns default configuration. On each call, we need to create new object,
     * because we want that each instance of the component has its own configuration object.

     * @returns Newly created configuration object.
     * Configuration objects are property object with user-defined key-value pairs.
     * For example: DefaultPort=1000, OutputRate=5000, ...
     */
    daq::PropertyObjectPtr createDefaultConfig() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyObjectPtr defaultConfig;
        auto errCode = this->object->createDefaultConfig(&defaultConfig);
        daq::checkErrorInfo(errCode);

        return defaultConfig;
    }

#if __has_include(<coreobjects/component_type_ptr.custom.h>)
    #include <coreobjects/component_type_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
