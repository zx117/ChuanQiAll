//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:01.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_object_class.h"
#include <coretypes/type_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/property_ptr.h>
#include <coretypes/list_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyObjectClassPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyObjectClass>
{
    using SmartPtr = daq::PropertyObjectClassPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property_object
 * @addtogroup objects_property_object_class PropertyObjectClass
 * @{

 */


/*!
 * @brief Container of properties that can be used as a base class when instantiating a Property object.

 * A Property object class is defined via a name and a list of properties. For a Property object to be
 * created, using a class as its base, a class must be added to the Type manager.
 * The name of the class must be unique within a given Type manager instance. The name of the Class
 * is used when choosing a template class for a Property object, as well as to define a class hierarchy.
 * A class with the Parent name configured will inherit the properties of the class with said name.
 * The properties of a Property object class are, by default, sorted in insertion order. The order can,
 * however, be overridden by specifying a Property object order - a list containing the names of properties.
 * If specified, when retrieving the list of properties, they will be in the provided order.
 * All Property object class objects are created as Property object class builder objects that allow for
 * customization and building of the class.
 */

class PropertyObjectClassPtr : public GenericTypePtr<IPropertyObjectClass>
{
public:
    using GenericTypePtr<IPropertyObjectClass>::GenericTypePtr;
    //using GenericTypePtr<IPropertyObjectClass>::operator=;



    PropertyObjectClassPtr()
        : GenericTypePtr<IPropertyObjectClass>()

    {
    }

    PropertyObjectClassPtr(daq::ObjectPtr<IPropertyObjectClass>&& ptr)
        : GenericTypePtr<IPropertyObjectClass>(std::move(ptr))

    {
    }

    PropertyObjectClassPtr(const daq::ObjectPtr<IPropertyObjectClass>& ptr)
        : GenericTypePtr<IPropertyObjectClass>(ptr)

    {
    }

    PropertyObjectClassPtr(const PropertyObjectClassPtr& other)
        : GenericTypePtr<IPropertyObjectClass>(other)

    {
    }

    PropertyObjectClassPtr(PropertyObjectClassPtr&& other) noexcept
        : GenericTypePtr<IPropertyObjectClass>(std::move(other))

    {
    }
    
    PropertyObjectClassPtr& operator=(const PropertyObjectClassPtr& other)
    {
        if (this == &other)
            return *this;

        GenericTypePtr<IPropertyObjectClass>::operator =(other);


        return *this;
    }

    PropertyObjectClassPtr& operator=(PropertyObjectClassPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        GenericTypePtr<IPropertyObjectClass>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Gets the name of the parent of the property class.

     * @returns The parent class's name.
     */
    daq::StringPtr getParentName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr parentName;
        auto errCode = this->object->getParentName(&parentName);
        daq::checkErrorInfo(errCode);

        return parentName;
    }


    /*!
     * @brief Gets the class's property with the given name.

     * @param propertyName The property's name.
     * @returns The property.
     * @throws NotFoundException if the Property with name `propertyName` is not added to the class.
     * @throws CqdaqErrException if the parent name is set, but the Type manager is not available.
     */
    daq::PropertyPtr getProperty(const daq::StringPtr& propertyName) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyPtr property;
        auto errCode = this->object->getProperty(propertyName, &property);
        daq::checkErrorInfo(errCode);

        return property;
    }


    /*!
     * @brief Checks if the property is registered.

     * @param propertyName The property's name.
     * @returns True if the property is registered, false otherwise.
     * @throws CqdaqErrException if the parent name is set, but the Type manager is not available.
     */
    daq::Bool hasProperty(const daq::StringPtr& propertyName) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::Bool hasProperty;
        auto errCode = this->object->hasProperty(propertyName, &hasProperty);
        daq::checkErrorInfo(errCode);

        return hasProperty;
    }


    /*!
     * @brief Gets the list of properties added to the class.

     * @param includeInherited If true, the returned list of properties also includes the properties of the class's ancestors.
     * @returns The list of properties.
     * @throws CqdaqErrException if the parent name is set, but the Type manager is not available.
     * The properties are sorted in insertion order, unless a custom sorting order is specified for the class. Any properties
     * not listed in the custom sorting order are listed at the end of the properties list, sorted in insertion order.
     */
    daq::ListPtr<daq::IProperty> getProperties(daq::Bool includeInherited) const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IProperty> properties;
        auto errCode = this->object->getProperties(includeInherited, &properties);
        daq::checkErrorInfo(errCode);

        return properties;
    }

#if __has_include(<coreobjects/property_object_class_ptr.custom.h>)
    #include <coreobjects/property_object_class_ptr.custom.h>
#endif
};

/*!
 * @}
 */


END_NAMESPACE_CQDAQ
