//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CppGenerator v5.0.0) on 20.07.2024 00:55:02.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "coreobjects/property_object_class_builder.h"
#include <coretypes/objectptr.h>
#include <coreobjects/property_object_class_ptr.h>
#include <coretypes/string_ptr.h>
#include <coreobjects/property_ptr.h>
#include <coretypes/dict_ptr.h>
#include <coretypes/list_ptr.h>
#include <coretypes/type_manager_ptr.h>




BEGIN_NAMESPACE_CQDAQ


class PropertyObjectClassBuilderPtr;



END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ

template <>
struct InterfaceToSmartPtr<daq::IPropertyObjectClassBuilder>
{
    using SmartPtr = daq::PropertyObjectClassBuilderPtr;
};


END_NAMESPACE_CQDAQ

BEGIN_NAMESPACE_CQDAQ



/*!
 * @ingroup objects_property_object
 * @addtogroup objects_property_object_class PropertyObjectClassConfig
 * @{

 */


/*!
 * @brief The builder interface of Property object classes. Allows for their modification and building of
 * Property object classes.

 * The configuration interface allows for modifying the list of properties, the class's name, parent, and the
 * sorting order of properties. To build the Class, the `build` method is used.
 */

class PropertyObjectClassBuilderPtr : public daq::ObjectPtr<IPropertyObjectClassBuilder>
{
public:
    using daq::ObjectPtr<IPropertyObjectClassBuilder>::ObjectPtr;
    //using daq::ObjectPtr<IPropertyObjectClassBuilder>::operator=;



    PropertyObjectClassBuilderPtr()
        : daq::ObjectPtr<IPropertyObjectClassBuilder>()

    {
    }

    PropertyObjectClassBuilderPtr(daq::ObjectPtr<IPropertyObjectClassBuilder>&& ptr)
        : daq::ObjectPtr<IPropertyObjectClassBuilder>(std::move(ptr))

    {
    }

    PropertyObjectClassBuilderPtr(const daq::ObjectPtr<IPropertyObjectClassBuilder>& ptr)
        : daq::ObjectPtr<IPropertyObjectClassBuilder>(ptr)

    {
    }

    PropertyObjectClassBuilderPtr(const PropertyObjectClassBuilderPtr& other)
        : daq::ObjectPtr<IPropertyObjectClassBuilder>(other)

    {
    }

    PropertyObjectClassBuilderPtr(PropertyObjectClassBuilderPtr&& other) noexcept
        : daq::ObjectPtr<IPropertyObjectClassBuilder>(std::move(other))

    {
    }
    
    PropertyObjectClassBuilderPtr& operator=(const PropertyObjectClassBuilderPtr& other)
    {
        if (this == &other)
            return *this;

        daq::ObjectPtr<IPropertyObjectClassBuilder>::operator =(other);


        return *this;
    }

    PropertyObjectClassBuilderPtr& operator=(PropertyObjectClassBuilderPtr&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }


        daq::ObjectPtr<IPropertyObjectClassBuilder>::operator =(std::move(other));

        return *this;
    }


    /*!
     * @brief Builds and returns a Property object class using the currently set values of the Builder.

     * @returns The built Property object class.
     */
    daq::PropertyObjectClassPtr build() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::PropertyObjectClassPtr propertyObjectClass;
        auto errCode = this->object->build(&propertyObjectClass);
        daq::checkErrorInfo(errCode);

        return propertyObjectClass;
    }


    /*!
     * @brief Sets the name of the property class.

     * @param className The name of the class.
     */
    PropertyObjectClassBuilderPtr setName(const daq::StringPtr& className) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setName(className);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the name of the property class.

     * @returns The name of the class.
     */
    daq::StringPtr getName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr className;
        auto errCode = this->object->getName(&className);
        daq::checkErrorInfo(errCode);

        return className;
    }


    /*!
     * @brief Gets the name of the parent of the property class.

     * @param parentName The parent class's name.
     */
    PropertyObjectClassBuilderPtr setParentName(const daq::StringPtr& parentName) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setParentName(parentName);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the name of the parent of the property class.

     * @returns The parent class's name.
     */
    daq::StringPtr getParentName() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::StringPtr parentName;
        auto errCode = this->object->getParentName(&parentName);
        daq::checkErrorInfo(errCode);

        return parentName;
    }


    /*!
     * @brief Adds a property to the class.

     * @param property The property to be added.
     * @throws AlreadyExistsException if a property with the same name already added to the class.
     * @throws InvalidTypeException if the property is an object type and is not atomic.
     * The default value of object-type properties that are added to a class are frozen once added.
     */
    PropertyObjectClassBuilderPtr addProperty(const daq::PropertyPtr& property) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->addProperty(property);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets the dictionary of properties

     * @returns dictionary of properties
     */
    daq::DictPtr<daq::IString, daq::IProperty> getProperties() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::DictPtr<daq::IString, daq::IProperty> properties;
        auto errCode = this->object->getProperties(&properties);
        daq::checkErrorInfo(errCode);

        return properties;
    }


    /*!
     * @brief Removes a property with the given name from the class.

     * @param propertyName The name of the property to be removed.
     * @throws NotFoundException if the property with `propertyName` is not a member of the class.
     */
    PropertyObjectClassBuilderPtr removeProperty(const daq::StringPtr& propertyName) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->removeProperty(propertyName);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Sets a custom order of properties as defined in the list of property names.

     * @param orderedPropertyNames A list of names of properties. The order of the list is applied to the class's properties.
     * The list should contain names of properties available in the class. When retrieving the class's properties, they will
     * be sorted in the order in which the names appear in the provided list. Any class properties not in the custom order are
     * kept in insertion order at the end of the class's list of properties.
     */
    PropertyObjectClassBuilderPtr setPropertyOrder(const daq::ListPtr<daq::IString>& orderedPropertyNames) const
     {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        auto errCode = this->object->setPropertyOrder(orderedPropertyNames);
        daq::checkErrorInfo(errCode);
        return this->addRefAndReturn();
    }


    /*!
     * @brief Gets a custom order of properties as defined in the list of property names.

     * @returns A list of names of properties. The order of the list is applied to the class's properties.
     */
    daq::ListPtr<daq::IString> getPropertyOrder() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::ListPtr<daq::IString> orderedPropertyNames;
        auto errCode = this->object->getPropertyOrder(&orderedPropertyNames);
        daq::checkErrorInfo(errCode);

        return orderedPropertyNames;
    }


    /*!
     * @brief Gets a type manager

     * @returns a type manager
     */
    daq::TypeManagerPtr getManager() const
    {
        if (this->object == nullptr)
            throw daq::InvalidParameterException();

        daq::TypeManagerPtr manager;
        auto errCode = this->object->getManager(&manager);
        daq::checkErrorInfo(errCode);

        return manager;
    }

#if __has_include(<coreobjects/property_object_class_builder_ptr.custom.h>)
    #include <coreobjects/property_object_class_builder_ptr.custom.h>
#endif
};

/*!
 * @}
 */


/*!
 * @addtogroup objects_property_object_class_factories Factories
 * @{

 */


/*!
 * @}
 */


END_NAMESPACE_CQDAQ
